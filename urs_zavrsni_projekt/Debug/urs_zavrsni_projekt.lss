
urs_zavrsni_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  000027fc  00002890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001bc  008001bc  000029ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004611  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00007205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152e  00000000  00000000  00007a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  00008f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a94  00000000  00000000  00009804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003729  00000000  00000000  0000a298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000d9c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 0c 	call	0x189e	; 0x189e <main>
      8a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9TFT_startv>:
		}
		if (e2 > x) {
			err += ++x * 2 + 1;
		}
	} while (x <= 0);
}
      92:	88 b3       	in	r24, 0x18	; 24
      94:	80 6b       	ori	r24, 0xB0	; 176
      96:	88 bb       	out	0x18, r24	; 24
      98:	08 95       	ret

0000009a <_Z15TFT_touch_writeh>:
      9a:	c7 98       	cbi	0x18, 7	; 24
      9c:	97 e0       	ldi	r25, 0x07	; 7
      9e:	48 2f       	mov	r20, r24
      a0:	50 e0       	ldi	r21, 0x00	; 0
      a2:	9a 01       	movw	r18, r20
      a4:	09 2e       	mov	r0, r25
      a6:	02 c0       	rjmp	.+4      	; 0xac <_Z15TFT_touch_writeh+0x12>
      a8:	35 95       	asr	r19
      aa:	27 95       	ror	r18
      ac:	0a 94       	dec	r0
      ae:	e2 f7       	brpl	.-8      	; 0xa8 <_Z15TFT_touch_writeh+0xe>
      b0:	20 ff       	sbrs	r18, 0
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <_Z15TFT_touch_writeh+0x1e>
      b4:	c5 9a       	sbi	0x18, 5	; 24
      b6:	01 c0       	rjmp	.+2      	; 0xba <_Z15TFT_touch_writeh+0x20>
      b8:	c5 98       	cbi	0x18, 5	; 24
      ba:	c7 98       	cbi	0x18, 7	; 24
      bc:	c7 9a       	sbi	0x18, 7	; 24
      be:	91 50       	subi	r25, 0x01	; 1
      c0:	80 f7       	brcc	.-32     	; 0xa2 <_Z15TFT_touch_writeh+0x8>
      c2:	08 95       	ret

000000c4 <_Z14TFT_touch_readv>:
      c4:	2c e0       	ldi	r18, 0x0C	; 12
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	c7 9a       	sbi	0x18, 7	; 24
      d0:	c7 98       	cbi	0x18, 7	; 24
      d2:	36 b3       	in	r19, 0x16	; 22
      d4:	36 fb       	bst	r19, 6
      d6:	44 27       	eor	r20, r20
      d8:	40 f9       	bld	r20, 0
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	84 0f       	add	r24, r20
      de:	95 1f       	adc	r25, r21
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	99 f7       	brne	.-26     	; 0xca <_Z14TFT_touch_readv+0x6>
      e4:	08 95       	ret

000000e6 <_Z9TFT_writejh>:
      e6:	66 23       	and	r22, r22
      e8:	11 f0       	breq	.+4      	; 0xee <_Z9TFT_writejh+0x8>
      ea:	a8 9a       	sbi	0x15, 0	; 21
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <_Z9TFT_writejh+0xa>
      ee:	a8 98       	cbi	0x15, 0	; 21
      f0:	af 98       	cbi	0x15, 7	; 21
      f2:	9b bb       	out	0x1b, r25	; 27
      f4:	82 bb       	out	0x12, r24	; 18
      f6:	a9 9a       	sbi	0x15, 1	; 21
      f8:	a9 98       	cbi	0x15, 1	; 21
      fa:	af 9a       	sbi	0x15, 7	; 21
      fc:	08 95       	ret

000000fe <_Z14TFT_write_pairjj>:
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	eb 01       	movw	r28, r22
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	ce 01       	movw	r24, r28
     10e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <_Z15TFT_set_addressjjjj>:
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8c 01       	movw	r16, r24
     126:	eb 01       	movw	r28, r22
     128:	79 01       	movw	r14, r18
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	74 2f       	mov	r23, r20
     130:	68 0f       	add	r22, r24
     132:	79 1f       	adc	r23, r25
     134:	84 e4       	ldi	r24, 0x44	; 68
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     13c:	be 01       	movw	r22, r28
     13e:	85 e4       	ldi	r24, 0x45	; 69
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     146:	b7 01       	movw	r22, r14
     148:	86 e4       	ldi	r24, 0x46	; 70
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     150:	b8 01       	movw	r22, r16
     152:	8e e4       	ldi	r24, 0x4E	; 78
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     15a:	be 01       	movw	r22, r28
     15c:	8f e4       	ldi	r24, 0x4F	; 79
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	82 e2       	ldi	r24, 0x22	; 34
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	08 95       	ret

0000017c <_Z8TFT_initv>:
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	8a bb       	out	0x1a, r24	; 26
     180:	81 bb       	out	0x11, r24	; 17
     182:	84 b3       	in	r24, 0x14	; 20
     184:	83 6c       	ori	r24, 0xC3	; 195
     186:	84 bb       	out	0x14, r24	; 20
     188:	8e eb       	ldi	r24, 0xBE	; 190
     18a:	87 bb       	out	0x17, r24	; 23
     18c:	87 b3       	in	r24, 0x17	; 23
     18e:	86 60       	ori	r24, 0x06	; 6
     190:	87 bb       	out	0x17, r24	; 23
     192:	88 b3       	in	r24, 0x18	; 24
     194:	86 60       	ori	r24, 0x06	; 6
     196:	88 bb       	out	0x18, r24	; 24
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	93 e2       	ldi	r25, 0x23	; 35
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <_Z8TFT_initv+0x20>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z8TFT_initv+0x26>
     1a2:	00 00       	nop
     1a4:	c1 98       	cbi	0x18, 1	; 24
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	97 e4       	ldi	r25, 0x47	; 71
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z8TFT_initv+0x2e>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z8TFT_initv+0x34>
     1b0:	00 00       	nop
     1b2:	c1 9a       	sbi	0x18, 1	; 24
     1b4:	af 9a       	sbi	0x15, 7	; 21
     1b6:	ae 9a       	sbi	0x15, 6	; 21
     1b8:	a9 98       	cbi	0x15, 1	; 21
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	9f e8       	ldi	r25, 0x8F	; 143
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z8TFT_initv+0x42>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z8TFT_initv+0x48>
     1c4:	00 00       	nop
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1d2:	83 e3       	ldi	r24, 0x33	; 51
     1d4:	97 e0       	ldi	r25, 0x07	; 7
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_Z8TFT_initv+0x5a>
     1da:	64 ea       	ldi	r22, 0xA4	; 164
     1dc:	78 ea       	ldi	r23, 0xA8	; 168
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1e6:	83 e3       	ldi	r24, 0x33	; 51
     1e8:	97 e0       	ldi	r25, 0x07	; 7
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <_Z8TFT_initv+0x6e>
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8c e0       	ldi	r24, 0x0C	; 12
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1fa:	83 e3       	ldi	r24, 0x33	; 51
     1fc:	97 e0       	ldi	r25, 0x07	; 7
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z8TFT_initv+0x82>
     202:	6c e0       	ldi	r22, 0x0C	; 12
     204:	78 e0       	ldi	r23, 0x08	; 8
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     20e:	83 e3       	ldi	r24, 0x33	; 51
     210:	97 e0       	ldi	r25, 0x07	; 7
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z8TFT_initv+0x96>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	7b e2       	ldi	r23, 0x2B	; 43
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     222:	83 e3       	ldi	r24, 0x33	; 51
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z8TFT_initv+0xaa>
     22a:	60 eb       	ldi	r22, 0xB0	; 176
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     236:	83 e3       	ldi	r24, 0x33	; 51
     238:	97 e0       	ldi	r25, 0x07	; 7
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z8TFT_initv+0xbe>
     23e:	6f e3       	ldi	r22, 0x3F	; 63
     240:	7b e2       	ldi	r23, 0x2B	; 43
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     24a:	83 e3       	ldi	r24, 0x33	; 51
     24c:	97 e0       	ldi	r25, 0x07	; 7
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <_Z8TFT_initv+0xd2>
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	76 e0       	ldi	r23, 0x06	; 6
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     25e:	83 e3       	ldi	r24, 0x33	; 51
     260:	97 e0       	ldi	r25, 0x07	; 7
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <_Z8TFT_initv+0xe6>
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     272:	83 e3       	ldi	r24, 0x33	; 51
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <_Z8TFT_initv+0xfa>
     27a:	60 e7       	ldi	r22, 0x70	; 112
     27c:	70 e6       	ldi	r23, 0x60	; 96
     27e:	81 e1       	ldi	r24, 0x11	; 17
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     286:	83 e3       	ldi	r24, 0x33	; 51
     288:	97 e0       	ldi	r25, 0x07	; 7
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_Z8TFT_initv+0x10e>
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     29a:	83 e3       	ldi	r24, 0x33	; 51
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <_Z8TFT_initv+0x122>
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ae:	83 e3       	ldi	r24, 0x33	; 51
     2b0:	97 e0       	ldi	r25, 0x07	; 7
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <_Z8TFT_initv+0x136>
     2b6:	6c e1       	ldi	r22, 0x1C	; 28
     2b8:	7f ee       	ldi	r23, 0xEF	; 239
     2ba:	86 e1       	ldi	r24, 0x16	; 22
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z8TFT_initv+0x14a>
     2ca:	63 e0       	ldi	r22, 0x03	; 3
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e1       	ldi	r24, 0x17	; 23
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2d6:	83 e3       	ldi	r24, 0x33	; 51
     2d8:	97 e0       	ldi	r25, 0x07	; 7
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <_Z8TFT_initv+0x15e>
     2de:	63 e3       	ldi	r22, 0x33	; 51
     2e0:	72 e0       	ldi	r23, 0x02	; 2
     2e2:	87 e0       	ldi	r24, 0x07	; 7
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ea:	83 e3       	ldi	r24, 0x33	; 51
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <_Z8TFT_initv+0x172>
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8b e0       	ldi	r24, 0x0B	; 11
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2fe:	83 e3       	ldi	r24, 0x33	; 51
     300:	97 e0       	ldi	r25, 0x07	; 7
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <_Z8TFT_initv+0x186>
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     312:	83 e3       	ldi	r24, 0x33	; 51
     314:	97 e0       	ldi	r25, 0x07	; 7
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <_Z8TFT_initv+0x19a>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	81 e4       	ldi	r24, 0x41	; 65
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     326:	83 e3       	ldi	r24, 0x33	; 51
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_Z8TFT_initv+0x1ae>
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <_Z8TFT_initv+0x1c2>
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	88 e4       	ldi	r24, 0x48	; 72
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	97 e0       	ldi	r25, 0x07	; 7
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <_Z8TFT_initv+0x1d6>
     356:	6f e3       	ldi	r22, 0x3F	; 63
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	89 e4       	ldi	r24, 0x49	; 73
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     362:	83 e3       	ldi	r24, 0x33	; 51
     364:	97 e0       	ldi	r25, 0x07	; 7
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <_Z8TFT_initv+0x1ea>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	8a e4       	ldi	r24, 0x4A	; 74
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     376:	83 e3       	ldi	r24, 0x33	; 51
     378:	97 e0       	ldi	r25, 0x07	; 7
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <_Z8TFT_initv+0x1fe>
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8b e4       	ldi	r24, 0x4B	; 75
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     38a:	83 e3       	ldi	r24, 0x33	; 51
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_Z8TFT_initv+0x212>
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	7f ee       	ldi	r23, 0xEF	; 239
     396:	84 e4       	ldi	r24, 0x44	; 68
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     39e:	83 e3       	ldi	r24, 0x33	; 51
     3a0:	97 e0       	ldi	r25, 0x07	; 7
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <_Z8TFT_initv+0x226>
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	85 e4       	ldi	r24, 0x45	; 69
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3b2:	83 e3       	ldi	r24, 0x33	; 51
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_Z8TFT_initv+0x23a>
     3ba:	6f e3       	ldi	r22, 0x3F	; 63
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	86 e4       	ldi	r24, 0x46	; 70
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3c6:	83 e3       	ldi	r24, 0x33	; 51
     3c8:	97 e0       	ldi	r25, 0x07	; 7
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <_Z8TFT_initv+0x24e>
     3ce:	67 e0       	ldi	r22, 0x07	; 7
     3d0:	77 e0       	ldi	r23, 0x07	; 7
     3d2:	80 e3       	ldi	r24, 0x30	; 48
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3da:	83 e3       	ldi	r24, 0x33	; 51
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <_Z8TFT_initv+0x262>
     3e2:	64 e0       	ldi	r22, 0x04	; 4
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	81 e3       	ldi	r24, 0x31	; 49
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3ee:	83 e3       	ldi	r24, 0x33	; 51
     3f0:	97 e0       	ldi	r25, 0x07	; 7
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_Z8TFT_initv+0x276>
     3f6:	64 e0       	ldi	r22, 0x04	; 4
     3f8:	72 e0       	ldi	r23, 0x02	; 2
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     402:	83 e3       	ldi	r24, 0x33	; 51
     404:	97 e0       	ldi	r25, 0x07	; 7
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	75 e0       	ldi	r23, 0x05	; 5
     40e:	83 e3       	ldi	r24, 0x33	; 51
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     416:	83 e3       	ldi	r24, 0x33	; 51
     418:	97 e0       	ldi	r25, 0x07	; 7
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	75 e0       	ldi	r23, 0x05	; 5
     422:	84 e3       	ldi	r24, 0x34	; 52
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     42a:	83 e3       	ldi	r24, 0x33	; 51
     42c:	97 e0       	ldi	r25, 0x07	; 7
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	64 e0       	ldi	r22, 0x04	; 4
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	85 e3       	ldi	r24, 0x35	; 53
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     43e:	83 e3       	ldi	r24, 0x33	; 51
     440:	97 e0       	ldi	r25, 0x07	; 7
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	72 e0       	ldi	r23, 0x02	; 2
     44a:	86 e3       	ldi	r24, 0x36	; 54
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     452:	83 e3       	ldi	r24, 0x33	; 51
     454:	97 e0       	ldi	r25, 0x07	; 7
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	75 e0       	ldi	r23, 0x05	; 5
     45e:	87 e3       	ldi	r24, 0x37	; 55
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     466:	83 e3       	ldi	r24, 0x33	; 51
     468:	97 e0       	ldi	r25, 0x07	; 7
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	73 e0       	ldi	r23, 0x03	; 3
     472:	8a e3       	ldi	r24, 0x3A	; 58
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     47a:	83 e3       	ldi	r24, 0x33	; 51
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	73 e0       	ldi	r23, 0x03	; 3
     486:	8b e3       	ldi	r24, 0x3B	; 59
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     48e:	83 e3       	ldi	r24, 0x33	; 51
     490:	97 e0       	ldi	r25, 0x07	; 7
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e2       	ldi	r24, 0x23	; 35
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4a2:	83 e3       	ldi	r24, 0x33	; 51
     4a4:	97 e0       	ldi	r25, 0x07	; 7
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	84 e2       	ldi	r24, 0x24	; 36
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	97 e0       	ldi	r25, 0x07	; 7
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8f e4       	ldi	r24, 0x4F	; 79
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	8e e4       	ldi	r24, 0x4E	; 78
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	82 e2       	ldi	r24, 0x22	; 34
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     4e0:	08 95       	ret

000004e2 <_Z14TFT_set_cursorjj>:
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	eb 01       	movw	r28, r22
     4e8:	bc 01       	movw	r22, r24
     4ea:	8e e4       	ldi	r24, 0x4E	; 78
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4f2:	60 e4       	ldi	r22, 0x40	; 64
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	6c 1b       	sub	r22, r28
     4f8:	7d 0b       	sbc	r23, r29
     4fa:	8f e4       	ldi	r24, 0x4F	; 79
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <_Z17read_touch_coordsPjS_>:
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	8b 01       	movw	r16, r22
     51e:	83 e3       	ldi	r24, 0x33	; 51
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z17read_touch_coordsPjS_+0x10>
     526:	c4 98       	cbi	0x18, 4	; 24
     528:	80 e9       	ldi	r24, 0x90	; 144
     52a:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     52e:	e3 e3       	ldi	r30, 0x33	; 51
     530:	f7 e0       	ldi	r31, 0x07	; 7
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <_Z17read_touch_coordsPjS_+0x20>
     536:	c7 9a       	sbi	0x18, 7	; 24
	...
     540:	c7 98       	cbi	0x18, 7	; 24
	...
     54a:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     54e:	9c 01       	movw	r18, r24
     550:	20 55       	subi	r18, 0x50	; 80
     552:	31 09       	sbc	r19, r1
     554:	ab ea       	ldi	r26, 0xAB	; 171
     556:	ba ea       	ldi	r27, 0xAA	; 170
     558:	0e 94 03 11 	call	0x2206	; 0x2206 <__umulhisi3>
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	f8 01       	movw	r30, r16
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
     56a:	80 ed       	ldi	r24, 0xD0	; 208
     56c:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     570:	c7 9a       	sbi	0x18, 7	; 24
	...
     57a:	c7 98       	cbi	0x18, 7	; 24
	...
     584:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     588:	80 55       	subi	r24, 0x50	; 80
     58a:	91 09       	sbc	r25, r1
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	99 83       	std	Y+1, r25	; 0x01
     59a:	88 83       	st	Y, r24
     59c:	c4 9a       	sbi	0x18, 4	; 24
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <_Z20set_background_colorj>:
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	8c 01       	movw	r16, r24
     5b4:	2f e3       	ldi	r18, 0x3F	; 63
     5b6:	31 e0       	ldi	r19, 0x01	; 1
     5b8:	4f ee       	ldi	r20, 0xEF	; 239
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 8c 00 	call	0x118	; 0x118 <_Z15TFT_set_addressjjjj>
     5c8:	68 94       	set
     5ca:	ee 24       	eor	r14, r14
     5cc:	e6 f8       	bld	r14, 6
     5ce:	ff 24       	eor	r15, r15
     5d0:	f3 94       	inc	r15
     5d2:	c0 ef       	ldi	r28, 0xF0	; 240
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     5dc:	c1 50       	subi	r28, 0x01	; 1
     5de:	d1 f7       	brne	.-12     	; 0x5d4 <_Z20set_background_colorj+0x2c>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	e8 1a       	sub	r14, r24
     5e4:	f1 08       	sbc	r15, r1
     5e6:	a9 f7       	brne	.-22     	; 0x5d2 <_Z20set_background_colorj+0x2a>
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <_Z10draw_pixeljjj>:
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ea 01       	movw	r28, r20
     5fa:	af 98       	cbi	0x15, 7	; 21
     5fc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z14TFT_set_cursorjj>
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	ce 01       	movw	r24, r28
     604:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     608:	af 9a       	sbi	0x15, 7	; 21
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_Z15draw_font_pixeljjjh>:
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	22 23       	and	r18, r18
     62a:	e9 f0       	breq	.+58     	; 0x666 <_Z15draw_font_pixeljjjh+0x56>
     62c:	a2 2e       	mov	r10, r18
     62e:	6a 01       	movw	r12, r20
     630:	4b 01       	movw	r8, r22
     632:	08 2f       	mov	r16, r24
     634:	19 2f       	mov	r17, r25
     636:	b1 2c       	mov	r11, r1
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	82 0f       	add	r24, r18
     63c:	7b 01       	movw	r14, r22
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	e9 1a       	sub	r14, r25
     642:	f9 0a       	sbc	r15, r25
     644:	e8 0e       	add	r14, r24
     646:	f1 1c       	adc	r15, r1
     648:	e4 01       	movw	r28, r8
     64a:	a6 01       	movw	r20, r12
     64c:	be 01       	movw	r22, r28
     64e:	c8 01       	movw	r24, r16
     650:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     654:	21 96       	adiw	r28, 0x01	; 1
     656:	ce 15       	cp	r28, r14
     658:	df 05       	cpc	r29, r15
     65a:	b9 f7       	brne	.-18     	; 0x64a <_Z15draw_font_pixeljjjh+0x3a>
     65c:	b3 94       	inc	r11
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	ab 10       	cpse	r10, r11
     664:	f1 cf       	rjmp	.-30     	; 0x648 <_Z15draw_font_pixeljjjh+0x38>
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <_Z10print_charjjhjjh>:
     680:	2f 92       	push	r2
     682:	3f 92       	push	r3
     684:	4f 92       	push	r4
     686:	5f 92       	push	r5
     688:	6f 92       	push	r6
     68a:	7f 92       	push	r7
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <_Z10print_charjjhjjh+0x26>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <_Z10print_charjjhjjh+0x28>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	6b 01       	movw	r12, r22
     6b2:	54 2e       	mov	r5, r20
     6b4:	39 01       	movw	r6, r18
     6b6:	18 01       	movw	r2, r16
     6b8:	f1 2c       	mov	r15, r1
     6ba:	47 01       	movw	r8, r14
     6bc:	88 0c       	add	r8, r8
     6be:	99 1c       	adc	r9, r9
     6c0:	88 0c       	add	r8, r8
     6c2:	99 1c       	adc	r9, r9
     6c4:	c4 01       	movw	r24, r8
     6c6:	8e 0d       	add	r24, r14
     6c8:	9f 1d       	adc	r25, r15
     6ca:	9c 01       	movw	r18, r24
     6cc:	22 50       	subi	r18, 0x02	; 2
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	49 01       	movw	r8, r18
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f5 e0       	ldi	r31, 0x05	; 5
     6d6:	4f 2e       	mov	r4, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	a4 2e       	mov	r10, r20
     6dc:	b1 2c       	mov	r11, r1
     6de:	f4 01       	movw	r30, r8
     6e0:	e1 90       	ld	r14, Z+
     6e2:	4f 01       	movw	r8, r30
     6e4:	09 81       	ldd	r16, Y+1	; 0x01
     6e6:	1a 81       	ldd	r17, Y+2	; 0x02
     6e8:	1c 82       	std	Y+4, r1	; 0x04
     6ea:	1b 82       	std	Y+3, r1	; 0x03
     6ec:	f1 2c       	mov	r15, r1
     6ee:	c7 01       	movw	r24, r14
     6f0:	0b 80       	ldd	r0, Y+3	; 0x03
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_Z10print_charjjhjjh+0x78>
     6f4:	95 95       	asr	r25
     6f6:	87 95       	ror	r24
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <_Z10print_charjjhjjh+0x74>
     6fc:	80 ff       	sbrs	r24, 0
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <_Z10print_charjjhjjh+0x8e>
     700:	25 2d       	mov	r18, r5
     702:	a3 01       	movw	r20, r6
     704:	b6 01       	movw	r22, r12
     706:	c8 01       	movw	r24, r16
     708:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     70c:	06 c0       	rjmp	.+12     	; 0x71a <_Z10print_charjjhjjh+0x9a>
     70e:	25 2d       	mov	r18, r5
     710:	a1 01       	movw	r20, r2
     712:	b6 01       	movw	r22, r12
     714:	c8 01       	movw	r24, r16
     716:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     71a:	2b 81       	ldd	r18, Y+3	; 0x03
     71c:	3c 81       	ldd	r19, Y+4	; 0x04
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	3c 83       	std	Y+4, r19	; 0x04
     724:	2b 83       	std	Y+3, r18	; 0x03
     726:	0a 0d       	add	r16, r10
     728:	1b 1d       	adc	r17, r11
     72a:	28 30       	cpi	r18, 0x08	; 8
     72c:	31 05       	cpc	r19, r1
     72e:	f9 f6       	brne	.-66     	; 0x6ee <_Z10print_charjjhjjh+0x6e>
     730:	ca 0c       	add	r12, r10
     732:	db 1c       	adc	r13, r11
     734:	4a 94       	dec	r4
     736:	41 10       	cpse	r4, r1
     738:	d2 cf       	rjmp	.-92     	; 0x6de <_Z10print_charjjhjjh+0x5e>
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	bf 90       	pop	r11
     754:	af 90       	pop	r10
     756:	9f 90       	pop	r9
     758:	8f 90       	pop	r8
     75a:	7f 90       	pop	r7
     75c:	6f 90       	pop	r6
     75e:	5f 90       	pop	r5
     760:	4f 90       	pop	r4
     762:	3f 90       	pop	r3
     764:	2f 90       	pop	r2
     766:	08 95       	ret

00000768 <_Z12print_stringjjhjjPKc>:
     768:	3f 92       	push	r3
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
     78c:	34 2e       	mov	r3, r20
     78e:	49 01       	movw	r8, r18
     790:	28 01       	movw	r4, r16
     792:	67 01       	movw	r12, r14
     794:	a4 2e       	mov	r10, r20
     796:	b1 2c       	mov	r11, r1
     798:	95 01       	movw	r18, r10
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	a2 0e       	add	r10, r18
     7a4:	b3 1e       	adc	r11, r19
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	a2 1a       	sub	r10, r18
     7aa:	b2 0a       	sbc	r11, r18
     7ac:	f1 2c       	mov	r15, r1
     7ae:	3c 01       	movw	r6, r24
     7b0:	64 0e       	add	r6, r20
     7b2:	71 1c       	adc	r7, r1
     7b4:	f6 01       	movw	r30, r12
     7b6:	ef 0d       	add	r30, r15
     7b8:	f1 1d       	adc	r31, r1
     7ba:	80 81       	ld	r24, Z
     7bc:	80 32       	cpi	r24, 0x20	; 32
     7be:	61 f4       	brne	.+24     	; 0x7d8 <_Z12print_stringjjhjjPKc+0x70>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fa e1       	ldi	r31, 0x1A	; 26
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	82 01       	movw	r16, r4
     7ca:	94 01       	movw	r18, r8
     7cc:	43 2d       	mov	r20, r3
     7ce:	be 01       	movw	r22, r28
     7d0:	c3 01       	movw	r24, r6
     7d2:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7d6:	a5 c0       	rjmp	.+330    	; 0x922 <__stack+0xc3>
     7d8:	80 33       	cpi	r24, 0x30	; 48
     7da:	61 f4       	brne	.+24     	; 0x7f4 <_Z12print_stringjjhjjPKc+0x8c>
     7dc:	0f 2e       	mov	r0, r31
     7de:	fb e1       	ldi	r31, 0x1B	; 27
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	82 01       	movw	r16, r4
     7e6:	94 01       	movw	r18, r8
     7e8:	43 2d       	mov	r20, r3
     7ea:	be 01       	movw	r22, r28
     7ec:	c3 01       	movw	r24, r6
     7ee:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7f2:	97 c0       	rjmp	.+302    	; 0x922 <__stack+0xc3>
     7f4:	81 33       	cpi	r24, 0x31	; 49
     7f6:	61 f4       	brne	.+24     	; 0x810 <_Z12print_stringjjhjjPKc+0xa8>
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fc e1       	ldi	r31, 0x1C	; 28
     7fc:	ef 2e       	mov	r14, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	82 01       	movw	r16, r4
     802:	94 01       	movw	r18, r8
     804:	43 2d       	mov	r20, r3
     806:	be 01       	movw	r22, r28
     808:	c3 01       	movw	r24, r6
     80a:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     80e:	89 c0       	rjmp	.+274    	; 0x922 <__stack+0xc3>
     810:	82 33       	cpi	r24, 0x32	; 50
     812:	61 f4       	brne	.+24     	; 0x82c <_Z12print_stringjjhjjPKc+0xc4>
     814:	0f 2e       	mov	r0, r31
     816:	fd e1       	ldi	r31, 0x1D	; 29
     818:	ef 2e       	mov	r14, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	82 01       	movw	r16, r4
     81e:	94 01       	movw	r18, r8
     820:	43 2d       	mov	r20, r3
     822:	be 01       	movw	r22, r28
     824:	c3 01       	movw	r24, r6
     826:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     82a:	7b c0       	rjmp	.+246    	; 0x922 <__stack+0xc3>
     82c:	83 33       	cpi	r24, 0x33	; 51
     82e:	61 f4       	brne	.+24     	; 0x848 <_Z12print_stringjjhjjPKc+0xe0>
     830:	0f 2e       	mov	r0, r31
     832:	fe e1       	ldi	r31, 0x1E	; 30
     834:	ef 2e       	mov	r14, r31
     836:	f0 2d       	mov	r31, r0
     838:	82 01       	movw	r16, r4
     83a:	94 01       	movw	r18, r8
     83c:	43 2d       	mov	r20, r3
     83e:	be 01       	movw	r22, r28
     840:	c3 01       	movw	r24, r6
     842:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     846:	6d c0       	rjmp	.+218    	; 0x922 <__stack+0xc3>
     848:	84 33       	cpi	r24, 0x34	; 52
     84a:	61 f4       	brne	.+24     	; 0x864 <__stack+0x5>
     84c:	0f 2e       	mov	r0, r31
     84e:	ff e1       	ldi	r31, 0x1F	; 31
     850:	ef 2e       	mov	r14, r31
     852:	f0 2d       	mov	r31, r0
     854:	82 01       	movw	r16, r4
     856:	94 01       	movw	r18, r8
     858:	43 2d       	mov	r20, r3
     85a:	be 01       	movw	r22, r28
     85c:	c3 01       	movw	r24, r6
     85e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     862:	5f c0       	rjmp	.+190    	; 0x922 <__stack+0xc3>
     864:	85 33       	cpi	r24, 0x35	; 53
     866:	59 f4       	brne	.+22     	; 0x87e <__stack+0x1f>
     868:	68 94       	set
     86a:	ee 24       	eor	r14, r14
     86c:	e5 f8       	bld	r14, 5
     86e:	82 01       	movw	r16, r4
     870:	94 01       	movw	r18, r8
     872:	43 2d       	mov	r20, r3
     874:	be 01       	movw	r22, r28
     876:	c3 01       	movw	r24, r6
     878:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     87c:	52 c0       	rjmp	.+164    	; 0x922 <__stack+0xc3>
     87e:	86 33       	cpi	r24, 0x36	; 54
     880:	61 f4       	brne	.+24     	; 0x89a <__stack+0x3b>
     882:	0f 2e       	mov	r0, r31
     884:	f1 e2       	ldi	r31, 0x21	; 33
     886:	ef 2e       	mov	r14, r31
     888:	f0 2d       	mov	r31, r0
     88a:	82 01       	movw	r16, r4
     88c:	94 01       	movw	r18, r8
     88e:	43 2d       	mov	r20, r3
     890:	be 01       	movw	r22, r28
     892:	c3 01       	movw	r24, r6
     894:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     898:	44 c0       	rjmp	.+136    	; 0x922 <__stack+0xc3>
     89a:	87 33       	cpi	r24, 0x37	; 55
     89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x57>
     89e:	0f 2e       	mov	r0, r31
     8a0:	f2 e2       	ldi	r31, 0x22	; 34
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	82 01       	movw	r16, r4
     8a8:	94 01       	movw	r18, r8
     8aa:	43 2d       	mov	r20, r3
     8ac:	be 01       	movw	r22, r28
     8ae:	c3 01       	movw	r24, r6
     8b0:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8b4:	36 c0       	rjmp	.+108    	; 0x922 <__stack+0xc3>
     8b6:	88 33       	cpi	r24, 0x38	; 56
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <__stack+0x73>
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f3 e2       	ldi	r31, 0x23	; 35
     8be:	ef 2e       	mov	r14, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	82 01       	movw	r16, r4
     8c4:	94 01       	movw	r18, r8
     8c6:	43 2d       	mov	r20, r3
     8c8:	be 01       	movw	r22, r28
     8ca:	c3 01       	movw	r24, r6
     8cc:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8d0:	28 c0       	rjmp	.+80     	; 0x922 <__stack+0xc3>
     8d2:	89 33       	cpi	r24, 0x39	; 57
     8d4:	61 f4       	brne	.+24     	; 0x8ee <__stack+0x8f>
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f4 e2       	ldi	r31, 0x24	; 36
     8da:	ef 2e       	mov	r14, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	82 01       	movw	r16, r4
     8e0:	94 01       	movw	r18, r8
     8e2:	43 2d       	mov	r20, r3
     8e4:	be 01       	movw	r22, r28
     8e6:	c3 01       	movw	r24, r6
     8e8:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8ec:	1a c0       	rjmp	.+52     	; 0x922 <__stack+0xc3>
     8ee:	8a 33       	cpi	r24, 0x3A	; 58
     8f0:	61 f4       	brne	.+24     	; 0x90a <__stack+0xab>
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f5 e2       	ldi	r31, 0x25	; 37
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	82 01       	movw	r16, r4
     8fc:	94 01       	movw	r18, r8
     8fe:	43 2d       	mov	r20, r3
     900:	be 01       	movw	r22, r28
     902:	c3 01       	movw	r24, r6
     904:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0xc3>
     90a:	0f 2e       	mov	r0, r31
     90c:	ff eb       	ldi	r31, 0xBF	; 191
     90e:	ef 2e       	mov	r14, r31
     910:	f0 2d       	mov	r31, r0
     912:	e8 0e       	add	r14, r24
     914:	82 01       	movw	r16, r4
     916:	94 01       	movw	r18, r8
     918:	43 2d       	mov	r20, r3
     91a:	be 01       	movw	r22, r28
     91c:	c3 01       	movw	r24, r6
     91e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     922:	f3 94       	inc	r15
     924:	ca 0d       	add	r28, r10
     926:	db 1d       	adc	r29, r11
     928:	f6 01       	movw	r30, r12
     92a:	ef 0d       	add	r30, r15
     92c:	f1 1d       	adc	r31, r1
     92e:	80 81       	ld	r24, Z
     930:	81 11       	cpse	r24, r1
     932:	40 cf       	rjmp	.-384    	; 0x7b4 <_Z12print_stringjjhjjPKc+0x4c>
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	3f 90       	pop	r3
     956:	08 95       	ret

00000958 <_Z11draw_h_linejjjj>:
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	6c 01       	movw	r12, r24
     96a:	eb 01       	movw	r28, r22
     96c:	8a 01       	movw	r16, r20
     96e:	79 01       	movw	r14, r18
     970:	64 17       	cp	r22, r20
     972:	75 07       	cpc	r23, r21
     974:	48 f4       	brcc	.+18     	; 0x988 <_Z11draw_h_linejjjj+0x30>
     976:	a7 01       	movw	r20, r14
     978:	be 01       	movw	r22, r28
     97a:	c6 01       	movw	r24, r12
     97c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     980:	21 96       	adiw	r28, 0x01	; 1
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	b8 f3       	brcs	.-18     	; 0x976 <_Z11draw_h_linejjjj+0x1e>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	08 95       	ret

0000099a <_Z11draw_v_linejjjj>:
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	6c 01       	movw	r12, r24
     9ac:	eb 01       	movw	r28, r22
     9ae:	8a 01       	movw	r16, r20
     9b0:	79 01       	movw	r14, r18
     9b2:	64 17       	cp	r22, r20
     9b4:	75 07       	cpc	r23, r21
     9b6:	48 f4       	brcc	.+18     	; 0x9ca <_Z11draw_v_linejjjj+0x30>
     9b8:	a7 01       	movw	r20, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     9c2:	21 96       	adiw	r28, 0x01	; 1
     9c4:	c0 17       	cp	r28, r16
     9c6:	d1 07       	cpc	r29, r17
     9c8:	b8 f3       	brcs	.-18     	; 0x9b8 <_Z11draw_v_linejjjj+0x1e>
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <_Z13my_draw_crossjjjj>:
     9dc:	5f 92       	push	r5
     9de:	6f 92       	push	r6
     9e0:	7f 92       	push	r7
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	5c 01       	movw	r10, r24
     9fc:	a4 1a       	sub	r10, r20
     9fe:	b5 0a       	sbc	r11, r21
     a00:	6b 01       	movw	r12, r22
     a02:	c4 1a       	sub	r12, r20
     a04:	d5 0a       	sbc	r13, r21
     a06:	7c 01       	movw	r14, r24
     a08:	e4 0e       	add	r14, r20
     a0a:	f5 1e       	adc	r15, r21
     a0c:	8a 01       	movw	r16, r20
     a0e:	00 0f       	add	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	01 15       	cp	r16, r1
     a14:	11 05       	cpc	r17, r1
     a16:	d9 f0       	breq	.+54     	; 0xa4e <_Z13my_draw_crossjjjj+0x72>
     a18:	49 01       	movw	r8, r18
     a1a:	61 2c       	mov	r6, r1
     a1c:	71 2c       	mov	r7, r1
     a1e:	51 2c       	mov	r5, r1
     a20:	e6 01       	movw	r28, r12
     a22:	c6 0d       	add	r28, r6
     a24:	d7 1d       	adc	r29, r7
     a26:	a4 01       	movw	r20, r8
     a28:	be 01       	movw	r22, r28
     a2a:	c5 01       	movw	r24, r10
     a2c:	86 0d       	add	r24, r6
     a2e:	97 1d       	adc	r25, r7
     a30:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     a34:	a4 01       	movw	r20, r8
     a36:	be 01       	movw	r22, r28
     a38:	c7 01       	movw	r24, r14
     a3a:	86 19       	sub	r24, r6
     a3c:	97 09       	sbc	r25, r7
     a3e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     a42:	53 94       	inc	r5
     a44:	65 2c       	mov	r6, r5
     a46:	71 2c       	mov	r7, r1
     a48:	60 16       	cp	r6, r16
     a4a:	71 06       	cpc	r7, r17
     a4c:	48 f3       	brcs	.-46     	; 0xa20 <_Z13my_draw_crossjjjj+0x44>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	9f 90       	pop	r9
     a64:	8f 90       	pop	r8
     a66:	7f 90       	pop	r7
     a68:	6f 90       	pop	r6
     a6a:	5f 90       	pop	r5
     a6c:	08 95       	ret

00000a6e <_Z19adafruit_drawCirclejjjj>:

void adafruit_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) { //unutar adaFruit library, bolji zato jer mu das srediste, i radius, a ovaj draw_cirle ne kuzim kako radi
     a6e:	2f 92       	push	r2
     a70:	3f 92       	push	r3
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <_Z19adafruit_drawCirclejjjj+0x26>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <_Z19adafruit_drawCirclejjjj+0x28>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <_Z19adafruit_drawCirclejjjj+0x2a>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	6c 01       	movw	r12, r24
     a9e:	4b 01       	movw	r8, r22
     aa0:	5a 83       	std	Y+2, r21	; 0x02
     aa2:	49 83       	std	Y+1, r20	; 0x01
     aa4:	3c 83       	std	Y+4, r19	; 0x04
     aa6:	2b 83       	std	Y+3, r18	; 0x03
	int16_t f = 1 - r;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	7c 01       	movw	r14, r24
     aae:	e4 1a       	sub	r14, r20
     ab0:	f5 0a       	sbc	r15, r21
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
     ab2:	1a 01       	movw	r2, r20
     ab4:	31 94       	neg	r3
     ab6:	21 94       	neg	r2
     ab8:	31 08       	sbc	r3, r1
     aba:	22 0c       	add	r2, r2
     abc:	33 1c       	adc	r3, r3
	int16_t x = 0;
	int16_t y = r;
     abe:	8a 01       	movw	r16, r20

	draw_pixel(x0, y0 + r, color);
     ac0:	ba 01       	movw	r22, r20
     ac2:	68 0d       	add	r22, r8
     ac4:	79 1d       	adc	r23, r9
     ac6:	a9 01       	movw	r20, r18
     ac8:	c6 01       	movw	r24, r12
     aca:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0, y0 - r, color);
     ace:	b4 01       	movw	r22, r8
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	3a 81       	ldd	r19, Y+2	; 0x02
     ad4:	62 1b       	sub	r22, r18
     ad6:	73 0b       	sbc	r23, r19
     ad8:	4b 81       	ldd	r20, Y+3	; 0x03
     ada:	5c 81       	ldd	r21, Y+4	; 0x04
     adc:	c6 01       	movw	r24, r12
     ade:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0 + r, y0, color);
     ae2:	4b 81       	ldd	r20, Y+3	; 0x03
     ae4:	5c 81       	ldd	r21, Y+4	; 0x04
     ae6:	b4 01       	movw	r22, r8
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	8c 0d       	add	r24, r12
     aee:	9d 1d       	adc	r25, r13
     af0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0 - r, y0, color);
     af4:	4b 81       	ldd	r20, Y+3	; 0x03
     af6:	5c 81       	ldd	r21, Y+4	; 0x04
     af8:	b4 01       	movw	r22, r8
     afa:	c6 01       	movw	r24, r12
     afc:	29 81       	ldd	r18, Y+1	; 0x01
     afe:	3a 81       	ldd	r19, Y+2	; 0x02
     b00:	82 1b       	sub	r24, r18
     b02:	93 0b       	sbc	r25, r19
     b04:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>

	while (x < y) {
     b08:	10 16       	cp	r1, r16
     b0a:	11 06       	cpc	r1, r17
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <_Z19adafruit_drawCirclejjjj+0xa2>
     b0e:	74 c0       	rjmp	.+232    	; 0xbf8 <_Z19adafruit_drawCirclejjjj+0x18a>
     b10:	1e 82       	std	Y+6, r1	; 0x06
     b12:	1d 82       	std	Y+5, r1	; 0x05
     b14:	66 24       	eor	r6, r6
     b16:	63 94       	inc	r6
     b18:	71 2c       	mov	r7, r1
		if (f >= 0) {
     b1a:	ff 20       	and	r15, r15
     b1c:	3c f0       	brlt	.+14     	; 0xb2c <_Z19adafruit_drawCirclejjjj+0xbe>
			y--;
     b1e:	01 50       	subi	r16, 0x01	; 1
     b20:	11 09       	sbc	r17, r1
			ddF_y += 2;
     b22:	32 e0       	ldi	r19, 0x02	; 2
     b24:	23 0e       	add	r2, r19
     b26:	31 1c       	adc	r3, r1
			f += ddF_y;
     b28:	e2 0c       	add	r14, r2
     b2a:	f3 1c       	adc	r15, r3
		}
		x++;
     b2c:	8d 81       	ldd	r24, Y+5	; 0x05
     b2e:	9e 81       	ldd	r25, Y+6	; 0x06
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
		ddF_x += 2;
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	69 0e       	add	r6, r25
     b3a:	71 1c       	adc	r7, r1
		f += ddF_x;
     b3c:	e6 0c       	add	r14, r6
     b3e:	f7 1c       	adc	r15, r7
     b40:	ad 80       	ldd	r10, Y+5	; 0x05
     b42:	be 80       	ldd	r11, Y+6	; 0x06
     b44:	ac 0c       	add	r10, r12
     b46:	bd 1c       	adc	r11, r13

		draw_pixel(x0 + x, y0 + y, color);
     b48:	4b 81       	ldd	r20, Y+3	; 0x03
     b4a:	5c 81       	ldd	r21, Y+4	; 0x04
     b4c:	94 01       	movw	r18, r8
     b4e:	20 0f       	add	r18, r16
     b50:	31 1f       	adc	r19, r17
     b52:	3a 83       	std	Y+2, r19	; 0x02
     b54:	29 83       	std	Y+1, r18	; 0x01
     b56:	b9 01       	movw	r22, r18
     b58:	c5 01       	movw	r24, r10
     b5a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     b5e:	26 01       	movw	r4, r12
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	48 1a       	sub	r4, r24
     b66:	59 0a       	sbc	r5, r25
		draw_pixel(x0 - x, y0 + y, color);
     b68:	4b 81       	ldd	r20, Y+3	; 0x03
     b6a:	5c 81       	ldd	r21, Y+4	; 0x04
     b6c:	69 81       	ldd	r22, Y+1	; 0x01
     b6e:	7a 81       	ldd	r23, Y+2	; 0x02
     b70:	c2 01       	movw	r24, r4
     b72:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 + x, y0 - y, color);
     b76:	4b 81       	ldd	r20, Y+3	; 0x03
     b78:	5c 81       	ldd	r21, Y+4	; 0x04
     b7a:	94 01       	movw	r18, r8
     b7c:	20 1b       	sub	r18, r16
     b7e:	31 0b       	sbc	r19, r17
     b80:	3a 83       	std	Y+2, r19	; 0x02
     b82:	29 83       	std	Y+1, r18	; 0x01
     b84:	b9 01       	movw	r22, r18
     b86:	c5 01       	movw	r24, r10
     b88:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - x, y0 - y, color);
     b8c:	4b 81       	ldd	r20, Y+3	; 0x03
     b8e:	5c 81       	ldd	r21, Y+4	; 0x04
     b90:	69 81       	ldd	r22, Y+1	; 0x01
     b92:	7a 81       	ldd	r23, Y+2	; 0x02
     b94:	c2 01       	movw	r24, r4
     b96:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     b9a:	ad 80       	ldd	r10, Y+5	; 0x05
     b9c:	be 80       	ldd	r11, Y+6	; 0x06
     b9e:	a8 0c       	add	r10, r8
     ba0:	b9 1c       	adc	r11, r9
		draw_pixel(x0 + y, y0 + x, color);
     ba2:	4b 81       	ldd	r20, Y+3	; 0x03
     ba4:	5c 81       	ldd	r21, Y+4	; 0x04
     ba6:	b5 01       	movw	r22, r10
     ba8:	26 01       	movw	r4, r12
     baa:	40 0e       	add	r4, r16
     bac:	51 1e       	adc	r5, r17
     bae:	c2 01       	movw	r24, r4
     bb0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - y, y0 + x, color);
     bb4:	4b 81       	ldd	r20, Y+3	; 0x03
     bb6:	5c 81       	ldd	r21, Y+4	; 0x04
     bb8:	b5 01       	movw	r22, r10
     bba:	c6 01       	movw	r24, r12
     bbc:	80 1b       	sub	r24, r16
     bbe:	91 0b       	sbc	r25, r17
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     bc8:	54 01       	movw	r10, r8
     bca:	2d 81       	ldd	r18, Y+5	; 0x05
     bcc:	3e 81       	ldd	r19, Y+6	; 0x06
     bce:	a2 1a       	sub	r10, r18
     bd0:	b3 0a       	sbc	r11, r19
		draw_pixel(x0 + y, y0 - x, color);
     bd2:	4b 81       	ldd	r20, Y+3	; 0x03
     bd4:	5c 81       	ldd	r21, Y+4	; 0x04
     bd6:	b5 01       	movw	r22, r10
     bd8:	c2 01       	movw	r24, r4
     bda:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - y, y0 - x, color);
     bde:	4b 81       	ldd	r20, Y+3	; 0x03
     be0:	5c 81       	ldd	r21, Y+4	; 0x04
     be2:	b5 01       	movw	r22, r10
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0, y0 + r, color);
	draw_pixel(x0, y0 - r, color);
	draw_pixel(x0 + r, y0, color);
	draw_pixel(x0 - r, y0, color);

	while (x < y) {
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	80 17       	cp	r24, r16
     bf2:	91 07       	cpc	r25, r17
     bf4:	0c f4       	brge	.+2      	; 0xbf8 <_Z19adafruit_drawCirclejjjj+0x18a>
     bf6:	91 cf       	rjmp	.-222    	; 0xb1a <_Z19adafruit_drawCirclejjjj+0xac>
		draw_pixel(x0 + y, y0 + x, color);
		draw_pixel(x0 - y, y0 + x, color);
		draw_pixel(x0 + y, y0 - x, color);
		draw_pixel(x0 - y, y0 - x, color);
	}
}
     bf8:	26 96       	adiw	r28, 0x06	; 6
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	9f 90       	pop	r9
     c1a:	8f 90       	pop	r8
     c1c:	7f 90       	pop	r7
     c1e:	6f 90       	pop	r6
     c20:	5f 90       	pop	r5
     c22:	4f 90       	pop	r4
     c24:	3f 90       	pop	r3
     c26:	2f 90       	pop	r2
     c28:	08 95       	ret

00000c2a <_Z14draw_rectanglejjjjj>:

// setting a color to the pixels of a rectangle
void draw_rectangle(uint16_t x, uint16_t y, uint16_t dx, uint16_t dy, uint16_t color) {
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	6c 01       	movw	r12, r24
     c40:	5b 01       	movw	r10, r22
     c42:	7a 01       	movw	r14, r20
	draw_h_line(x, y, y + dy, color);
     c44:	eb 01       	movw	r28, r22
     c46:	c2 0f       	add	r28, r18
     c48:	d3 1f       	adc	r29, r19
     c4a:	98 01       	movw	r18, r16
     c4c:	ae 01       	movw	r20, r28
     c4e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(x + dx, y, y + dy, color);
     c52:	ec 0c       	add	r14, r12
     c54:	fd 1c       	adc	r15, r13
     c56:	98 01       	movw	r18, r16
     c58:	ae 01       	movw	r20, r28
     c5a:	b5 01       	movw	r22, r10
     c5c:	c7 01       	movw	r24, r14
     c5e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_v_line(y, x, x + dx, color);
     c62:	98 01       	movw	r18, r16
     c64:	a7 01       	movw	r20, r14
     c66:	b6 01       	movw	r22, r12
     c68:	c5 01       	movw	r24, r10
     c6a:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(y + dy, x, x + dx, color);
     c6e:	98 01       	movw	r18, r16
     c70:	a7 01       	movw	r20, r14
     c72:	b6 01       	movw	r22, r12
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	08 95       	ret

00000c90 <_Z11check_touchjjjjjj>:

// check if the screen is being touched
uint8_t check_touch(uint16_t TP_X, uint16_t TP_Y, uint16_t x, uint16_t y, uint16_t dx, uint16_t dy) {
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	fc 01       	movw	r30, r24
	return TP_Y >= y && TP_Y <= y + dy && TP_X >= x && TP_X <= x + dx;
     c9a:	62 17       	cp	r22, r18
     c9c:	73 07       	cpc	r23, r19
     c9e:	80 f0       	brcs	.+32     	; 0xcc0 <_Z11check_touchjjjjjj+0x30>
     ca0:	e2 0e       	add	r14, r18
     ca2:	f3 1e       	adc	r15, r19
     ca4:	e6 16       	cp	r14, r22
     ca6:	f7 06       	cpc	r15, r23
     ca8:	68 f0       	brcs	.+26     	; 0xcc4 <_Z11check_touchjjjjjj+0x34>
     caa:	84 17       	cp	r24, r20
     cac:	95 07       	cpc	r25, r21
     cae:	60 f0       	brcs	.+24     	; 0xcc8 <_Z11check_touchjjjjjj+0x38>
     cb0:	04 0f       	add	r16, r20
     cb2:	15 1f       	adc	r17, r21
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 17       	cp	r16, r30
     cb8:	1f 07       	cpc	r17, r31
     cba:	38 f4       	brcc	.+14     	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
}
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	08 95       	ret

00000cd4 <_Z14print_keyboardPc>:
uint8_t currentPlayer = CROSS;	
uint8_t gameOver = 0;
uint8_t numberOfMoves = 0;	
	

void print_keyboard(char str[]) {
     cd4:	3f 92       	push	r3
     cd6:	4f 92       	push	r4
     cd8:	5f 92       	push	r5
     cda:	6f 92       	push	r6
     cdc:	7f 92       	push	r7
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <_Z14print_keyboardPc+0x24>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	3c 01       	movw	r6, r24
	//char *str = "ABCDEFGHIJKLMNJOPRSTUVZ";
	//char str[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej
     cfe:	51 2c       	mov	r5, r1
		sprintf(tmp, "%c\0", str[i]);
     d00:	0f 2e       	mov	r0, r31
     d02:	fd e6       	ldi	r31, 0x6D	; 109
     d04:	8f 2e       	mov	r8, r31
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	9f 2e       	mov	r9, r31
     d0a:	f0 2d       	mov	r31, r0
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	5c 01       	movw	r10, r24
		draw_rectangle(KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     d12:	0f 2e       	mov	r0, r31
     d14:	f9 e3       	ldi	r31, 0x39	; 57
     d16:	3f 2e       	mov	r3, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f3 e2       	ldi	r31, 0x23	; 35
     d1e:	4f 2e       	mov	r4, r31
     d20:	f0 2d       	mov	r31, r0
	//char str[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej
		sprintf(tmp, "%c\0", str[i]);
     d22:	f3 01       	movw	r30, r6
     d24:	81 91       	ld	r24, Z+
     d26:	3f 01       	movw	r6, r30
     d28:	1f 92       	push	r1
     d2a:	8f 93       	push	r24
     d2c:	9f 92       	push	r9
     d2e:	8f 92       	push	r8
     d30:	bf 92       	push	r11
     d32:	af 92       	push	r10
     d34:	0e 94 12 11 	call	0x2224	; 0x2224 <sprintf>
		draw_rectangle(KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     d38:	53 9c       	mul	r5, r3
     d3a:	c1 2c       	mov	r12, r1
     d3c:	11 24       	eor	r1, r1
     d3e:	c6 94       	lsr	r12
     d40:	8c 2d       	mov	r24, r12
     d42:	88 0f       	add	r24, r24
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	8c 0d       	add	r24, r12
     d4a:	e5 2c       	mov	r14, r5
     d4c:	e8 1a       	sub	r14, r24
     d4e:	4e 9c       	mul	r4, r14
     d50:	70 01       	movw	r14, r0
     d52:	11 24       	eor	r1, r1
     d54:	4c 9c       	mul	r4, r12
     d56:	60 01       	movw	r12, r0
     d58:	11 24       	eor	r1, r1
     d5a:	b7 01       	movw	r22, r14
     d5c:	66 5f       	subi	r22, 0xF6	; 246
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	0f ef       	ldi	r16, 0xFF	; 255
     d62:	1f ef       	ldi	r17, 0xFF	; 255
     d64:	2e e1       	ldi	r18, 0x1E	; 30
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4e e1       	ldi	r20, 0x1E	; 30
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	c6 01       	movw	r24, r12
     d6e:	8a 5b       	subi	r24, 0xBA	; 186
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(KEY_Y + offset_y + i/9 * (KEY_H + BLANK_SPACE / 2), KEY_X + i%9*(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
     d76:	b7 01       	movw	r22, r14
     d78:	6f 5e       	subi	r22, 0xEF	; 239
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	75 01       	movw	r14, r10
     d7e:	0e ea       	ldi	r16, 0xAE	; 174
     d80:	1a e1       	ldi	r17, 0x1A	; 26
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	c6 01       	movw	r24, r12
     d8a:	87 5b       	subi	r24, 0xB7	; 183
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	//char *str = "ABCDEFGHIJKLMNJOPRSTUVZ";
	//char str[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej
     d92:	53 94       	inc	r5
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	f6 e1       	ldi	r31, 0x16	; 22
     da2:	5f 12       	cpse	r5, r31
     da4:	be cf       	rjmp	.-132    	; 0xd22 <_Z14print_keyboardPc+0x4e>
		sprintf(tmp, "%c\0", str[i]);
		draw_rectangle(KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
		print_string(KEY_Y + offset_y + i/9 * (KEY_H + BLANK_SPACE / 2), KEY_X + i%9*(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
	}
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	3f 90       	pop	r3
     dcc:	08 95       	ret

00000dce <_Z14drawHomeScreenv>:


void drawHomeScreen() {
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (HS_W - strlen("NEW PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(HS_S_Y, HS_S_X, HS_H, HS_W, WHITE);
     dd6:	0f ef       	ldi	r16, 0xFF	; 255
     dd8:	1f ef       	ldi	r17, 0xFF	; 255
     dda:	28 e1       	ldi	r18, 0x18	; 24
     ddc:	31 e0       	ldi	r19, 0x01	; 1
     dde:	4c e3       	ldi	r20, 0x3C	; 60
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	64 e1       	ldi	r22, 0x14	; 20
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	8a e0       	ldi	r24, 0x0A	; 10
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(HS_S_Y + offset_y, HS_S_X + offset_x, 3, WHITE, CYAN, "NEW PLAYER\0");
     dee:	0f 2e       	mov	r0, r31
     df0:	f1 e7       	ldi	r31, 0x71	; 113
     df2:	ef 2e       	mov	r14, r31
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ff 2e       	mov	r15, r31
     df8:	f0 2d       	mov	r31, r0
     dfa:	0e ea       	ldi	r16, 0xAE	; 174
     dfc:	1a e1       	ldi	r17, 0x1A	; 26
     dfe:	2f ef       	ldi	r18, 0xFF	; 255
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	43 e0       	ldi	r20, 0x03	; 3
     e04:	65 e5       	ldi	r22, 0x55	; 85
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	8c e1       	ldi	r24, 0x1C	; 28
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("CHOOSE PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(CP_Y, CP_X, CP_H, CP_W, WHITE);
     e10:	0f ef       	ldi	r16, 0xFF	; 255
     e12:	1f ef       	ldi	r17, 0xFF	; 255
     e14:	28 e1       	ldi	r18, 0x18	; 24
     e16:	31 e0       	ldi	r19, 0x01	; 1
     e18:	4c e3       	ldi	r20, 0x3C	; 60
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	64 e1       	ldi	r22, 0x14	; 20
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 e5       	ldi	r24, 0x50	; 80
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(CP_Y + offset_y, CP_X + offset_x, 3, WHITE, CYAN, "CHOOSE PLAYER\0");
     e28:	0f 2e       	mov	r0, r31
     e2a:	fd e7       	ldi	r31, 0x7D	; 125
     e2c:	ef 2e       	mov	r14, r31
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ff 2e       	mov	r15, r31
     e32:	f0 2d       	mov	r31, r0
     e34:	0e ea       	ldi	r16, 0xAE	; 174
     e36:	1a e1       	ldi	r17, 0x1A	; 26
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	3f ef       	ldi	r19, 0xFF	; 255
     e3c:	43 e0       	ldi	r20, 0x03	; 3
     e3e:	6e e3       	ldi	r22, 0x3E	; 62
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	82 e6       	ldi	r24, 0x62	; 98
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("LEADERBOARDS") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(LB_Y, LB_X, LB_H, LB_W, WHITE);
     e4a:	0f ef       	ldi	r16, 0xFF	; 255
     e4c:	1f ef       	ldi	r17, 0xFF	; 255
     e4e:	28 e1       	ldi	r18, 0x18	; 24
     e50:	31 e0       	ldi	r19, 0x01	; 1
     e52:	4c e3       	ldi	r20, 0x3C	; 60
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	64 e1       	ldi	r22, 0x14	; 20
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	86 e9       	ldi	r24, 0x96	; 150
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(LB_Y + offset_y, LB_X + offset_x, 3, WHITE, CYAN, "LEADERBOARDS\0");
     e62:	0f 2e       	mov	r0, r31
     e64:	fc e8       	ldi	r31, 0x8C	; 140
     e66:	ef 2e       	mov	r14, r31
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	ff 2e       	mov	r15, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	0e ea       	ldi	r16, 0xAE	; 174
     e70:	1a e1       	ldi	r17, 0x1A	; 26
     e72:	2f ef       	ldi	r18, 0xFF	; 255
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	43 e0       	ldi	r20, 0x03	; 3
     e78:	66 e4       	ldi	r22, 0x46	; 70
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	88 ea       	ldi	r24, 0xA8	; 168
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	08 95       	ret

00000e8e <_Z14drawBackButtonv>:

void drawBackButton() {
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (BCK_BTN_W - strlen("BACK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (BCK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W, WHITE);
     e96:	0f ef       	ldi	r16, 0xFF	; 255
     e98:	1f ef       	ldi	r17, 0xFF	; 255
     e9a:	20 e5       	ldi	r18, 0x50	; 80
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	48 e2       	ldi	r20, 0x28	; 40
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	6a e0       	ldi	r22, 0x0A	; 10
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	8a e0       	ldi	r24, 0x0A	; 10
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(BCK_BTN_Y + offset_y, BCK_BTN_X + offset_x, 3, WHITE, CYAN, "BACK\0");
     eae:	0f 2e       	mov	r0, r31
     eb0:	fa e9       	ldi	r31, 0x9A	; 154
     eb2:	ef 2e       	mov	r14, r31
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ff 2e       	mov	r15, r31
     eb8:	f0 2d       	mov	r31, r0
     eba:	0e ea       	ldi	r16, 0xAE	; 174
     ebc:	1a e1       	ldi	r17, 0x1A	; 26
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	43 e0       	ldi	r20, 0x03	; 3
     ec4:	64 e1       	ldi	r22, 0x14	; 20
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	82 e1       	ldi	r24, 0x12	; 18
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	08 95       	ret

00000eda <_Z6clrScrv>:

void clrScr() {
	set_background_color(CYAN);
     eda:	8e ea       	ldi	r24, 0xAE	; 174
     edc:	9a e1       	ldi	r25, 0x1A	; 26
     ede:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
     ee2:	08 95       	ret

00000ee4 <_Z18resetNewPlayerNamev>:
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	a6 e6       	ldi	r26, 0x66	; 102
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
		newPlayerName[i] = ' ';
     eea:	90 e2       	ldi	r25, 0x20	; 32
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     eec:	fd 01       	movw	r30, r26
     eee:	01 90       	ld	r0, Z+
     ef0:	00 20       	and	r0, r0
     ef2:	e9 f7       	brne	.-6      	; 0xeee <_Z18resetNewPlayerNamev+0xa>
     ef4:	31 97       	sbiw	r30, 0x01	; 1
     ef6:	e6 56       	subi	r30, 0x66	; 102
     ef8:	f0 40       	sbci	r31, 0x00	; 0
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	2e 17       	cp	r18, r30
     f00:	3f 07       	cpc	r19, r31
     f02:	30 f4       	brcc	.+12     	; 0xf10 <_Z18resetNewPlayerNamev+0x2c>
		newPlayerName[i] = ' ';
     f04:	f9 01       	movw	r30, r18
     f06:	ea 59       	subi	r30, 0x9A	; 154
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	90 83       	st	Z, r25
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	ee cf       	rjmp	.-36     	; 0xeec <_Z18resetNewPlayerNamev+0x8>
		newPlayerName[i] = ' ';
	}
	newPlayerNameIndex = 0;
     f10:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <newPlayerNameIndex>
     f14:	08 95       	ret

00000f16 <_Z18resetPlayersColorsP6Player>:
}

void resetPlayersColors(Player *players) { //andClicks,, mozda bolje nazvat funkciju
	for(uint8_t i = 0; i < players_size; i++) {
     f16:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <players_size>
     f1a:	22 23       	and	r18, r18
     f1c:	61 f0       	breq	.+24     	; 0xf36 <_Z18resetPlayersColorsP6Player+0x20>
     f1e:	e8 2f       	mov	r30, r24
     f20:	f9 2f       	mov	r31, r25
     f22:	80 e0       	ldi	r24, 0x00	; 0
		players[i].color = WHITE;
     f24:	4f ef       	ldi	r20, 0xFF	; 255
     f26:	5f ef       	ldi	r21, 0xFF	; 255
     f28:	52 83       	std	Z+2, r21	; 0x02
     f2a:	41 83       	std	Z+1, r20	; 0x01
		players[i].clicked = 0;
     f2c:	13 82       	std	Z+3, r1	; 0x03
	}
	newPlayerNameIndex = 0;
}

void resetPlayersColors(Player *players) { //andClicks,, mozda bolje nazvat funkciju
	for(uint8_t i = 0; i < players_size; i++) {
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	3b 96       	adiw	r30, 0x0b	; 11
     f32:	82 13       	cpse	r24, r18
     f34:	f9 cf       	rjmp	.-14     	; 0xf28 <_Z18resetPlayersColorsP6Player+0x12>
		players[i].color = WHITE;
		players[i].clicked = 0;
	}
	cross_chosen = NONE;
     f36:	85 e0       	ldi	r24, 0x05	; 5
     f38:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cross_chosen>
	nought_chosen = NONE;
     f3c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <nought_chosen>
     f40:	08 95       	ret

00000f42 <_Z9resetGamev>:
}
void resetGame() {
	memset(board, 0, sizeof(board));
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	ee eb       	ldi	r30, 0xBE	; 190
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	df 01       	movw	r26, r30
     f4a:	1d 92       	st	X+, r1
     f4c:	8a 95       	dec	r24
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <_Z9resetGamev+0x8>
	currentPlayer = CROSS; //reset player
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	gameOver = 0;
     f56:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <gameOver>
	numberOfMoves = 0;
     f5a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
     f5e:	08 95       	ret

00000f60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>:
	//game_rerender = 1;
}
void checkBackButtonPressed(uint16_t *TP_X, uint16_t *TP_Y, uint8_t *currentPage, Player *players, uint8_t *game_rerender) {
     f60:	8f 92       	push	r8
     f62:	9f 92       	push	r9
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	if(get_bit(PINB, T_IRQ) == 0) {
     f78:	b0 99       	sbic	0x16, 0	; 22
     f7a:	32 c0       	rjmp	.+100    	; 0xfe0 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x80>
     f7c:	58 01       	movw	r10, r16
     f7e:	49 01       	movw	r8, r18
     f80:	6a 01       	movw	r12, r20
     f82:	8b 01       	movw	r16, r22
     f84:	ec 01       	movw	r28, r24
		read_touch_coords(TP_X, TP_Y);
     f86:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
		if(check_touch(*TP_X, *TP_Y, BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W)) { //BACK button, ovo bolje napravit preko define-a --jesam
     f8a:	f8 01       	movw	r30, r16
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	0f 2e       	mov	r0, r31
     f92:	f0 e5       	ldi	r31, 0x50	; 80
     f94:	ef 2e       	mov	r14, r31
     f96:	f1 2c       	mov	r15, r1
     f98:	f0 2d       	mov	r31, r0
     f9a:	08 e2       	ldi	r16, 0x28	; 40
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	2a e0       	ldi	r18, 0x0A	; 10
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	4a e0       	ldi	r20, 0x0A	; 10
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	88 81       	ld	r24, Y
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
     faa:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
     fae:	88 23       	and	r24, r24
     fb0:	b9 f0       	breq	.+46     	; 0xfe0 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x80>
			//clrScr();
			//_delay_ms(10);
			if(*currentPage == NEW_PLAYER) { //ako je bio u NEW PLAYER da cleara
     fb2:	f6 01       	movw	r30, r12
     fb4:	80 81       	ld	r24, Z
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	19 f4       	brne	.+6      	; 0xfc0 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x60>
				resetNewPlayerName();
     fba:	0e 94 72 07 	call	0xee4	; 0xee4 <_Z18resetNewPlayerNamev>
     fbe:	0e c0       	rjmp	.+28     	; 0xfdc <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x7c>
			}else if(*currentPage == CHOOSE_PLAYER || *currentPage == GAME) { //ako je bio u CHOOSE PLAYER ili u GAME
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x68>
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	51 f4       	brne	.+20     	; 0xfdc <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x7c>
				resetPlayersColors(players);
     fc8:	c4 01       	movw	r24, r8
     fca:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z18resetPlayersColorsP6Player>
				resetGame();
     fce:	0e 94 a1 07 	call	0xf42	; 0xf42 <_Z9resetGamev>
				cp_rerender = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cp_rerender>
				*game_rerender = 1;
     fd8:	f5 01       	movw	r30, r10
     fda:	80 83       	st	Z, r24
			}
			//*game_rerender = 1;
			*currentPage = HOMESCREEN;
     fdc:	f6 01       	movw	r30, r12
     fde:	10 82       	st	Z, r1
			//clrScr();
		}
	}
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	08 95       	ret

00000ffa <_Z12sortByPointsP6Player>:
void sortByPoints(Player *players) {
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	2b 97       	sbiw	r28, 0x0b	; 11
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
	for(uint8_t i = 0; i < players_size - 1; i++) {
    1016:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <players_size>
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	21 50       	subi	r18, 0x01	; 1
    101e:	31 09       	sbc	r19, r1
    1020:	12 16       	cp	r1, r18
    1022:	13 06       	cpc	r1, r19
    1024:	0c f0       	brlt	.+2      	; 0x1028 <_Z12sortByPointsP6Player+0x2e>
    1026:	55 c0       	rjmp	.+170    	; 0x10d2 <_Z12sortByPointsP6Player+0xd8>
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	f1 2c       	mov	r15, r1
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
			if(players[j].points < players[j+1].points) {
    102e:	7b e0       	ldi	r23, 0x0B	; 11
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
    1030:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <players_size>
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	24 1b       	sub	r18, r20
    1038:	35 0b       	sbc	r19, r21
    103a:	21 50       	subi	r18, 0x01	; 1
    103c:	31 09       	sbc	r19, r1
    103e:	12 16       	cp	r1, r18
    1040:	13 06       	cpc	r1, r19
    1042:	dc f5       	brge	.+118    	; 0x10ba <_Z12sortByPointsP6Player+0xc0>
    1044:	60 e0       	ldi	r22, 0x00	; 0
			if(players[j].points < players[j+1].points) {
    1046:	76 9f       	mul	r23, r22
    1048:	90 01       	movw	r18, r0
    104a:	11 24       	eor	r1, r1
    104c:	8c 01       	movw	r16, r24
    104e:	02 0f       	add	r16, r18
    1050:	13 1f       	adc	r17, r19
    1052:	25 5f       	subi	r18, 0xF5	; 245
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	28 0f       	add	r18, r24
    1058:	39 1f       	adc	r19, r25
    105a:	d8 01       	movw	r26, r16
    105c:	fc 91       	ld	r31, X
    105e:	d9 01       	movw	r26, r18
    1060:	ec 91       	ld	r30, X
    1062:	fe 17       	cp	r31, r30
    1064:	e8 f4       	brcc	.+58     	; 0x10a0 <_Z12sortByPointsP6Player+0xa6>
				Player tmp = players[j];
    1066:	0f 2e       	mov	r0, r31
    1068:	fb e0       	ldi	r31, 0x0B	; 11
    106a:	ef 2e       	mov	r14, r31
    106c:	f0 2d       	mov	r31, r0
    106e:	f8 01       	movw	r30, r16
    1070:	de 01       	movw	r26, r28
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	01 90       	ld	r0, Z+
    1076:	0d 92       	st	X+, r0
    1078:	ea 94       	dec	r14
    107a:	e1 f7       	brne	.-8      	; 0x1074 <_Z12sortByPointsP6Player+0x7a>
				players[j] = players[j+1];
    107c:	0f 2e       	mov	r0, r31
    107e:	fb e0       	ldi	r31, 0x0B	; 11
    1080:	ef 2e       	mov	r14, r31
    1082:	f0 2d       	mov	r31, r0
    1084:	f9 01       	movw	r30, r18
    1086:	d8 01       	movw	r26, r16
    1088:	01 90       	ld	r0, Z+
    108a:	0d 92       	st	X+, r0
    108c:	ea 94       	dec	r14
    108e:	e1 f7       	brne	.-8      	; 0x1088 <_Z12sortByPointsP6Player+0x8e>
				players[j+1] = tmp;
    1090:	1b e0       	ldi	r17, 0x0B	; 11
    1092:	fe 01       	movw	r30, r28
    1094:	31 96       	adiw	r30, 0x01	; 1
    1096:	d9 01       	movw	r26, r18
    1098:	01 90       	ld	r0, Z+
    109a:	0d 92       	st	X+, r0
    109c:	1a 95       	dec	r17
    109e:	e1 f7       	brne	.-8      	; 0x1098 <_Z12sortByPointsP6Player+0x9e>
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	e6 2f       	mov	r30, r22
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <players_size>
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	24 1b       	sub	r18, r20
    10ae:	35 0b       	sbc	r19, r21
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	31 09       	sbc	r19, r1
    10b4:	e2 17       	cp	r30, r18
    10b6:	f3 07       	cpc	r31, r19
    10b8:	34 f2       	brlt	.-116    	; 0x1046 <_Z12sortByPointsP6Player+0x4c>
			//clrScr();
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
    10ba:	f3 94       	inc	r15
    10bc:	4f 2d       	mov	r20, r15
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <players_size>
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	31 09       	sbc	r19, r1
    10ca:	42 17       	cp	r20, r18
    10cc:	53 07       	cpc	r21, r19
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <_Z12sortByPointsP6Player+0xd8>
    10d0:	af cf       	rjmp	.-162    	; 0x1030 <_Z12sortByPointsP6Player+0x36>
				players[j] = players[j+1];
				players[j+1] = tmp;
			}
		}
	}
}
    10d2:	2b 96       	adiw	r28, 0x0b	; 11
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	08 95       	ret

000010ec <_Z17printLeaderboardsP6Playerh>:

void printLeaderboards(Player *players, uint8_t players_size) {
    10ec:	4f 92       	push	r4
    10ee:	5f 92       	push	r5
    10f0:	6f 92       	push	r6
    10f2:	7f 92       	push	r7
    10f4:	8f 92       	push	r8
    10f6:	9f 92       	push	r9
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	00 d0       	rcall	.+0      	; 0x110e <_Z17printLeaderboardsP6Playerh+0x22>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <_Z17printLeaderboardsP6Playerh+0x24>
    1110:	1f 92       	push	r1
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	a8 2e       	mov	r10, r24
    1118:	b9 2e       	mov	r11, r25
    111a:	46 2e       	mov	r4, r22
	sortByPoints(players);
    111c:	0e 94 fd 07 	call	0xffa	; 0xffa <_Z12sortByPointsP6Player>
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
    1120:	0f 2e       	mov	r0, r31
    1122:	f0 ea       	ldi	r31, 0xA0	; 160
    1124:	ef 2e       	mov	r14, r31
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	ff 2e       	mov	r15, r31
    112a:	f0 2d       	mov	r31, r0
    112c:	0e ea       	ldi	r16, 0xAE	; 174
    112e:	1a e1       	ldi	r17, 0x1A	; 26
    1130:	2f ef       	ldi	r18, 0xFF	; 255
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	43 e0       	ldi	r20, 0x03	; 3
    1136:	64 e6       	ldi	r22, 0x64	; 100
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	89 e1       	ldi	r24, 0x19	; 25
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
    1142:	0f 2e       	mov	r0, r31
    1144:	f6 ea       	ldi	r31, 0xA6	; 166
    1146:	ef 2e       	mov	r14, r31
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	ff 2e       	mov	r15, r31
    114c:	f0 2d       	mov	r31, r0
    114e:	2f ef       	ldi	r18, 0xFF	; 255
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	43 e0       	ldi	r20, 0x03	; 3
    1154:	68 ec       	ldi	r22, 0xC8	; 200
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	89 e1       	ldi	r24, 0x19	; 25
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	char tmp[5];
	//tmp[4] = '\0';
	for(uint8_t i = 0; i < players_size; i++) {
    1160:	44 20       	and	r4, r4
    1162:	09 f4       	brne	.+2      	; 0x1166 <_Z17printLeaderboardsP6Playerh+0x7a>
    1164:	41 c0       	rjmp	.+130    	; 0x11e8 <_Z17printLeaderboardsP6Playerh+0xfc>
    1166:	ca 2c       	mov	r12, r10
    1168:	db 2c       	mov	r13, r11
    116a:	0f 2e       	mov	r0, r31
    116c:	f0 e5       	ldi	r31, 0x50	; 80
    116e:	af 2e       	mov	r10, r31
    1170:	b1 2c       	mov	r11, r1
    1172:	f0 2d       	mov	r31, r0
    1174:	51 2c       	mov	r5, r1
		sprintf(tmp, "%d\0", players[i].points);
    1176:	0f 2e       	mov	r0, r31
    1178:	fe ea       	ldi	r31, 0xAE	; 174
    117a:	6f 2e       	mov	r6, r31
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	7f 2e       	mov	r7, r31
    1180:	f0 2d       	mov	r31, r0
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	4c 01       	movw	r8, r24
    1188:	f6 01       	movw	r30, r12
    118a:	80 81       	ld	r24, Z
    118c:	1f 92       	push	r1
    118e:	8f 93       	push	r24
    1190:	7f 92       	push	r7
    1192:	6f 92       	push	r6
    1194:	9f 92       	push	r9
    1196:	8f 92       	push	r8
    1198:	0e 94 12 11 	call	0x2224	; 0x2224 <sprintf>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
    119c:	76 01       	movw	r14, r12
    119e:	f4 e0       	ldi	r31, 0x04	; 4
    11a0:	ef 0e       	add	r14, r31
    11a2:	f1 1c       	adc	r15, r1
    11a4:	0e ea       	ldi	r16, 0xAE	; 174
    11a6:	1a e1       	ldi	r17, 0x1A	; 26
    11a8:	2f ef       	ldi	r18, 0xFF	; 255
    11aa:	3f ef       	ldi	r19, 0xFF	; 255
    11ac:	43 e0       	ldi	r20, 0x03	; 3
    11ae:	64 e6       	ldi	r22, 0x64	; 100
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	c5 01       	movw	r24, r10
    11b4:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
    11b8:	74 01       	movw	r14, r8
    11ba:	2f ef       	ldi	r18, 0xFF	; 255
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	43 e0       	ldi	r20, 0x03	; 3
    11c0:	6a ef       	ldi	r22, 0xFA	; 250
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	c5 01       	movw	r24, r10
    11c6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	sortByPoints(players);
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
	char tmp[5];
	//tmp[4] = '\0';
	for(uint8_t i = 0; i < players_size; i++) {
    11ca:	53 94       	inc	r5
    11cc:	8b e0       	ldi	r24, 0x0B	; 11
    11ce:	c8 0e       	add	r12, r24
    11d0:	d1 1c       	adc	r13, r1
    11d2:	98 e2       	ldi	r25, 0x28	; 40
    11d4:	a9 0e       	add	r10, r25
    11d6:	b1 1c       	adc	r11, r1
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	45 10       	cpse	r4, r5
    11e6:	d0 cf       	rjmp	.-96     	; 0x1188 <_Z17printLeaderboardsP6Playerh+0x9c>
		sprintf(tmp, "%d\0", players[i].points);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
	}
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	bf 90       	pop	r11
    1204:	af 90       	pop	r10
    1206:	9f 90       	pop	r9
    1208:	8f 90       	pop	r8
    120a:	7f 90       	pop	r7
    120c:	6f 90       	pop	r6
    120e:	5f 90       	pop	r5
    1210:	4f 90       	pop	r4
    1212:	08 95       	ret

00001214 <_Z11showPlayersP6Playerh>:

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
    1214:	2f 92       	push	r2
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	6f 92       	push	r6
    121e:	7f 92       	push	r7
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    1238:	66 23       	and	r22, r22
    123a:	09 f4       	brne	.+2      	; 0x123e <_Z11showPlayersP6Playerh+0x2a>
    123c:	5a c0       	rjmp	.+180    	; 0x12f2 <_Z11showPlayersP6Playerh+0xde>
    123e:	26 2e       	mov	r2, r22
    1240:	c8 2e       	mov	r12, r24
    1242:	d9 2e       	mov	r13, r25
    1244:	51 2c       	mov	r5, r1
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    1246:	80 e0       	ldi	r24, 0x00	; 0
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    1248:	0f 2e       	mov	r0, r31
    124a:	f2 e8       	ldi	r31, 0x82	; 130
    124c:	4f 2e       	mov	r4, r31
    124e:	f0 2d       	mov	r31, r0
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    1250:	0f 2e       	mov	r0, r31
    1252:	ff e0       	ldi	r31, 0x0F	; 15
    1254:	3f 2e       	mov	r3, r31
    1256:	f0 2d       	mov	r31, r0
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <_Z11showPlayersP6Playerh+0x52>
}

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	85 15       	cp	r24, r5
    125e:	10 f0       	brcs	.+4      	; 0x1264 <_Z11showPlayersP6Playerh+0x50>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <_Z11showPlayersP6Playerh+0x52>
    1264:	82 e3       	ldi	r24, 0x32	; 50
    1266:	76 01       	movw	r14, r12
    1268:	94 e0       	ldi	r25, 0x04	; 4
    126a:	e9 0e       	add	r14, r25
    126c:	f1 1c       	adc	r15, r1
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
    126e:	e7 01       	movw	r28, r14
    1270:	09 90       	ld	r0, Y+
    1272:	00 20       	and	r0, r0
    1274:	e9 f7       	brne	.-6      	; 0x1270 <_Z11showPlayersP6Playerh+0x5c>
    1276:	21 97       	sbiw	r28, 0x01	; 1
    1278:	ce 19       	sub	r28, r14
    127a:	df 09       	sbc	r29, r15
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    127c:	50 fa       	bst	r5, 0
    127e:	66 24       	eor	r6, r6
    1280:	60 f8       	bld	r6, 0
    1282:	71 2c       	mov	r7, r1
    1284:	46 9c       	mul	r4, r6
    1286:	40 01       	movw	r8, r0
    1288:	47 9c       	mul	r4, r7
    128a:	90 0c       	add	r9, r0
    128c:	11 24       	eor	r1, r1
    128e:	a8 2e       	mov	r10, r24
    1290:	b1 2c       	mov	r11, r1
    1292:	f6 01       	movw	r30, r12
    1294:	01 81       	ldd	r16, Z+1	; 0x01
    1296:	12 81       	ldd	r17, Z+2	; 0x02
    1298:	b4 01       	movw	r22, r8
    129a:	6c 5e       	subi	r22, 0xEC	; 236
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	28 e7       	ldi	r18, 0x78	; 120
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	48 e2       	ldi	r20, 0x28	; 40
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	c5 01       	movw	r24, r10
    12a8:	8a 5b       	subi	r24, 0xBA	; 186
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    12b0:	f6 01       	movw	r30, r12
    12b2:	21 81       	ldd	r18, Z+1	; 0x01
    12b4:	32 81       	ldd	r19, Z+2	; 0x02
    12b6:	3c 9e       	mul	r3, r28
    12b8:	c0 01       	movw	r24, r0
    12ba:	3d 9e       	mul	r3, r29
    12bc:	90 0d       	add	r25, r0
    12be:	11 24       	eor	r1, r1
    12c0:	68 e7       	ldi	r22, 0x78	; 120
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	68 1b       	sub	r22, r24
    12c6:	79 0b       	sbc	r23, r25
    12c8:	76 95       	lsr	r23
    12ca:	67 95       	ror	r22
    12cc:	77 27       	eor	r23, r23
    12ce:	6c 5e       	subi	r22, 0xEC	; 236
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	68 0d       	add	r22, r8
    12d4:	79 1d       	adc	r23, r9
    12d6:	0e ea       	ldi	r16, 0xAE	; 174
    12d8:	1a e1       	ldi	r17, 0x1A	; 26
    12da:	43 e0       	ldi	r20, 0x03	; 3
    12dc:	c5 01       	movw	r24, r10
    12de:	82 5b       	subi	r24, 0xB2	; 178
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    12e6:	53 94       	inc	r5
    12e8:	fb e0       	ldi	r31, 0x0B	; 11
    12ea:	cf 0e       	add	r12, r31
    12ec:	d1 1c       	adc	r13, r1
    12ee:	25 10       	cpse	r2, r5
    12f0:	b4 cf       	rjmp	.-152    	; 0x125a <_Z11showPlayersP6Playerh+0x46>
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
	}
}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
    130a:	7f 90       	pop	r7
    130c:	6f 90       	pop	r6
    130e:	5f 90       	pop	r5
    1310:	4f 90       	pop	r4
    1312:	3f 90       	pop	r3
    1314:	2f 90       	pop	r2
    1316:	08 95       	ret

00001318 <_Z12drawOKButtonv>:

void drawOKButton() {
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (OK_BTN_W - strlen("OK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (OK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W, WHITE);
    1320:	0f ef       	ldi	r16, 0xFF	; 255
    1322:	1f ef       	ldi	r17, 0xFF	; 255
    1324:	2c e3       	ldi	r18, 0x3C	; 60
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	48 e2       	ldi	r20, 0x28	; 40
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	6a ef       	ldi	r22, 0xFA	; 250
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	8e eb       	ldi	r24, 0xBE	; 190
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(OK_BTN_Y + offset_y, OK_BTN_X + offset_x, 3, WHITE, CYAN, "OK\0");
    1338:	0f 2e       	mov	r0, r31
    133a:	f2 eb       	ldi	r31, 0xB2	; 178
    133c:	ef 2e       	mov	r14, r31
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ff 2e       	mov	r15, r31
    1342:	f0 2d       	mov	r31, r0
    1344:	0e ea       	ldi	r16, 0xAE	; 174
    1346:	1a e1       	ldi	r17, 0x1A	; 26
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	43 e0       	ldi	r20, 0x03	; 3
    134e:	69 e0       	ldi	r22, 0x09	; 9
    1350:	71 e0       	ldi	r23, 0x01	; 1
    1352:	86 ec       	ldi	r24, 0xC6	; 198
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	08 95       	ret

00001364 <_Z16drawDeleteButtonv>:

void drawDeleteButton() {
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (DEL_BTN_W - strlen("DEL") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (DEL_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W, WHITE);
    136c:	0f ef       	ldi	r16, 0xFF	; 255
    136e:	1f ef       	ldi	r17, 0xFF	; 255
    1370:	2c e3       	ldi	r18, 0x3C	; 60
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	48 e2       	ldi	r20, 0x28	; 40
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	64 eb       	ldi	r22, 0xB4	; 180
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	8e eb       	ldi	r24, 0xBE	; 190
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(DEL_BTN_Y + offset_y, DEL_BTN_X + offset_x, 3, WHITE, CYAN, "DEL\0");
    1384:	0f 2e       	mov	r0, r31
    1386:	f6 eb       	ldi	r31, 0xB6	; 182
    1388:	ef 2e       	mov	r14, r31
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	ff 2e       	mov	r15, r31
    138e:	f0 2d       	mov	r31, r0
    1390:	0e ea       	ldi	r16, 0xAE	; 174
    1392:	1a e1       	ldi	r17, 0x1A	; 26
    1394:	2f ef       	ldi	r18, 0xFF	; 255
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	43 e0       	ldi	r20, 0x03	; 3
    139a:	6b eb       	ldi	r22, 0xBB	; 187
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	86 ec       	ldi	r24, 0xC6	; 198
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	08 95       	ret

000013b0 <_Z15drawStartButtonv>:

void drawStartButton() {
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
	uint8_t offset_x = (START_BTN_W - strlen("START") * CHAR_W * FONT_SIZE) / 2;
	uint8_t offset_y = (START_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W, WHITE);
    13b8:	0f ef       	ldi	r16, 0xFF	; 255
    13ba:	1f ef       	ldi	r17, 0xFF	; 255
    13bc:	2a e5       	ldi	r18, 0x5A	; 90
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	48 e2       	ldi	r20, 0x28	; 40
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	6c ed       	ldi	r22, 0xDC	; 220
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	8e eb       	ldi	r24, 0xBE	; 190
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(START_BTN_Y + offset_y, START_BTN_X + offset_x , 3, WHITE, CYAN, "START\0");
    13d0:	0f 2e       	mov	r0, r31
    13d2:	fb eb       	ldi	r31, 0xBB	; 187
    13d4:	ef 2e       	mov	r14, r31
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	ff 2e       	mov	r15, r31
    13da:	f0 2d       	mov	r31, r0
    13dc:	0e ea       	ldi	r16, 0xAE	; 174
    13de:	1a e1       	ldi	r17, 0x1A	; 26
    13e0:	2f ef       	ldi	r18, 0xFF	; 255
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	43 e0       	ldi	r20, 0x03	; 3
    13e6:	63 ee       	ldi	r22, 0xE3	; 227
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	86 ec       	ldi	r24, 0xC6	; 198
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	08 95       	ret

000013fc <_Z9drawNamesP6Player>:

void drawNames(Player *players) {
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	62 97       	sbiw	r28, 0x12	; 18
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
	char tmp[7+1+2+1+7]; //max first name, space, vs, space, max 2nd name //mozda 6 umjesto 7 al dobro
	sprintf(tmp, "%s VS %s", players[cross_chosen].name, players[nought_chosen].name);
    1418:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <nought_chosen>
    141c:	4b e0       	ldi	r20, 0x0B	; 11
    141e:	bc 01       	movw	r22, r24
    1420:	42 9f       	mul	r20, r18
    1422:	60 0d       	add	r22, r0
    1424:	71 1d       	adc	r23, r1
    1426:	11 24       	eor	r1, r1
    1428:	9b 01       	movw	r18, r22
    142a:	2c 5f       	subi	r18, 0xFC	; 252
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	3f 93       	push	r19
    1430:	2f 93       	push	r18
    1432:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <cross_chosen>
    1436:	42 9f       	mul	r20, r18
    1438:	80 0d       	add	r24, r0
    143a:	91 1d       	adc	r25, r1
    143c:	11 24       	eor	r1, r1
    143e:	04 96       	adiw	r24, 0x04	; 4
    1440:	9f 93       	push	r25
    1442:	8f 93       	push	r24
    1444:	85 ef       	ldi	r24, 0xF5	; 245
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9f 93       	push	r25
    144a:	8f 93       	push	r24
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	7c 01       	movw	r14, r24
    1452:	9f 93       	push	r25
    1454:	8f 93       	push	r24
    1456:	0e 94 12 11 	call	0x2224	; 0x2224 <sprintf>
	uint8_t offset_x = (MAX_Y - BLANK_SPACE - (BCK_BTN_X + BCK_BTN_W) - strlen(tmp) * CHAR_W * 2) / 2; //2 je FONT_SIZE, 220 -> sirina od kraja BCK_BTN do 310
    145a:	f7 01       	movw	r30, r14
    145c:	01 90       	ld	r0, Z+
    145e:	00 20       	and	r0, r0
    1460:	e9 f7       	brne	.-6      	; 0x145c <_Z9drawNamesP6Player+0x60>
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	ee 19       	sub	r30, r14
    1466:	ff 09       	sbc	r31, r15
	print_string(BLANK_SPACE, (BCK_BTN_X + BCK_BTN_W) + offset_x, 2, WHITE, CYAN, tmp); //90 je kraj od bck btn,, mozda da je ime svako u svojoj boji ili kako oces
    1468:	cf 01       	movw	r24, r30
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	e8 0f       	add	r30, r24
    147c:	f9 1f       	adc	r31, r25
    147e:	6c ed       	ldi	r22, 0xDC	; 220
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	6e 1b       	sub	r22, r30
    1484:	7f 0b       	sbc	r23, r31
    1486:	76 95       	lsr	r23
    1488:	67 95       	ror	r22
    148a:	77 27       	eor	r23, r23
    148c:	66 5a       	subi	r22, 0xA6	; 166
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	0e ea       	ldi	r16, 0xAE	; 174
    1492:	1a e1       	ldi	r17, 0x1A	; 26
    1494:	2f ef       	ldi	r18, 0xFF	; 255
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	42 e0       	ldi	r20, 0x02	; 2
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	62 96       	adiw	r28, 0x12	; 18
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	08 95       	ret

000014c6 <_Z8drawGridv>:

void drawGrid() {
	//draw_rectangle(10+40-5, 110, 185, 185, WHITE);
	
	draw_v_line(GRID_STARTING_X + GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE); //62~185/3
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	46 ee       	ldi	r20, 0xE6	; 230
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	6d e2       	ldi	r22, 0x2D	; 45
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	8c ea       	ldi	r24, 0xAC	; 172
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(GRID_STARTING_X + 2*GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE);
    14da:	2f ef       	ldi	r18, 0xFF	; 255
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	46 ee       	ldi	r20, 0xE6	; 230
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	6d e2       	ldi	r22, 0x2D	; 45
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	8a ee       	ldi	r24, 0xEA	; 234
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	
	draw_h_line(GRID_STARTING_Y + GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    14ee:	2f ef       	ldi	r18, 0xFF	; 255
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	47 e2       	ldi	r20, 0x27	; 39
    14f4:	51 e0       	ldi	r21, 0x01	; 1
    14f6:	6e e6       	ldi	r22, 0x6E	; 110
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	8b e6       	ldi	r24, 0x6B	; 107
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(GRID_STARTING_Y + 2*GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    1502:	2f ef       	ldi	r18, 0xFF	; 255
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	47 e2       	ldi	r20, 0x27	; 39
    1508:	51 e0       	ldi	r21, 0x01	; 1
    150a:	6e e6       	ldi	r22, 0x6E	; 110
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	89 ea       	ldi	r24, 0xA9	; 169
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
    1516:	08 95       	ret

00001518 <_Z8drawTurnP6Player>:
	
	//my_drawCircle(GRID_STARTING_Y + GRID_BLOCK_SIZE + GRID_BLOCK_SIZE/2, GRID_STARTING_X + GRID_BLOCK_SIZE + GRID_BLOCK_SIZE/2, 30, WHITE);
	
}

void drawTurn(Player *players) {
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
	print_string(BCK_BTN_Y + BCK_BTN_H + 4*BLANK_SPACE, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
    1528:	0f 2e       	mov	r0, r31
    152a:	f2 ec       	ldi	r31, 0xC2	; 194
    152c:	ef 2e       	mov	r14, r31
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	ff 2e       	mov	r15, r31
    1532:	f0 2d       	mov	r31, r0
    1534:	0e ea       	ldi	r16, 0xAE	; 174
    1536:	1a e1       	ldi	r17, 0x1A	; 26
    1538:	2f ef       	ldi	r18, 0xFF	; 255
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	43 e0       	ldi	r20, 0x03	; 3
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	8a e5       	ldi	r24, 0x5A	; 90
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	if(currentPlayer == CROSS) {
    154a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	59 f5       	brne	.+86     	; 0x15a8 <_Z8drawTurnP6Player+0x90>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, CYAN, CYAN, players[nought_chosen].name); //prvo prebrise starog tj poboja mu i slova i pozadinu u boju pozadine (CYAN) zato jer ako jedan ima duze ime od drugog onda ce od tog koji ima duze ime slova od njegovog imena ce se i dalje vidit pored imena od ovog koji ima krace
    1552:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <nought_chosen>
    1556:	0f 2e       	mov	r0, r31
    1558:	fb e0       	ldi	r31, 0x0B	; 11
    155a:	df 2e       	mov	r13, r31
    155c:	f0 2d       	mov	r31, r0
    155e:	7e 01       	movw	r14, r28
    1560:	d8 9e       	mul	r13, r24
    1562:	e0 0c       	add	r14, r0
    1564:	f1 1c       	adc	r15, r1
    1566:	11 24       	eor	r1, r1
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	e8 0e       	add	r14, r24
    156c:	f1 1c       	adc	r15, r1
    156e:	2e ea       	ldi	r18, 0xAE	; 174
    1570:	3a e1       	ldi	r19, 0x1A	; 26
    1572:	42 e0       	ldi	r20, 0x02	; 2
    1574:	6a e0       	ldi	r22, 0x0A	; 10
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	88 e7       	ldi	r24, 0x78	; 120
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name);
    1580:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cross_chosen>
    1584:	d8 9e       	mul	r13, r24
    1586:	c0 0d       	add	r28, r0
    1588:	d1 1d       	adc	r29, r1
    158a:	11 24       	eor	r1, r1
    158c:	7e 01       	movw	r14, r28
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	e8 0e       	add	r14, r24
    1592:	f1 1c       	adc	r15, r1
    1594:	29 81       	ldd	r18, Y+1	; 0x01
    1596:	3a 81       	ldd	r19, Y+2	; 0x02
    1598:	42 e0       	ldi	r20, 0x02	; 2
    159a:	6a e0       	ldi	r22, 0x0A	; 10
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	88 e7       	ldi	r24, 0x78	; 120
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    15a6:	2c c0       	rjmp	.+88     	; 0x1600 <_Z8drawTurnP6Player+0xe8>
	}else{
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, CYAN, CYAN, players[cross_chosen].name); //prvo prebrise starog tj poboja mu i slova i pozadinu u boju pozadine (CYAN) zato jer ako jedan ima duze ime od drugog onda ce od tog koji ima duze ime slova od njegovog imena ce se i dalje vidit pored imena od ovog koji ima krace
    15a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cross_chosen>
    15ac:	0f 2e       	mov	r0, r31
    15ae:	fb e0       	ldi	r31, 0x0B	; 11
    15b0:	df 2e       	mov	r13, r31
    15b2:	f0 2d       	mov	r31, r0
    15b4:	7e 01       	movw	r14, r28
    15b6:	d8 9e       	mul	r13, r24
    15b8:	e0 0c       	add	r14, r0
    15ba:	f1 1c       	adc	r15, r1
    15bc:	11 24       	eor	r1, r1
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	e8 0e       	add	r14, r24
    15c2:	f1 1c       	adc	r15, r1
    15c4:	0e ea       	ldi	r16, 0xAE	; 174
    15c6:	1a e1       	ldi	r17, 0x1A	; 26
    15c8:	2e ea       	ldi	r18, 0xAE	; 174
    15ca:	3a e1       	ldi	r19, 0x1A	; 26
    15cc:	42 e0       	ldi	r20, 0x02	; 2
    15ce:	6a e0       	ldi	r22, 0x0A	; 10
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	88 e7       	ldi	r24, 0x78	; 120
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    15da:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <nought_chosen>
    15de:	d8 9e       	mul	r13, r24
    15e0:	c0 0d       	add	r28, r0
    15e2:	d1 1d       	adc	r29, r1
    15e4:	11 24       	eor	r1, r1
    15e6:	7e 01       	movw	r14, r28
    15e8:	84 e0       	ldi	r24, 0x04	; 4
    15ea:	e8 0e       	add	r14, r24
    15ec:	f1 1c       	adc	r15, r1
    15ee:	29 81       	ldd	r18, Y+1	; 0x01
    15f0:	3a 81       	ldd	r19, Y+2	; 0x02
    15f2:	42 e0       	ldi	r20, 0x02	; 2
    15f4:	6a e0       	ldi	r22, 0x0A	; 10
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	88 e7       	ldi	r24, 0x78	; 120
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	08 95       	ret

00001610 <_Z10drawOnGridhh>:

uint8_t drawOnGrid(uint8_t y, uint8_t x) { //skuzi kako ovo centrirat i napravi preko define-ova
	if(currentPlayer == CROSS) { //nesto sa players[cross_chosen]
    1610:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    1614:	91 30       	cpi	r25, 0x01	; 1
    1616:	69 f4       	brne	.+26     	; 0x1632 <_Z10drawOnGridhh+0x22>
		//print_string(y + 10, x + 10, 2, WHITE, CYAN, "X\0");
		//draw_cross(y-5,x,62, WHITE); //bilo 62, 88 = sqrt(62**2 + 62**2) //treba podignut za 5 da bi bio tocno na sredini nez tocno zas
		//draw_cross(y + y/20 - 5,x + x/20, 62-62/3, WHITE);
		
		//draw_cross(y + 11 - 5,x + 11 - 3, 62-62/3, RED); //skuzi malo kako ovo centrirat
		my_draw_cross(y + GRID_BLOCK_SIZE/2, x + GRID_BLOCK_SIZE/2, 25, RED);
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	61 5e       	subi	r22, 0xE1	; 225
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	29 e6       	ldi	r18, 0x69	; 105
    1622:	33 ed       	ldi	r19, 0xD3	; 211
    1624:	49 e1       	ldi	r20, 0x19	; 25
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	4f 96       	adiw	r24, 0x1f	; 31
    162a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z13my_draw_crossjjjj>
		
		//draw_cross(y + 8,x + 8, 62/2, RED); //skuzi malo kako ovo centrirat
		
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40 + 50, BCK_BTN_X, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name);
		return NOUGHT;
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	08 95       	ret
		//print_string(y + 10, x + 10, 2, WHITE, CYAN, "O\0");
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40 + 50, BCK_BTN_X, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
		
		//draw_circle(y + 11 - 5 - 3, x + 11 - 3, 23, GREEN); //62/3   //skuzi malo kako ovo centrirat
		adafruit_drawCircle(y + GRID_BLOCK_SIZE/2, x + GRID_BLOCK_SIZE/2, 25, GREEN);
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	61 5e       	subi	r22, 0xE1	; 225
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	2b e2       	ldi	r18, 0x2B	; 43
    163c:	37 ec       	ldi	r19, 0xC7	; 199
    163e:	49 e1       	ldi	r20, 0x19	; 25
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	4f 96       	adiw	r24, 0x1f	; 31
    1644:	0e 94 37 05 	call	0xa6e	; 0xa6e <_Z19adafruit_drawCirclejjjj>
		//draw_circle(y + 10, x + 10, 21, GREEN); //10 ~ (1/6) * 62, 21 ~ (1/3) * 62
		//draw_circle(y + 12, x + 12, 10, GREEN); //8 ~ (1/8) * 62, 16 ~ (1/4) * 62
		return CROSS;
    1648:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    164a:	08 95       	ret

0000164c <_Z13checkGameOverP6Player>:

void checkGameOver(Player *players) {
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	5c 01       	movw	r10, r24
    1660:	ee eb       	ldi	r30, 0xBE	; 190
    1662:	f1 e0       	ldi	r31, 0x01	; 1
    1664:	21 ec       	ldi	r18, 0xC1	; 193
    1666:	31 e0       	ldi	r19, 0x01	; 1
    1668:	df 01       	movw	r26, r30
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
		if (board[i][0] != EMPTY && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
    166a:	80 81       	ld	r24, Z
    166c:	88 23       	and	r24, r24
    166e:	51 f0       	breq	.+20     	; 0x1684 <_Z13checkGameOverP6Player+0x38>
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	89 13       	cpse	r24, r25
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <_Z13checkGameOverP6Player+0x38>
    1676:	d2 80       	ldd	r13, Z+2	; 0x02
    1678:	8d 11       	cpse	r24, r13
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <_Z13checkGameOverP6Player+0x38>
			gameOver = 1; // 3 same in a row
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
			winner = board[i][0];
			break;
    1682:	e5 c0       	rjmp	.+458    	; 0x184e <_Z13checkGameOverP6Player+0x202>
		}
		if (board[0][i] != EMPTY && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
    1684:	8d 91       	ld	r24, X+
    1686:	88 23       	and	r24, r24
    1688:	71 f0       	breq	.+28     	; 0x16a6 <_Z13checkGameOverP6Player+0x5a>
    168a:	12 96       	adiw	r26, 0x02	; 2
    168c:	9c 91       	ld	r25, X
    168e:	12 97       	sbiw	r26, 0x02	; 2
    1690:	89 13       	cpse	r24, r25
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <_Z13checkGameOverP6Player+0x5a>
    1694:	15 96       	adiw	r26, 0x05	; 5
    1696:	dc 90       	ld	r13, X
    1698:	15 97       	sbiw	r26, 0x05	; 5
    169a:	8d 11       	cpse	r24, r13
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <_Z13checkGameOverP6Player+0x5a>
			gameOver = 1; // 3 same in a column
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
			winner = board[0][i];
			break;
    16a4:	d4 c0       	rjmp	.+424    	; 0x184e <_Z13checkGameOverP6Player+0x202>
    16a6:	33 96       	adiw	r30, 0x03	; 3
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
    16a8:	a2 17       	cp	r26, r18
    16aa:	b3 07       	cpc	r27, r19
    16ac:	f1 f6       	brne	.-68     	; 0x166a <_Z13checkGameOverP6Player+0x1e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    16ae:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <board+0x4>
    16b2:	88 23       	and	r24, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <_Z13checkGameOverP6Player+0x6c>
    16b6:	e3 c0       	rjmp	.+454    	; 0x187e <_Z13checkGameOverP6Player+0x232>
		return CROSS;
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
    16b8:	d1 2c       	mov	r13, r1
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    16ba:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <board>
    16be:	98 13       	cpse	r25, r24
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <_Z13checkGameOverP6Player+0x7e>
    16c2:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <board+0x8>
    16c6:	92 17       	cp	r25, r18
    16c8:	41 f0       	breq	.+16     	; 0x16da <_Z13checkGameOverP6Player+0x8e>
    16ca:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <board+0x2>
    16ce:	98 13       	cpse	r25, r24
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <_Z13checkGameOverP6Player+0x98>
    16d2:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <board+0x6>
    16d6:	92 13       	cpse	r25, r18
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <_Z13checkGameOverP6Player+0x98>
		gameOver = 1; // 3 same in a diagonal
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <gameOver>
    16e0:	d8 2e       	mov	r13, r24
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <_Z13checkGameOverP6Player+0xa2>
		winner = board[1][1];
	}
	
	if(gameOver) {
    16e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    16e8:	88 23       	and	r24, r24
    16ea:	09 f4       	brne	.+2      	; 0x16ee <_Z13checkGameOverP6Player+0xa2>
    16ec:	79 c0       	rjmp	.+242    	; 0x17e0 <_Z13checkGameOverP6Player+0x194>
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
    16ee:	0f 2e       	mov	r0, r31
    16f0:	f9 ec       	ldi	r31, 0xC9	; 201
    16f2:	ef 2e       	mov	r14, r31
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	ff 2e       	mov	r15, r31
    16f8:	f0 2d       	mov	r31, r0
    16fa:	0e ea       	ldi	r16, 0xAE	; 174
    16fc:	1a e1       	ldi	r17, 0x1A	; 26
    16fe:	2f ef       	ldi	r18, 0xFF	; 255
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	43 e0       	ldi	r20, 0x03	; 3
    1704:	6a e0       	ldi	r22, 0x0A	; 10
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	8c e8       	ldi	r24, 0x8C	; 140
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	d8 12       	cpse	r13, r24
    1714:	23 c0       	rjmp	.+70     	; 0x175c <_Z13checkGameOverP6Player+0x110>
    1716:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cross_chosen>
    171a:	0f 2e       	mov	r0, r31
    171c:	fb e0       	ldi	r31, 0x0B	; 11
    171e:	df 2e       	mov	r13, r31
    1720:	f0 2d       	mov	r31, r0
    1722:	f5 01       	movw	r30, r10
    1724:	d8 9e       	mul	r13, r24
    1726:	e0 0d       	add	r30, r0
    1728:	f1 1d       	adc	r31, r1
    172a:	11 24       	eor	r1, r1
    172c:	7f 01       	movw	r14, r30
    172e:	c4 e0       	ldi	r28, 0x04	; 4
    1730:	ec 0e       	add	r14, r28
    1732:	f1 1c       	adc	r15, r1
    1734:	21 81       	ldd	r18, Z+1	; 0x01
    1736:	32 81       	ldd	r19, Z+2	; 0x02
    1738:	42 e0       	ldi	r20, 0x02	; 2
    173a:	6a e0       	ldi	r22, 0x0A	; 10
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	8a ea       	ldi	r24, 0xAA	; 170
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    1746:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cross_chosen>
    174a:	e5 01       	movw	r28, r10
    174c:	d8 9e       	mul	r13, r24
    174e:	c0 0d       	add	r28, r0
    1750:	d1 1d       	adc	r29, r1
    1752:	11 24       	eor	r1, r1
    1754:	88 81       	ld	r24, Y
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	88 83       	st	Y, r24
    175a:	24 c0       	rjmp	.+72     	; 0x17a4 <_Z13checkGameOverP6Player+0x158>
		winner = board[1][1];
	}
	
	if(gameOver) {
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
		winner == CROSS ? print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    175c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <nought_chosen>
    1760:	0f 2e       	mov	r0, r31
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	df 2e       	mov	r13, r31
    1766:	f0 2d       	mov	r31, r0
    1768:	f5 01       	movw	r30, r10
    176a:	d8 9e       	mul	r13, r24
    176c:	e0 0d       	add	r30, r0
    176e:	f1 1d       	adc	r31, r1
    1770:	11 24       	eor	r1, r1
    1772:	7f 01       	movw	r14, r30
    1774:	d4 e0       	ldi	r29, 0x04	; 4
    1776:	ed 0e       	add	r14, r29
    1778:	f1 1c       	adc	r15, r1
    177a:	21 81       	ldd	r18, Z+1	; 0x01
    177c:	32 81       	ldd	r19, Z+2	; 0x02
    177e:	0e ea       	ldi	r16, 0xAE	; 174
    1780:	1a e1       	ldi	r17, 0x1A	; 26
    1782:	42 e0       	ldi	r20, 0x02	; 2
    1784:	6a e0       	ldi	r22, 0x0A	; 10
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	8a ea       	ldi	r24, 0xAA	; 170
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    1790:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <nought_chosen>
    1794:	e5 01       	movw	r28, r10
    1796:	d8 9e       	mul	r13, r24
    1798:	c0 0d       	add	r28, r0
    179a:	d1 1d       	adc	r29, r1
    179c:	11 24       	eor	r1, r1
    179e:	88 81       	ld	r24, Y
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	88 83       	st	Y, r24
		
		uint8_t offset_x, offset_y;
		
		offset_x = (TRY_AGAIN_W - strlen("TRY AGAIN\0") * CHAR_W * 2) / 2;
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
    17a4:	0f ef       	ldi	r16, 0xFF	; 255
    17a6:	1f ef       	ldi	r17, 0xFF	; 255
    17a8:	29 e6       	ldi	r18, 0x69	; 105
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4e e1       	ldi	r20, 0x1E	; 30
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	6a e0       	ldi	r22, 0x0A	; 10
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	88 ec       	ldi	r24, 0xC8	; 200
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset x bude previse desno ne kuzim zasto ??
    17bc:	0f 2e       	mov	r0, r31
    17be:	ff ec       	ldi	r31, 0xCF	; 207
    17c0:	ef 2e       	mov	r14, r31
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	ff 2e       	mov	r15, r31
    17c6:	f0 2d       	mov	r31, r0
    17c8:	0e ea       	ldi	r16, 0xAE	; 174
    17ca:	1a e1       	ldi	r17, 0x1A	; 26
    17cc:	2f ef       	ldi	r18, 0xFF	; 255
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	42 e0       	ldi	r20, 0x02	; 2
    17d2:	6e e0       	ldi	r22, 0x0E	; 14
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	8f ec       	ldi	r24, 0xCF	; 207
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    17de:	55 c0       	rjmp	.+170    	; 0x188a <_Z13checkGameOverP6Player+0x23e>
			//players[cross_chosen].points = 99;
			//players[cross_chosen].name[0] = ':';
			//change(&players[cross_chosen]);
			//print_string(200, 200, 3, WHITE, CYAN, "DA NE");
		//}
	}else if(numberOfMoves == 9) {
    17e0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
    17e4:	89 30       	cpi	r24, 0x09	; 9
    17e6:	09 f0       	breq	.+2      	; 0x17ea <_Z13checkGameOverP6Player+0x19e>
    17e8:	50 c0       	rjmp	.+160    	; 0x188a <_Z13checkGameOverP6Player+0x23e>
		//tie
		gameOver = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
		print_string(MAX_X - 9*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "TIE\0");
    17f0:	0f 2e       	mov	r0, r31
    17f2:	fa ed       	ldi	r31, 0xDA	; 218
    17f4:	ef 2e       	mov	r14, r31
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	ff 2e       	mov	r15, r31
    17fa:	f0 2d       	mov	r31, r0
    17fc:	0e ea       	ldi	r16, 0xAE	; 174
    17fe:	1a e1       	ldi	r17, 0x1A	; 26
    1800:	2f ef       	ldi	r18, 0xFF	; 255
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	43 e0       	ldi	r20, 0x03	; 3
    1806:	6a e0       	ldi	r22, 0x0A	; 10
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	86 e9       	ldi	r24, 0x96	; 150
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		
		uint8_t offset_x, offset_y;
		
		offset_x = (TRY_AGAIN_W - strlen("TRY AGAIN") * CHAR_W * 2) / 2;
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
    1812:	0f ef       	ldi	r16, 0xFF	; 255
    1814:	1f ef       	ldi	r17, 0xFF	; 255
    1816:	29 e6       	ldi	r18, 0x69	; 105
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4e e1       	ldi	r20, 0x1E	; 30
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	6a e0       	ldi	r22, 0x0A	; 10
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset0_x bude previse desno ne kuzim zasto ??
    182a:	0f 2e       	mov	r0, r31
    182c:	ff ec       	ldi	r31, 0xCF	; 207
    182e:	ef 2e       	mov	r14, r31
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	ff 2e       	mov	r15, r31
    1834:	f0 2d       	mov	r31, r0
    1836:	0e ea       	ldi	r16, 0xAE	; 174
    1838:	1a e1       	ldi	r17, 0x1A	; 26
    183a:	2f ef       	ldi	r18, 0xFF	; 255
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	42 e0       	ldi	r20, 0x02	; 2
    1840:	6e e0       	ldi	r22, 0x0E	; 14
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	8f ec       	ldi	r24, 0xCF	; 207
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
	
}
    184c:	1e c0       	rjmp	.+60     	; 0x188a <_Z13checkGameOverP6Player+0x23e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    184e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <board+0x4>
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <_Z13checkGameOverP6Player+0x20c>
    1856:	4b cf       	rjmp	.-362    	; 0x16ee <_Z13checkGameOverP6Player+0xa2>
    1858:	30 cf       	rjmp	.-416    	; 0x16ba <_Z13checkGameOverP6Player+0x6e>
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) {
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
    185a:	0f 2e       	mov	r0, r31
    185c:	f9 ec       	ldi	r31, 0xC9	; 201
    185e:	ef 2e       	mov	r14, r31
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	ff 2e       	mov	r15, r31
    1864:	f0 2d       	mov	r31, r0
    1866:	0e ea       	ldi	r16, 0xAE	; 174
    1868:	1a e1       	ldi	r17, 0x1A	; 26
    186a:	2f ef       	ldi	r18, 0xFF	; 255
    186c:	3f ef       	ldi	r19, 0xFF	; 255
    186e:	43 e0       	ldi	r20, 0x03	; 3
    1870:	6a e0       	ldi	r22, 0x0A	; 10
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	8c e8       	ldi	r24, 0x8C	; 140
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    187c:	6f cf       	rjmp	.-290    	; 0x175c <_Z13checkGameOverP6Player+0x110>
	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) {
    187e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1882:	88 23       	and	r24, r24
    1884:	09 f4       	brne	.+2      	; 0x1888 <_Z13checkGameOverP6Player+0x23c>
    1886:	ac cf       	rjmp	.-168    	; 0x17e0 <_Z13checkGameOverP6Player+0x194>
    1888:	e8 cf       	rjmp	.-48     	; 0x185a <_Z13checkGameOverP6Player+0x20e>
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset0_x bude previse desno ne kuzim zasto ??
	}
	
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	df 90       	pop	r13
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	08 95       	ret

0000189e <main>:

int main() {
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	cc 58       	subi	r28, 0x8C	; 140
    18a8:	d1 09       	sbc	r29, r1
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
	TFT_init();
    18b4:	0e 94 be 00 	call	0x17c	; 0x17c <_Z8TFT_initv>

	//initialize_menu();

	TFT_start();
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <_Z9TFT_startv>
	
	uint16_t TP_X;                  // received coordiates rom tuch part of screen
	uint16_t TP_Y;                  // received coordiates rom tuch part of screen
	set_background_color(CYAN); //kao neki clearscr
    18bc:	8e ea       	ldi	r24, 0xAE	; 174
    18be:	9a e1       	ldi	r25, 0x1A	; 26
    18c0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
	//uint8_t i = 0;
	uint8_t currentPage = HOMESCREEN; //0 - homescreen //vratit na HOMESCREEN
    18c4:	1d 82       	std	Y+5, r1	; 0x05
	char str[22] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
    18c6:	86 e1       	ldi	r24, 0x16	; 22
    18c8:	ef ed       	ldi	r30, 0xDF	; 223
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	de 01       	movw	r26, r28
    18ce:	16 96       	adiw	r26, 0x06	; 6
    18d0:	01 90       	ld	r0, Z+
    18d2:	0d 92       	st	X+, r0
    18d4:	8a 95       	dec	r24
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <main+0x32>
	//print_keyboard(str);
	//Player players[4];
	uint8_t game_rerender = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	8c 8f       	std	Y+28, r24	; 0x1c
    18dc:	e9 e4       	ldi	r30, 0x49	; 73
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	ec 0f       	add	r30, r28
    18e2:	fd 1f       	adc	r31, r29
    18e4:	34 96       	adiw	r30, 0x04	; 4
    18e6:	89 e4       	ldi	r24, 0x49	; 73
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	8c 0f       	add	r24, r28
    18ec:	9d 1f       	adc	r25, r29
    18ee:	0b 96       	adiw	r24, 0x0b	; 11
	Player players[MAX_PLAYERS];
	
	Player p1; //ovo dinamicki radi
	p1.points = 0;
	for(uint8_t j = 0; j < 7; j++) {
		p1.name[j] = 'A';
    18f0:	21 e4       	ldi	r18, 0x41	; 65
    18f2:	21 93       	st	Z+, r18
	uint8_t game_rerender = 1;
	Player players[MAX_PLAYERS];
	
	Player p1; //ovo dinamicki radi
	p1.points = 0;
	for(uint8_t j = 0; j < 7; j++) {
    18f4:	8e 17       	cp	r24, r30
    18f6:	9f 07       	cpc	r25, r31
    18f8:	e1 f7       	brne	.-8      	; 0x18f2 <main+0x54>
		p1.name[j] = 'A';
	}
	p1.name[6] = '\0';
    18fa:	64 96       	adiw	r28, 0x14	; 20
    18fc:	1f ae       	std	Y+63, r1	; 0x3f
    18fe:	64 97       	sbiw	r28, 0x14	; 20
    1900:	e4 e5       	ldi	r30, 0x54	; 84
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	ec 0f       	add	r30, r28
    1906:	fd 1f       	adc	r31, r29
    1908:	34 96       	adiw	r30, 0x04	; 4
    190a:	84 e5       	ldi	r24, 0x54	; 84
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	8c 0f       	add	r24, r28
    1910:	9d 1f       	adc	r25, r29
    1912:	0b 96       	adiw	r24, 0x0b	; 11
	p1.color = WHITE;
	
	Player p2;
	p2.points = 2;
	for(uint8_t j = 0; j < 7; j++) {
		p2.name[j] = 'B';
    1914:	22 e4       	ldi	r18, 0x42	; 66
    1916:	21 93       	st	Z+, r18
	p1.clicked = 0;
	p1.color = WHITE;
	
	Player p2;
	p2.points = 2;
	for(uint8_t j = 0; j < 7; j++) {
    1918:	8e 17       	cp	r24, r30
    191a:	9f 07       	cpc	r25, r31
    191c:	e1 f7       	brne	.-8      	; 0x1916 <main+0x78>
		p2.name[j] = 'B';
	}
	p2.name[6] = '\0';
    191e:	6f 96       	adiw	r28, 0x1f	; 31
    1920:	1f ae       	std	Y+63, r1	; 0x3f
    1922:	6f 97       	sbiw	r28, 0x1f	; 31
    1924:	ef e5       	ldi	r30, 0x5F	; 95
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	ec 0f       	add	r30, r28
    192a:	fd 1f       	adc	r31, r29
    192c:	34 96       	adiw	r30, 0x04	; 4
    192e:	8f e5       	ldi	r24, 0x5F	; 95
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	8c 0f       	add	r24, r28
    1934:	9d 1f       	adc	r25, r29
    1936:	0b 96       	adiw	r24, 0x0b	; 11
	p2.color = WHITE;
	
	Player p3;
	p3.points = 7;
	for(uint8_t j = 0; j < 7; j++) {
		p3.name[j] = 'C';
    1938:	23 e4       	ldi	r18, 0x43	; 67
    193a:	21 93       	st	Z+, r18
	p2.clicked = 1;
	p2.color = WHITE;
	
	Player p3;
	p3.points = 7;
	for(uint8_t j = 0; j < 7; j++) {
    193c:	8e 17       	cp	r24, r30
    193e:	9f 07       	cpc	r25, r31
    1940:	e1 f7       	brne	.-8      	; 0x193a <main+0x9c>
		p3.name[j] = 'C';
	}
	p3.name[6] = '\0';
    1942:	aa 96       	adiw	r28, 0x2a	; 42
    1944:	1f ae       	std	Y+63, r1	; 0x3f
    1946:	aa 97       	sbiw	r28, 0x2a	; 42
    1948:	ea e6       	ldi	r30, 0x6A	; 106
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	ec 0f       	add	r30, r28
    194e:	fd 1f       	adc	r31, r29
    1950:	34 96       	adiw	r30, 0x04	; 4
    1952:	8a e6       	ldi	r24, 0x6A	; 106
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	8c 0f       	add	r24, r28
    1958:	9d 1f       	adc	r25, r29
    195a:	0b 96       	adiw	r24, 0x0b	; 11
	p3.color = WHITE;
	
	Player p4;
	p4.points = 4;
	for(uint8_t j = 0; j < 7; j++) {
		p4.name[j] = 'D';
    195c:	24 e4       	ldi	r18, 0x44	; 68
    195e:	21 93       	st	Z+, r18
	p3.clicked = 0;
	p3.color = WHITE;
	
	Player p4;
	p4.points = 4;
	for(uint8_t j = 0; j < 7; j++) {
    1960:	e8 17       	cp	r30, r24
    1962:	f9 07       	cpc	r31, r25
    1964:	e1 f7       	brne	.-8      	; 0x195e <main+0xc0>
		p4.name[j] = 'D';
	}
	p4.name[6] = '\0';
    1966:	e5 96       	adiw	r28, 0x35	; 53
    1968:	1f ae       	std	Y+63, r1	; 0x3f
    196a:	e5 97       	sbiw	r28, 0x35	; 53
	p4.clicked = 0;
	p4.color = WHITE;
	
	players[0] = p1;
    196c:	2a 96       	adiw	r28, 0x0a	; 10
    196e:	1f ae       	std	Y+63, r1	; 0x3f
    1970:	2a 97       	sbiw	r28, 0x0a	; 10
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	2c 96       	adiw	r28, 0x0c	; 12
    1978:	9f af       	std	Y+63, r25	; 0x3f
    197a:	8e af       	std	Y+62, r24	; 0x3e
    197c:	2c 97       	sbiw	r28, 0x0c	; 12
    197e:	2d 96       	adiw	r28, 0x0d	; 13
    1980:	1f ae       	std	Y+63, r1	; 0x3f
    1982:	2d 97       	sbiw	r28, 0x0d	; 13
    1984:	2b e0       	ldi	r18, 0x0B	; 11
    1986:	fe 01       	movw	r30, r28
    1988:	e7 5b       	subi	r30, 0xB7	; 183
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	de 01       	movw	r26, r28
    198e:	5d 96       	adiw	r26, 0x1d	; 29
    1990:	01 90       	ld	r0, Z+
    1992:	0d 92       	st	X+, r0
    1994:	2a 95       	dec	r18
    1996:	e1 f7       	brne	.-8      	; 0x1990 <main+0xf2>
	players[1] = p2;
    1998:	22 e0       	ldi	r18, 0x02	; 2
    199a:	65 96       	adiw	r28, 0x15	; 21
    199c:	2f af       	std	Y+63, r18	; 0x3f
    199e:	65 97       	sbiw	r28, 0x15	; 21
    19a0:	67 96       	adiw	r28, 0x17	; 23
    19a2:	9f af       	std	Y+63, r25	; 0x3f
    19a4:	8e af       	std	Y+62, r24	; 0x3e
    19a6:	67 97       	sbiw	r28, 0x17	; 23
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	68 96       	adiw	r28, 0x18	; 24
    19ac:	2f af       	std	Y+63, r18	; 0x3f
    19ae:	68 97       	sbiw	r28, 0x18	; 24
    19b0:	2b e0       	ldi	r18, 0x0B	; 11
    19b2:	fe 01       	movw	r30, r28
    19b4:	ec 5a       	subi	r30, 0xAC	; 172
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	de 01       	movw	r26, r28
    19ba:	98 96       	adiw	r26, 0x28	; 40
    19bc:	01 90       	ld	r0, Z+
    19be:	0d 92       	st	X+, r0
    19c0:	2a 95       	dec	r18
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <main+0x11e>
	players[2] = p3;
    19c4:	27 e0       	ldi	r18, 0x07	; 7
    19c6:	a0 96       	adiw	r28, 0x20	; 32
    19c8:	2f af       	std	Y+63, r18	; 0x3f
    19ca:	a0 97       	sbiw	r28, 0x20	; 32
    19cc:	a2 96       	adiw	r28, 0x22	; 34
    19ce:	9f af       	std	Y+63, r25	; 0x3f
    19d0:	8e af       	std	Y+62, r24	; 0x3e
    19d2:	a2 97       	sbiw	r28, 0x22	; 34
    19d4:	a3 96       	adiw	r28, 0x23	; 35
    19d6:	1f ae       	std	Y+63, r1	; 0x3f
    19d8:	a3 97       	sbiw	r28, 0x23	; 35
    19da:	2b e0       	ldi	r18, 0x0B	; 11
    19dc:	fe 01       	movw	r30, r28
    19de:	e1 5a       	subi	r30, 0xA1	; 161
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	de 01       	movw	r26, r28
    19e4:	d3 96       	adiw	r26, 0x33	; 51
    19e6:	01 90       	ld	r0, Z+
    19e8:	0d 92       	st	X+, r0
    19ea:	2a 95       	dec	r18
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <main+0x148>
	players[3] = p4;
    19ee:	24 e0       	ldi	r18, 0x04	; 4
    19f0:	ab 96       	adiw	r28, 0x2b	; 43
    19f2:	2f af       	std	Y+63, r18	; 0x3f
    19f4:	ab 97       	sbiw	r28, 0x2b	; 43
    19f6:	ad 96       	adiw	r28, 0x2d	; 45
    19f8:	9f af       	std	Y+63, r25	; 0x3f
    19fa:	8e af       	std	Y+62, r24	; 0x3e
    19fc:	ad 97       	sbiw	r28, 0x2d	; 45
    19fe:	ae 96       	adiw	r28, 0x2e	; 46
    1a00:	1f ae       	std	Y+63, r1	; 0x3f
    1a02:	ae 97       	sbiw	r28, 0x2e	; 46
    1a04:	8b e0       	ldi	r24, 0x0B	; 11
    1a06:	fe 01       	movw	r30, r28
    1a08:	e6 59       	subi	r30, 0x96	; 150
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	de 01       	movw	r26, r28
    1a0e:	de 96       	adiw	r26, 0x3e	; 62
    1a10:	01 90       	ld	r0, Z+
    1a12:	0d 92       	st	X+, r0
    1a14:	8a 95       	dec	r24
    1a16:	e1 f7       	brne	.-8      	; 0x1a10 <main+0x172>
						if(check_touch(TP_X, TP_Y, GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE, GRID_BLOCK_SIZE, GRID_BLOCK_SIZE)) {
							if(board[i][j] == EMPTY) { //ovo sa konstantama
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
								numberOfMoves++;
								currentPlayer = drawOnGrid(GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
								game_rerender = 1;
    1a18:	33 24       	eor	r3, r3
    1a1a:	33 94       	inc	r3
	players[2] = p3;
	players[3] = p4;
	
	while (1) {
		// if screen is touched
		if(currentPage == HOMESCREEN) {
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	81 11       	cpse	r24, r1
    1a20:	65 c0       	rjmp	.+202    	; 0x1aec <main+0x24e>
			//clrScr();
			if(hs_first_enter) { //bez ovoga ostanu stvari od proslog page-a nez zas iako sam gore u back buttonu stavio clrScr() ??
    1a22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hs_first_enter>
    1a26:	88 23       	and	r24, r24
    1a28:	31 f0       	breq	.+12     	; 0x1a36 <main+0x198>
				clrScr();
    1a2a:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
				drawHomeScreen();
    1a2e:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z14drawHomeScreenv>
				hs_first_enter = 0;
    1a32:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <hs_first_enter>
			}
			cp_rerender = 1;
    1a36:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <cp_rerender>
			game_rerender = 1;
    1a3a:	3c 8e       	std	Y+28, r3	; 0x1c
			//drawHomeScreen();
			if(get_bit(PINB, T_IRQ) == 0) {
    1a3c:	b0 99       	sbic	0x16, 0	; 22
    1a3e:	ee cf       	rjmp	.-36     	; 0x1a1c <main+0x17e>
				read_touch_coords(&TP_X, &TP_Y);
    1a40:	be 01       	movw	r22, r28
    1a42:	6d 5f       	subi	r22, 0xFD	; 253
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				if(check_touch(TP_X, TP_Y, HS_S_Y, HS_S_X, HS_H, HS_W)) { //NEW_PLAYER
    1a4e:	6b 81       	ldd	r22, Y+3	; 0x03
    1a50:	7c 81       	ldd	r23, Y+4	; 0x04
    1a52:	0f 2e       	mov	r0, r31
    1a54:	f8 e1       	ldi	r31, 0x18	; 24
    1a56:	ef 2e       	mov	r14, r31
    1a58:	ff 24       	eor	r15, r15
    1a5a:	f3 94       	inc	r15
    1a5c:	f0 2d       	mov	r31, r0
    1a5e:	0c e3       	ldi	r16, 0x3C	; 60
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	24 e1       	ldi	r18, 0x14	; 20
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a e0       	ldi	r20, 0x0A	; 10
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1a72:	88 23       	and	r24, r24
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <main+0x1e2>
					clrScr();
    1a76:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					hs_first_enter = 1;
    1a7a:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <hs_first_enter>
					currentPage = NEW_PLAYER;
    1a7e:	3d 82       	std	Y+5, r3	; 0x05
				}
				if(check_touch(TP_X, TP_Y, CP_Y, CP_X, CP_H, CP_W)) { //CHOOSE_PLAYER
    1a80:	6b 81       	ldd	r22, Y+3	; 0x03
    1a82:	7c 81       	ldd	r23, Y+4	; 0x04
    1a84:	0f 2e       	mov	r0, r31
    1a86:	f8 e1       	ldi	r31, 0x18	; 24
    1a88:	ef 2e       	mov	r14, r31
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	f3 94       	inc	r15
    1a8e:	f0 2d       	mov	r31, r0
    1a90:	0c e3       	ldi	r16, 0x3C	; 60
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	24 e1       	ldi	r18, 0x14	; 20
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e5       	ldi	r20, 0x50	; 80
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1aa4:	88 23       	and	r24, r24
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <main+0x216>
					clrScr();
    1aa8:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					hs_first_enter = 1;
    1aac:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <hs_first_enter>
					currentPage = CHOOSE_PLAYER;
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
				}
				if(check_touch(TP_X, TP_Y, LB_Y, LB_X, LB_H, LB_W)) { //LEADERBOARDS
    1ab4:	6b 81       	ldd	r22, Y+3	; 0x03
    1ab6:	7c 81       	ldd	r23, Y+4	; 0x04
    1ab8:	0f 2e       	mov	r0, r31
    1aba:	f8 e1       	ldi	r31, 0x18	; 24
    1abc:	ef 2e       	mov	r14, r31
    1abe:	ff 24       	eor	r15, r15
    1ac0:	f3 94       	inc	r15
    1ac2:	f0 2d       	mov	r31, r0
    1ac4:	0c e3       	ldi	r16, 0x3C	; 60
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
    1ac8:	24 e1       	ldi	r18, 0x14	; 20
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	46 e9       	ldi	r20, 0x96	; 150
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1ad8:	88 23       	and	r24, r24
    1ada:	09 f4       	brne	.+2      	; 0x1ade <main+0x240>
    1adc:	9f cf       	rjmp	.-194    	; 0x1a1c <main+0x17e>
					clrScr(); //tu da se clear-a da se stalno ne re-cleara
    1ade:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					hs_first_enter = 1;
    1ae2:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <hs_first_enter>
					currentPage = LEADERBOARDS;
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	98 cf       	rjmp	.-208    	; 0x1a1c <main+0x17e>
				}
			}
		}else if(currentPage == NEW_PLAYER) {
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <main+0x254>
    1af0:	39 c1       	rjmp	.+626    	; 0x1d64 <main+0x4c6>
			drawBackButton();
    1af2:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
			print_keyboard(str);
    1af6:	ce 01       	movw	r24, r28
    1af8:	06 96       	adiw	r24, 0x06	; 6
    1afa:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_Z14print_keyboardPc>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1afe:	8e 01       	movw	r16, r28
    1b00:	04 5e       	subi	r16, 0xE4	; 228
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	9e 01       	movw	r18, r28
    1b06:	23 5e       	subi	r18, 0xE3	; 227
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	ae 01       	movw	r20, r28
    1b0c:	4b 5f       	subi	r20, 0xFB	; 251
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	be 01       	movw	r22, r28
    1b12:	6d 5f       	subi	r22, 0xFD	; 253
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	ce 01       	movw	r24, r28
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			drawDeleteButton();
    1b1e:	0e 94 b2 09 	call	0x1364	; 0x1364 <_Z16drawDeleteButtonv>
			drawOKButton();
    1b22:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z12drawOKButtonv>
				
			if(get_bit(PINB, T_IRQ) == 0) {
    1b26:	b0 99       	sbic	0x16, 0	; 22
    1b28:	79 cf       	rjmp	.-270    	; 0x1a1c <main+0x17e>
				read_touch_coords(&TP_X, &TP_Y);
    1b2a:	be 01       	movw	r22, r28
    1b2c:	6d 5f       	subi	r22, 0xFD	; 253
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	ce 01       	movw	r24, r28
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
					if(check_touch(TP_X, TP_Y, KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    1b38:	ab 80       	ldd	r10, Y+3	; 0x03
    1b3a:	bc 80       	ldd	r11, Y+4	; 0x04
    1b3c:	c9 80       	ldd	r12, Y+1	; 0x01
    1b3e:	da 80       	ldd	r13, Y+2	; 0x02
			drawDeleteButton();
			drawOKButton();
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1b40:	91 2c       	mov	r9, r1
					if(check_touch(TP_X, TP_Y, KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    1b42:	0f 2e       	mov	r0, r31
    1b44:	f9 e3       	ldi	r31, 0x39	; 57
    1b46:	7f 2e       	mov	r7, r31
    1b48:	f0 2d       	mov	r31, r0
    1b4a:	0f 2e       	mov	r0, r31
    1b4c:	f3 e2       	ldi	r31, 0x23	; 35
    1b4e:	8f 2e       	mov	r8, r31
    1b50:	f0 2d       	mov	r31, r0
    1b52:	97 9c       	mul	r9, r7
    1b54:	41 2d       	mov	r20, r1
    1b56:	11 24       	eor	r1, r1
    1b58:	46 95       	lsr	r20
    1b5a:	84 2f       	mov	r24, r20
    1b5c:	88 0f       	add	r24, r24
    1b5e:	88 0f       	add	r24, r24
    1b60:	88 0f       	add	r24, r24
    1b62:	84 0f       	add	r24, r20
    1b64:	29 2d       	mov	r18, r9
    1b66:	28 1b       	sub	r18, r24
    1b68:	82 9e       	mul	r8, r18
    1b6a:	90 01       	movw	r18, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	26 5f       	subi	r18, 0xF6	; 246
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	84 9e       	mul	r8, r20
    1b74:	a0 01       	movw	r20, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	4a 5b       	subi	r20, 0xBA	; 186
    1b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7c:	0f 2e       	mov	r0, r31
    1b7e:	fe e1       	ldi	r31, 0x1E	; 30
    1b80:	ef 2e       	mov	r14, r31
    1b82:	f1 2c       	mov	r15, r1
    1b84:	f0 2d       	mov	r31, r0
    1b86:	0e e1       	ldi	r16, 0x1E	; 30
    1b88:	10 e0       	ldi	r17, 0x00	; 0
    1b8a:	b5 01       	movw	r22, r10
    1b8c:	c6 01       	movw	r24, r12
    1b8e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1b92:	88 23       	and	r24, r24
    1b94:	61 f1       	breq	.+88     	; 0x1bee <main+0x350>
						if(newPlayerNameIndex == (MAX_NAME_LENGTH-1)) break; //jer ime ima max 7 char-a, ako je == 6 (zadnji index) naci da je vec sve upisao jer na zadnji mora doc nulterm
    1b96:	80 90 c7 01 	lds	r8, 0x01C7	; 0x8001c7 <newPlayerNameIndex>
    1b9a:	26 e0       	ldi	r18, 0x06	; 6
    1b9c:	82 16       	cp	r8, r18
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <main+0x304>
    1ba0:	1f c3       	rjmp	.+1598   	; 0x21e0 <main+0x942>
						clrScr();
    1ba2:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						newPlayerName[newPlayerNameIndex] = str[i];
    1ba6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <newPlayerNameIndex>
    1baa:	e8 2f       	mov	r30, r24
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	ea 59       	subi	r30, 0x9A	; 154
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	a6 e0       	ldi	r26, 0x06	; 6
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ac 0f       	add	r26, r28
    1bb8:	bd 1f       	adc	r27, r29
    1bba:	a9 0d       	add	r26, r9
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	9c 91       	ld	r25, X
    1bc0:	90 83       	st	Z, r25
						newPlayerName[newPlayerNameIndex+1] = '\0';
    1bc2:	11 82       	std	Z+1, r1	; 0x01
						newPlayerNameIndex++;
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <newPlayerNameIndex>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1bca:	0f 2e       	mov	r0, r31
    1bcc:	f6 e6       	ldi	r31, 0x66	; 102
    1bce:	ef 2e       	mov	r14, r31
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	ff 2e       	mov	r15, r31
    1bd4:	f0 2d       	mov	r31, r0
    1bd6:	0e ea       	ldi	r16, 0xAE	; 174
    1bd8:	1a e1       	ldi	r17, 0x1A	; 26
    1bda:	2f ef       	ldi	r18, 0xFF	; 255
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	43 e0       	ldi	r20, 0x03	; 3
    1be0:	6a e0       	ldi	r22, 0x0A	; 10
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
						//_delay_ms(500); //da ne napravi previse ocitanja
						break;
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <main+0x358>
			drawDeleteButton();
			drawOKButton();
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1bee:	93 94       	inc	r9
    1bf0:	46 e1       	ldi	r20, 0x16	; 22
    1bf2:	94 12       	cpse	r9, r20
    1bf4:	ae cf       	rjmp	.-164    	; 0x1b52 <main+0x2b4>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
						//_delay_ms(500); //da ne napravi previse ocitanja
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) {
    1bf6:	6b 81       	ldd	r22, Y+3	; 0x03
    1bf8:	7c 81       	ldd	r23, Y+4	; 0x04
    1bfa:	0f 2e       	mov	r0, r31
    1bfc:	fc e3       	ldi	r31, 0x3C	; 60
    1bfe:	ef 2e       	mov	r14, r31
    1c00:	f1 2c       	mov	r15, r1
    1c02:	f0 2d       	mov	r31, r0
    1c04:	08 e2       	ldi	r16, 0x28	; 40
    1c06:	10 e0       	ldi	r17, 0x00	; 0
    1c08:	24 eb       	ldi	r18, 0xB4	; 180
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4e eb       	ldi	r20, 0xBE	; 190
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1c18:	88 23       	and	r24, r24
    1c1a:	e9 f1       	breq	.+122    	; 0x1c96 <main+0x3f8>
					if(newPlayerNameIndex > 1) { //znaci da ima jedno slovo, npr A\0
    1c1c:	80 90 c7 01 	lds	r8, 0x01C7	; 0x8001c7 <newPlayerNameIndex>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	88 15       	cp	r24, r8
    1c24:	e0 f4       	brcc	.+56     	; 0x1c5e <main+0x3c0>
						newPlayerNameIndex--;
    1c26:	8a 94       	dec	r8
    1c28:	80 92 c7 01 	sts	0x01C7, r8	; 0x8001c7 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = '\0';
    1c2c:	e8 2d       	mov	r30, r8
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	ea 59       	subi	r30, 0x9A	; 154
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	10 82       	st	Z, r1
						clrScr();
    1c36:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	f6 e6       	ldi	r31, 0x66	; 102
    1c3e:	ef 2e       	mov	r14, r31
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	ff 2e       	mov	r15, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	0e ea       	ldi	r16, 0xAE	; 174
    1c48:	1a e1       	ldi	r17, 0x1A	; 26
    1c4a:	2f ef       	ldi	r18, 0xFF	; 255
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	43 e0       	ldi	r20, 0x03	; 3
    1c50:	6a e0       	ldi	r22, 0x0A	; 10
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    1c5c:	1c c0       	rjmp	.+56     	; 0x1c96 <main+0x3f8>
					}else if(newPlayerNameIndex == 1){ //nema ni jedno slovo, stavim razmak jer inace ako je nulterm bude zbugano
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	89 12       	cpse	r8, r25
    1c62:	19 c0       	rjmp	.+50     	; 0x1c96 <main+0x3f8>
						newPlayerNameIndex--;
    1c64:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = ' ';
    1c68:	80 e2       	ldi	r24, 0x20	; 32
    1c6a:	e6 e6       	ldi	r30, 0x66	; 102
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 83       	st	Z, r24
						clrScr();
    1c70:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1c74:	0f 2e       	mov	r0, r31
    1c76:	f6 e6       	ldi	r31, 0x66	; 102
    1c78:	ef 2e       	mov	r14, r31
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	ff 2e       	mov	r15, r31
    1c7e:	f0 2d       	mov	r31, r0
    1c80:	0e ea       	ldi	r16, 0xAE	; 174
    1c82:	1a e1       	ldi	r17, 0x1A	; 26
    1c84:	2f ef       	ldi	r18, 0xFF	; 255
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	43 e0       	ldi	r20, 0x03	; 3
    1c8a:	6a e0       	ldi	r22, 0x0A	; 10
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	88 ec       	ldi	r24, 0xC8	; 200
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
					}
					
				}
				
				if(check_touch(TP_X, TP_Y, OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W)) { //OK button
    1c96:	6b 81       	ldd	r22, Y+3	; 0x03
    1c98:	7c 81       	ldd	r23, Y+4	; 0x04
    1c9a:	0f 2e       	mov	r0, r31
    1c9c:	fc e3       	ldi	r31, 0x3C	; 60
    1c9e:	ef 2e       	mov	r14, r31
    1ca0:	f1 2c       	mov	r15, r1
    1ca2:	f0 2d       	mov	r31, r0
    1ca4:	08 e2       	ldi	r16, 0x28	; 40
    1ca6:	10 e0       	ldi	r17, 0x00	; 0
    1ca8:	2a ef       	ldi	r18, 0xFA	; 250
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4e eb       	ldi	r20, 0xBE	; 190
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <main+0x420>
    1cbc:	af ce       	rjmp	.-674    	; 0x1a1c <main+0x17e>
					//create player i da se vrati na homescreen
					if(players_size == MAX_PLAYERS || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
    1cbe:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <players_size>
    1cc2:	34 30       	cpi	r19, 0x04	; 4
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <main+0x42a>
    1cc6:	aa ce       	rjmp	.-684    	; 0x1a1c <main+0x17e>
    1cc8:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <newPlayerNameIndex>
    1ccc:	44 23       	and	r20, r20
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <main+0x434>
    1cd0:	a5 ce       	rjmp	.-694    	; 0x1a1c <main+0x17e>
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1cd4:	e6 e6       	ldi	r30, 0x66	; 102
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	01 90       	ld	r0, Z+
    1cda:	00 20       	and	r0, r0
    1cdc:	e9 f7       	brne	.-6      	; 0x1cd8 <main+0x43a>
    1cde:	31 97       	sbiw	r30, 0x01	; 1
    1ce0:	e6 56       	subi	r30, 0x66	; 102
    1ce2:	f0 40       	sbci	r31, 0x00	; 0
    1ce4:	82 2f       	mov	r24, r18
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	8e 17       	cp	r24, r30
    1cea:	9f 07       	cpc	r25, r31
    1cec:	68 f4       	brcc	.+26     	; 0x1d08 <main+0x46a>
						newPlayer.name[i] = newPlayerName[i];
    1cee:	e5 e7       	ldi	r30, 0x75	; 117
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	ec 0f       	add	r30, r28
    1cf4:	fd 1f       	adc	r31, r29
    1cf6:	e8 0f       	add	r30, r24
    1cf8:	f9 1f       	adc	r31, r25
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	aa 59       	subi	r26, 0x9A	; 154
    1cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1d00:	8c 91       	ld	r24, X
    1d02:	84 83       	std	Z+4, r24	; 0x04
					//create player i da se vrati na homescreen
					if(players_size == MAX_PLAYERS || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1d04:	2f 5f       	subi	r18, 0xFF	; 255
    1d06:	e6 cf       	rjmp	.-52     	; 0x1cd4 <main+0x436>
						newPlayer.name[i] = newPlayerName[i];
					}
					newPlayer.name[newPlayerNameIndex] = '\0';
    1d08:	e5 e7       	ldi	r30, 0x75	; 117
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	ec 0f       	add	r30, r28
    1d0e:	fd 1f       	adc	r31, r29
    1d10:	e4 0f       	add	r30, r20
    1d12:	f1 1d       	adc	r31, r1
    1d14:	14 82       	std	Z+4, r1	; 0x04
					newPlayer.points = 0;
					newPlayer.clicked = 0;
					newPlayer.color = WHITE;
					players[players_size] = newPlayer;
    1d16:	e6 96       	adiw	r28, 0x36	; 54
    1d18:	1f ae       	std	Y+63, r1	; 0x3f
    1d1a:	e6 97       	sbiw	r28, 0x36	; 54
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	9f ef       	ldi	r25, 0xFF	; 255
    1d20:	e8 96       	adiw	r28, 0x38	; 56
    1d22:	9f af       	std	Y+63, r25	; 0x3f
    1d24:	8e af       	std	Y+62, r24	; 0x3e
    1d26:	e8 97       	sbiw	r28, 0x38	; 56
    1d28:	e9 96       	adiw	r28, 0x39	; 57
    1d2a:	1f ae       	std	Y+63, r1	; 0x3f
    1d2c:	e9 97       	sbiw	r28, 0x39	; 57
    1d2e:	a1 e0       	ldi	r26, 0x01	; 1
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ac 0f       	add	r26, r28
    1d34:	bd 1f       	adc	r27, r29
    1d36:	fb e0       	ldi	r31, 0x0B	; 11
    1d38:	3f 9f       	mul	r19, r31
    1d3a:	a0 0d       	add	r26, r0
    1d3c:	b1 1d       	adc	r27, r1
    1d3e:	11 24       	eor	r1, r1
    1d40:	5c 96       	adiw	r26, 0x1c	; 28
    1d42:	8b e0       	ldi	r24, 0x0B	; 11
    1d44:	fe 01       	movw	r30, r28
    1d46:	eb 58       	subi	r30, 0x8B	; 139
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	01 90       	ld	r0, Z+
    1d4c:	0d 92       	st	X+, r0
    1d4e:	8a 95       	dec	r24
    1d50:	e1 f7       	brne	.-8      	; 0x1d4a <main+0x4ac>
					players_size++;
    1d52:	3f 5f       	subi	r19, 0xFF	; 255
    1d54:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <players_size>
					resetNewPlayerName();
    1d58:	0e 94 72 07 	call	0xee4	; 0xee4 <_Z18resetNewPlayerNamev>
					clrScr();
    1d5c:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					currentPage = HOMESCREEN;
    1d60:	1d 82       	std	Y+5, r1	; 0x05
    1d62:	5c ce       	rjmp	.-840    	; 0x1a1c <main+0x17e>
				}
			}
			
		}else if(currentPage == CHOOSE_PLAYER) {
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <main+0x4cc>
    1d68:	03 c1       	rjmp	.+518    	; 0x1f70 <main+0x6d2>
			drawBackButton();
    1d6a:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1d6e:	8e 01       	movw	r16, r28
    1d70:	04 5e       	subi	r16, 0xE4	; 228
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	9e 01       	movw	r18, r28
    1d76:	23 5e       	subi	r18, 0xE3	; 227
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	ae 01       	movw	r20, r28
    1d7c:	4b 5f       	subi	r20, 0xFB	; 251
    1d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d80:	be 01       	movw	r22, r28
    1d82:	6d 5f       	subi	r22, 0xFD	; 253
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			if(cp_rerender) { //tako da ne radi stalno rerender ako se nista nije promjenilo, puno je responzivnije na ovaj nacin
    1d8e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cp_rerender>
    1d92:	88 23       	and	r24, r24
    1d94:	51 f0       	breq	.+20     	; 0x1daa <main+0x50c>
				showPlayers(players, players_size);
    1d96:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <players_size>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	4d 96       	adiw	r24, 0x1d	; 29
    1d9e:	0e 94 0a 09 	call	0x1214	; 0x1214 <_Z11showPlayersP6Playerh>
				drawStartButton();
    1da2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_Z15drawStartButtonv>
				cp_rerender = 0;	
    1da6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cp_rerender>
			}
			
			if (get_bit(PINB, T_IRQ) == 0) {
    1daa:	b0 99       	sbic	0x16, 0	; 22
    1dac:	37 ce       	rjmp	.-914    	; 0x1a1c <main+0x17e>
				read_touch_coords(&TP_X, &TP_Y);
    1dae:	be 01       	movw	r22, r28
    1db0:	6d 5f       	subi	r22, 0xFD	; 253
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1dbc:	80 90 65 00 	lds	r8, 0x0065	; 0x800065 <players_size>
    1dc0:	88 20       	and	r8, r8
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <main+0x528>
    1dc4:	b1 c0       	rjmp	.+354    	; 0x1f28 <main+0x68a>
					tmp = i > 1 ? 50 : 0;
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1dc6:	ab 80       	ldd	r10, Y+3	; 0x03
    1dc8:	bc 80       	ldd	r11, Y+4	; 0x04
    1dca:	c9 80       	ldd	r12, Y+1	; 0x01
    1dcc:	da 80       	ldd	r13, Y+2	; 0x02
    1dce:	91 2c       	mov	r9, r1
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1dd2:	0f 2e       	mov	r0, r31
    1dd4:	f2 e8       	ldi	r31, 0x82	; 130
    1dd6:	7f 2e       	mov	r7, r31
    1dd8:	f0 2d       	mov	r31, r0
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1dda:	61 2c       	mov	r6, r1
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <main+0x54c>
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	29 15       	cp	r18, r9
    1de2:	10 f0       	brcs	.+4      	; 0x1de8 <main+0x54a>
    1de4:	46 2d       	mov	r20, r6
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <main+0x54c>
    1de8:	42 e3       	ldi	r20, 0x32	; 50
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1dea:	90 fa       	bst	r9, 0
    1dec:	44 24       	eor	r4, r4
    1dee:	40 f8       	bld	r4, 0
    1df0:	51 2c       	mov	r5, r1
    1df2:	74 9c       	mul	r7, r4
    1df4:	90 01       	movw	r18, r0
    1df6:	75 9c       	mul	r7, r5
    1df8:	30 0d       	add	r19, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2c 5e       	subi	r18, 0xEC	; 236
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	4a 5b       	subi	r20, 0xBA	; 186
    1e04:	5f 4f       	sbci	r21, 0xFF	; 255
    1e06:	0f 2e       	mov	r0, r31
    1e08:	f8 e7       	ldi	r31, 0x78	; 120
    1e0a:	ef 2e       	mov	r14, r31
    1e0c:	f1 2c       	mov	r15, r1
    1e0e:	f0 2d       	mov	r31, r0
    1e10:	08 e2       	ldi	r16, 0x28	; 40
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	b5 01       	movw	r22, r10
    1e16:	c6 01       	movw	r24, r12
    1e18:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1e1c:	88 23       	and	r24, r24
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <main+0x584>
    1e20:	80 c0       	rjmp	.+256    	; 0x1f22 <main+0x684>
						if(players[i].color == WHITE && cross_chosen == NONE) {
    1e22:	29 2d       	mov	r18, r9
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	e1 e0       	ldi	r30, 0x01	; 1
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	ec 0f       	add	r30, r28
    1e2c:	fd 1f       	adc	r31, r29
    1e2e:	4b e0       	ldi	r20, 0x0B	; 11
    1e30:	94 9e       	mul	r9, r20
    1e32:	e0 0d       	add	r30, r0
    1e34:	f1 1d       	adc	r31, r1
    1e36:	11 24       	eor	r1, r1
    1e38:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e3a:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3e:	ef ef       	ldi	r30, 0xFF	; 255
    1e40:	9e 07       	cpc	r25, r30
    1e42:	99 f5       	brne	.+102    	; 0x1eaa <main+0x60c>
    1e44:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cross_chosen>
    1e48:	85 30       	cpi	r24, 0x05	; 5
    1e4a:	a9 f4       	brne	.+42     	; 0x1e76 <main+0x5d8>
							players[i].color = RED;
    1e4c:	8b e0       	ldi	r24, 0x0B	; 11
    1e4e:	82 9f       	mul	r24, r18
    1e50:	f0 01       	movw	r30, r0
    1e52:	83 9f       	mul	r24, r19
    1e54:	f0 0d       	add	r31, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	8c 0f       	add	r24, r28
    1e5e:	9d 1f       	adc	r25, r29
    1e60:	e8 0f       	add	r30, r24
    1e62:	f9 1f       	adc	r31, r25
    1e64:	89 e6       	ldi	r24, 0x69	; 105
    1e66:	93 ed       	ldi	r25, 0xD3	; 211
    1e68:	96 8f       	std	Z+30, r25	; 0x1e
    1e6a:	85 8f       	std	Z+29, r24	; 0x1d
							players[i].clicked = 1;
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	97 8f       	std	Z+31, r25	; 0x1f
							cross_chosen = i;
    1e70:	90 92 64 00 	sts	0x0064, r9	; 0x800064 <cross_chosen>
    1e74:	4a c0       	rjmp	.+148    	; 0x1f0a <main+0x66c>
						}else if(players[i].color == WHITE && cross_chosen != 5 && nought_chosen == NONE) {
    1e76:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <nought_chosen>
    1e7a:	85 30       	cpi	r24, 0x05	; 5
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <main+0x5e2>
    1e7e:	45 c0       	rjmp	.+138    	; 0x1f0a <main+0x66c>
							players[i].color = GREEN;
    1e80:	8b e0       	ldi	r24, 0x0B	; 11
    1e82:	82 9f       	mul	r24, r18
    1e84:	f0 01       	movw	r30, r0
    1e86:	83 9f       	mul	r24, r19
    1e88:	f0 0d       	add	r31, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	8c 0f       	add	r24, r28
    1e92:	9d 1f       	adc	r25, r29
    1e94:	e8 0f       	add	r30, r24
    1e96:	f9 1f       	adc	r31, r25
    1e98:	8b e2       	ldi	r24, 0x2B	; 43
    1e9a:	97 ec       	ldi	r25, 0xC7	; 199
    1e9c:	96 8f       	std	Z+30, r25	; 0x1e
    1e9e:	85 8f       	std	Z+29, r24	; 0x1d
							players[i].clicked = 1;
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	97 8f       	std	Z+31, r25	; 0x1f
							nought_chosen = i;
    1ea4:	90 92 63 00 	sts	0x0063, r9	; 0x800063 <nought_chosen>
    1ea8:	30 c0       	rjmp	.+96     	; 0x1f0a <main+0x66c>
						}else if(players[i].color == RED) {
    1eaa:	89 36       	cpi	r24, 0x69	; 105
    1eac:	e3 ed       	ldi	r30, 0xD3	; 211
    1eae:	9e 07       	cpc	r25, r30
    1eb0:	a9 f4       	brne	.+42     	; 0x1edc <main+0x63e>
							players[i].color = WHITE;
    1eb2:	8b e0       	ldi	r24, 0x0B	; 11
    1eb4:	82 9f       	mul	r24, r18
    1eb6:	f0 01       	movw	r30, r0
    1eb8:	83 9f       	mul	r24, r19
    1eba:	f0 0d       	add	r31, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	8c 0f       	add	r24, r28
    1ec4:	9d 1f       	adc	r25, r29
    1ec6:	e8 0f       	add	r30, r24
    1ec8:	f9 1f       	adc	r31, r25
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	9f ef       	ldi	r25, 0xFF	; 255
    1ece:	96 8f       	std	Z+30, r25	; 0x1e
    1ed0:	85 8f       	std	Z+29, r24	; 0x1d
							cross_chosen = NONE;
    1ed2:	85 e0       	ldi	r24, 0x05	; 5
    1ed4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cross_chosen>
							players[i].clicked = 0;
    1ed8:	17 8e       	std	Z+31, r1	; 0x1f
    1eda:	17 c0       	rjmp	.+46     	; 0x1f0a <main+0x66c>
						}else if(players[i].color == GREEN) {
    1edc:	8b 32       	cpi	r24, 0x2B	; 43
    1ede:	97 4c       	sbci	r25, 0xC7	; 199
    1ee0:	a1 f4       	brne	.+40     	; 0x1f0a <main+0x66c>
							players[i].color = WHITE;
    1ee2:	8b e0       	ldi	r24, 0x0B	; 11
    1ee4:	82 9f       	mul	r24, r18
    1ee6:	f0 01       	movw	r30, r0
    1ee8:	83 9f       	mul	r24, r19
    1eea:	f0 0d       	add	r31, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	8c 0f       	add	r24, r28
    1ef4:	9d 1f       	adc	r25, r29
    1ef6:	e8 0f       	add	r30, r24
    1ef8:	f9 1f       	adc	r31, r25
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	9f ef       	ldi	r25, 0xFF	; 255
    1efe:	96 8f       	std	Z+30, r25	; 0x1e
    1f00:	85 8f       	std	Z+29, r24	; 0x1d
							nought_chosen = NONE;
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <nought_chosen>
							players[i].clicked = 0;
    1f08:	17 8e       	std	Z+31, r1	; 0x1f
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f0a:	9f ef       	ldi	r25, 0xFF	; 255
    1f0c:	ef e1       	ldi	r30, 0x1F	; 31
    1f0e:	f1 e0       	ldi	r31, 0x01	; 1
    1f10:	91 50       	subi	r25, 0x01	; 1
    1f12:	e0 40       	sbci	r30, 0x00	; 0
    1f14:	f0 40       	sbci	r31, 0x00	; 0
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <main+0x672>
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <main+0x67c>
    1f1a:	00 00       	nop
						}
						_delay_ms(50); //da ne napravi 2 ocitanja
						cp_rerender = 1;
    1f1c:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <cp_rerender>
						break;
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <main+0x68a>
			}
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1f22:	93 94       	inc	r9
    1f24:	98 10       	cpse	r9, r8
    1f26:	5b cf       	rjmp	.-330    	; 0x1dde <main+0x540>
						cp_rerender = 1;
						break;
					}
				}
				
				if(check_touch(TP_X, TP_Y, START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W)) {
    1f28:	6b 81       	ldd	r22, Y+3	; 0x03
    1f2a:	7c 81       	ldd	r23, Y+4	; 0x04
    1f2c:	0f 2e       	mov	r0, r31
    1f2e:	fa e5       	ldi	r31, 0x5A	; 90
    1f30:	ef 2e       	mov	r14, r31
    1f32:	f1 2c       	mov	r15, r1
    1f34:	f0 2d       	mov	r31, r0
    1f36:	08 e2       	ldi	r16, 0x28	; 40
    1f38:	10 e0       	ldi	r17, 0x00	; 0
    1f3a:	2c ed       	ldi	r18, 0xDC	; 220
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4e eb       	ldi	r20, 0xBE	; 190
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <main+0x6b2>
    1f4e:	66 cd       	rjmp	.-1332   	; 0x1a1c <main+0x17e>
					if(cross_chosen != NONE && nought_chosen != NONE){ //ne moze uc u game ako nije odabrao dvojicu
    1f50:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cross_chosen>
    1f54:	85 30       	cpi	r24, 0x05	; 5
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <main+0x6bc>
    1f58:	61 cd       	rjmp	.-1342   	; 0x1a1c <main+0x17e>
    1f5a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <nought_chosen>
    1f5e:	85 30       	cpi	r24, 0x05	; 5
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <main+0x6c6>
    1f62:	5c cd       	rjmp	.-1352   	; 0x1a1c <main+0x17e>
						clrScr();
    1f64:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						currentPage = GAME;
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
						game_rerender = 1; //dok ovo nisam napravio, prvi put nakon sta si stisnuo back i usao u GAME ovo bi bilo 0 iako se unutar checkBackButton to stavi na 1 ?????
    1f6c:	3c 8e       	std	Y+28, r3	; 0x1c
    1f6e:	56 cd       	rjmp	.-1364   	; 0x1a1c <main+0x17e>
					}
				}
			}
		}else if(currentPage == LEADERBOARDS) {
    1f70:	83 30       	cpi	r24, 0x03	; 3
    1f72:	c9 f4       	brne	.+50     	; 0x1fa6 <main+0x708>
			drawBackButton();
    1f74:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1f78:	8e 01       	movw	r16, r28
    1f7a:	04 5e       	subi	r16, 0xE4	; 228
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	9e 01       	movw	r18, r28
    1f80:	23 5e       	subi	r18, 0xE3	; 227
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	ae 01       	movw	r20, r28
    1f86:	4b 5f       	subi	r20, 0xFB	; 251
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	be 01       	movw	r22, r28
    1f8c:	6d 5f       	subi	r22, 0xFD	; 253
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	ce 01       	movw	r24, r28
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//printLeaderboards(players, sizeof(players) / sizeof(players[0])); //moras prije nego saljes u funkciju jer se u funkciju salje samo pointer, ali ovo ce ti poslat za koliko njih je alocirano mjesta, a ne koliko ih je stvarno unutra
			printLeaderboards(players, players_size);
    1f98:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <players_size>
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	4d 96       	adiw	r24, 0x1d	; 29
    1fa0:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z17printLeaderboardsP6Playerh>
    1fa4:	3b cd       	rjmp	.-1418   	; 0x1a1c <main+0x17e>
		}else if(currentPage == GAME) {
    1fa6:	84 30       	cpi	r24, 0x04	; 4
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <main+0x70e>
    1faa:	38 cd       	rjmp	.-1424   	; 0x1a1c <main+0x17e>
			drawBackButton();
    1fac:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	04 5e       	subi	r16, 0xE4	; 228
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	9e 01       	movw	r18, r28
    1fb8:	23 5e       	subi	r18, 0xE3	; 227
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	ae 01       	movw	r20, r28
    1fbe:	4b 5f       	subi	r20, 0xFB	; 251
    1fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc2:	be 01       	movw	r22, r28
    1fc4:	6d 5f       	subi	r22, 0xFD	; 253
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	ce 01       	movw	r24, r28
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//drawNames(players);
			//drawGrid();
			//char tmp[2];
			//sprintf(tmp, "%d\0", game_rerender);
			//print_string(200, 10, 2, WHITE, CYAN, tmp);
			if(gameOver && check_touch(TP_X, TP_Y, TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W)) { //TRY AGAIN
    1fd0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1fd4:	88 23       	and	r24, r24
    1fd6:	f1 f0       	breq	.+60     	; 0x2014 <main+0x776>
    1fd8:	6b 81       	ldd	r22, Y+3	; 0x03
    1fda:	7c 81       	ldd	r23, Y+4	; 0x04
    1fdc:	0f 2e       	mov	r0, r31
    1fde:	f9 e6       	ldi	r31, 0x69	; 105
    1fe0:	ef 2e       	mov	r14, r31
    1fe2:	f1 2c       	mov	r15, r1
    1fe4:	f0 2d       	mov	r31, r0
    1fe6:	0e e1       	ldi	r16, 0x1E	; 30
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	2a e0       	ldi	r18, 0x0A	; 10
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	48 ec       	ldi	r20, 0xC8	; 200
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <main+0x762>
    1ffe:	0e cd       	rjmp	.-1508   	; 0x1a1c <main+0x17e>
				resetGame();
    2000:	0e 94 a1 07 	call	0xf42	; 0xf42 <_Z9resetGamev>
				clrScr();
    2004:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
				game_rerender = 1;
    2008:	3c 8e       	std	Y+28, r3	; 0x1c
			}
			
			if(gameOver) continue;
    200a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    200e:	81 11       	cpse	r24, r1
    2010:	05 cd       	rjmp	.-1526   	; 0x1a1c <main+0x17e>
    2012:	03 c0       	rjmp	.+6      	; 0x201a <main+0x77c>
			
			if(game_rerender) { //da se rerendera tek kad se desi promjena, ne znam zasto se ne rendera kad prvi put udes unutra nakon sta si BACK button stisnuo, ako ne uspijes rjesit onda pusti bez ovog if-a pa ce bit malo manje responzivno --uspio
    2014:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2016:	88 23       	and	r24, r24
    2018:	79 f0       	breq	.+30     	; 0x2038 <main+0x79a>
				drawNames(players); //zbog nekog razloga kad ude tu ponovo vrijednost od game_rerender je 0 ??? --uspio ali svejedno ne kuzim zasto se to desava ??
    201a:	ce 01       	movw	r24, r28
    201c:	4d 96       	adiw	r24, 0x1d	; 29
    201e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z9drawNamesP6Player>
				drawGrid();
    2022:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_Z8drawGridv>
				checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
    2026:	ce 01       	movw	r24, r28
    2028:	4d 96       	adiw	r24, 0x1d	; 29
    202a:	0e 94 26 0b 	call	0x164c	; 0x164c <_Z13checkGameOverP6Player>
				drawTurn(players);
    202e:	ce 01       	movw	r24, r28
    2030:	4d 96       	adiw	r24, 0x1d	; 29
    2032:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_Z8drawTurnP6Player>
				game_rerender = 0;
    2036:	1c 8e       	std	Y+28, r1	; 0x1c
			}
			
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
    2038:	b0 99       	sbic	0x16, 0	; 22
    203a:	f0 cc       	rjmp	.-1568   	; 0x1a1c <main+0x17e>
				read_touch_coords(&TP_X, &TP_Y);
    203c:	be 01       	movw	r22, r28
    203e:	6d 5f       	subi	r22, 0xFD	; 253
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	ce 01       	movw	r24, r28
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
    204a:	8e eb       	ldi	r24, 0xBE	; 190
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	cc 57       	subi	r28, 0x7C	; 124
    2050:	df 4f       	sbci	r29, 0xFF	; 255
    2052:	99 83       	std	Y+1, r25	; 0x01
    2054:	88 83       	st	Y, r24
    2056:	c4 58       	subi	r28, 0x84	; 132
    2058:	d0 40       	sbci	r29, 0x00	; 0
    205a:	0e e6       	ldi	r16, 0x6E	; 110
    205c:	10 e0       	ldi	r17, 0x00	; 0
    205e:	61 2c       	mov	r6, r1
    2060:	71 2c       	mov	r7, r1
    2062:	c5 57       	subi	r28, 0x75	; 117
    2064:	df 4f       	sbci	r29, 0xFF	; 255
    2066:	59 82       	std	Y+1, r5	; 0x01
    2068:	48 82       	st	Y, r4
    206a:	cb 58       	subi	r28, 0x8B	; 139
    206c:	d0 40       	sbci	r29, 0x00	; 0
    206e:	c6 57       	subi	r28, 0x76	; 118
    2070:	df 4f       	sbci	r29, 0xFF	; 255
    2072:	38 82       	st	Y, r3
    2074:	ca 58       	subi	r28, 0x8A	; 138
    2076:	d0 40       	sbci	r29, 0x00	; 0
    2078:	18 01       	movw	r2, r16
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
						if(check_touch(TP_X, TP_Y, GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE, GRID_BLOCK_SIZE, GRID_BLOCK_SIZE)) {
    207a:	c8 57       	subi	r28, 0x78	; 120
    207c:	df 4f       	sbci	r29, 0xFF	; 255
    207e:	79 82       	std	Y+1, r7	; 0x01
    2080:	68 82       	st	Y, r6
    2082:	c8 58       	subi	r28, 0x88	; 136
    2084:	d0 40       	sbci	r29, 0x00	; 0
    2086:	eb 81       	ldd	r30, Y+3	; 0x03
    2088:	fc 81       	ldd	r31, Y+4	; 0x04
    208a:	c0 58       	subi	r28, 0x80	; 128
    208c:	df 4f       	sbci	r29, 0xFF	; 255
    208e:	f9 83       	std	Y+1, r31	; 0x01
    2090:	e8 83       	st	Y, r30
    2092:	c0 58       	subi	r28, 0x80	; 128
    2094:	d0 40       	sbci	r29, 0x00	; 0
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	ce 57       	subi	r28, 0x7E	; 126
    209c:	df 4f       	sbci	r29, 0xFF	; 255
    209e:	99 83       	std	Y+1, r25	; 0x01
    20a0:	88 83       	st	Y, r24
    20a2:	c2 58       	subi	r28, 0x82	; 130
    20a4:	d0 40       	sbci	r29, 0x00	; 0
    20a6:	cc 57       	subi	r28, 0x7C	; 124
    20a8:	df 4f       	sbci	r29, 0xFF	; 255
    20aa:	88 80       	ld	r8, Y
    20ac:	99 80       	ldd	r9, Y+1	; 0x01
    20ae:	c4 58       	subi	r28, 0x84	; 132
    20b0:	d0 40       	sbci	r29, 0x00	; 0
    20b2:	0f 2e       	mov	r0, r31
    20b4:	fd e2       	ldi	r31, 0x2D	; 45
    20b6:	af 2e       	mov	r10, r31
    20b8:	b1 2c       	mov	r11, r1
    20ba:	f0 2d       	mov	r31, r0
    20bc:	c1 2c       	mov	r12, r1
    20be:	d1 2c       	mov	r13, r1
    20c0:	ca 57       	subi	r28, 0x7A	; 122
    20c2:	df 4f       	sbci	r29, 0xFF	; 255
    20c4:	79 82       	std	Y+1, r7	; 0x01
    20c6:	68 82       	st	Y, r6
    20c8:	c6 58       	subi	r28, 0x86	; 134
    20ca:	d0 40       	sbci	r29, 0x00	; 0
    20cc:	26 01       	movw	r4, r12
    20ce:	0f 2e       	mov	r0, r31
    20d0:	fe e3       	ldi	r31, 0x3E	; 62
    20d2:	ef 2e       	mov	r14, r31
    20d4:	f1 2c       	mov	r15, r1
    20d6:	f0 2d       	mov	r31, r0
    20d8:	0e e3       	ldi	r16, 0x3E	; 62
    20da:	10 e0       	ldi	r17, 0x00	; 0
    20dc:	91 01       	movw	r18, r2
    20de:	a5 01       	movw	r20, r10
    20e0:	c0 58       	subi	r28, 0x80	; 128
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	68 81       	ld	r22, Y
    20e6:	79 81       	ldd	r23, Y+1	; 0x01
    20e8:	c0 58       	subi	r28, 0x80	; 128
    20ea:	d0 40       	sbci	r29, 0x00	; 0
    20ec:	ce 57       	subi	r28, 0x7E	; 126
    20ee:	df 4f       	sbci	r29, 0xFF	; 255
    20f0:	88 81       	ld	r24, Y
    20f2:	99 81       	ldd	r25, Y+1	; 0x01
    20f4:	c2 58       	subi	r28, 0x82	; 130
    20f6:	d0 40       	sbci	r29, 0x00	; 0
    20f8:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    20fc:	88 23       	and	r24, r24
    20fe:	c1 f1       	breq	.+112    	; 0x2170 <main+0x8d2>
							if(board[i][j] == EMPTY) { //ovo sa konstantama
    2100:	f4 01       	movw	r30, r8
    2102:	80 81       	ld	r24, Z
    2104:	81 11       	cpse	r24, r1
    2106:	34 c0       	rjmp	.+104    	; 0x2170 <main+0x8d2>
    2108:	82 01       	movw	r16, r4
    210a:	ca 57       	subi	r28, 0x7A	; 122
    210c:	df 4f       	sbci	r29, 0xFF	; 255
    210e:	68 80       	ld	r6, Y
    2110:	79 80       	ldd	r7, Y+1	; 0x01
    2112:	c6 58       	subi	r28, 0x86	; 134
    2114:	d0 40       	sbci	r29, 0x00	; 0
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
    2116:	c8 57       	subi	r28, 0x78	; 120
    2118:	df 4f       	sbci	r29, 0xFF	; 255
    211a:	e8 81       	ld	r30, Y
    211c:	f9 81       	ldd	r31, Y+1	; 0x01
    211e:	c8 58       	subi	r28, 0x88	; 136
    2120:	d0 40       	sbci	r29, 0x00	; 0
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	c8 57       	subi	r28, 0x78	; 120
    2128:	df 4f       	sbci	r29, 0xFF	; 255
    212a:	88 81       	ld	r24, Y
    212c:	99 81       	ldd	r25, Y+1	; 0x01
    212e:	c8 58       	subi	r28, 0x88	; 136
    2130:	d0 40       	sbci	r29, 0x00	; 0
    2132:	e8 0f       	add	r30, r24
    2134:	f9 1f       	adc	r31, r25
    2136:	e2 54       	subi	r30, 0x42	; 66
    2138:	fe 4f       	sbci	r31, 0xFE	; 254
    213a:	e0 0f       	add	r30, r16
    213c:	f1 1f       	adc	r31, r17
    213e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2142:	80 83       	st	Z, r24
								numberOfMoves++;
    2144:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
								currentPlayer = drawOnGrid(GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
    214e:	9e e3       	ldi	r25, 0x3E	; 62
    2150:	c9 9e       	mul	r12, r25
    2152:	80 2d       	mov	r24, r0
    2154:	11 24       	eor	r1, r1
    2156:	62 2d       	mov	r22, r2
    2158:	83 5d       	subi	r24, 0xD3	; 211
    215a:	0e 94 08 0b 	call	0x1610	; 0x1610 <_Z10drawOnGridhh>
    215e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
								game_rerender = 1;
    2162:	c6 57       	subi	r28, 0x76	; 118
    2164:	df 4f       	sbci	r29, 0xFF	; 255
    2166:	e8 81       	ld	r30, Y
    2168:	ca 58       	subi	r28, 0x8A	; 138
    216a:	d0 40       	sbci	r29, 0x00	; 0
    216c:	ec 8f       	std	Y+28, r30	; 0x1c
								break;
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <main+0x8fa>
    2170:	ff ef       	ldi	r31, 0xFF	; 255
    2172:	cf 1a       	sub	r12, r31
    2174:	df 0a       	sbc	r13, r31
    2176:	2e e3       	ldi	r18, 0x3E	; 62
    2178:	a2 0e       	add	r10, r18
    217a:	b1 1c       	adc	r11, r1
    217c:	4f ef       	ldi	r20, 0xFF	; 255
    217e:	84 1a       	sub	r8, r20
    2180:	94 0a       	sbc	r9, r20
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	c8 16       	cp	r12, r24
    2186:	d1 04       	cpc	r13, r1
    2188:	09 f0       	breq	.+2      	; 0x218c <main+0x8ee>
    218a:	a0 cf       	rjmp	.-192    	; 0x20cc <main+0x82e>
    218c:	ca 57       	subi	r28, 0x7A	; 122
    218e:	df 4f       	sbci	r29, 0xFF	; 255
    2190:	68 80       	ld	r6, Y
    2192:	79 80       	ldd	r7, Y+1	; 0x01
    2194:	c6 58       	subi	r28, 0x86	; 134
    2196:	d0 40       	sbci	r29, 0x00	; 0
    2198:	9f ef       	ldi	r25, 0xFF	; 255
    219a:	69 1a       	sub	r6, r25
    219c:	79 0a       	sbc	r7, r25
    219e:	cc 57       	subi	r28, 0x7C	; 124
    21a0:	df 4f       	sbci	r29, 0xFF	; 255
    21a2:	e8 81       	ld	r30, Y
    21a4:	f9 81       	ldd	r31, Y+1	; 0x01
    21a6:	c4 58       	subi	r28, 0x84	; 132
    21a8:	d0 40       	sbci	r29, 0x00	; 0
    21aa:	33 96       	adiw	r30, 0x03	; 3
    21ac:	cc 57       	subi	r28, 0x7C	; 124
    21ae:	df 4f       	sbci	r29, 0xFF	; 255
    21b0:	f9 83       	std	Y+1, r31	; 0x01
    21b2:	e8 83       	st	Y, r30
    21b4:	c4 58       	subi	r28, 0x84	; 132
    21b6:	d0 40       	sbci	r29, 0x00	; 0
    21b8:	fe e3       	ldi	r31, 0x3E	; 62
    21ba:	2f 0e       	add	r2, r31
    21bc:	31 1c       	adc	r3, r1
			
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
    21be:	23 e0       	ldi	r18, 0x03	; 3
    21c0:	62 16       	cp	r6, r18
    21c2:	71 04       	cpc	r7, r1
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <main+0x92a>
    21c6:	59 cf       	rjmp	.-334    	; 0x207a <main+0x7dc>
    21c8:	c5 57       	subi	r28, 0x75	; 117
    21ca:	df 4f       	sbci	r29, 0xFF	; 255
    21cc:	48 80       	ld	r4, Y
    21ce:	59 80       	ldd	r5, Y+1	; 0x01
    21d0:	cb 58       	subi	r28, 0x8B	; 139
    21d2:	d0 40       	sbci	r29, 0x00	; 0
    21d4:	c6 57       	subi	r28, 0x76	; 118
    21d6:	df 4f       	sbci	r29, 0xFF	; 255
    21d8:	38 80       	ld	r3, Y
    21da:	ca 58       	subi	r28, 0x8A	; 138
    21dc:	d0 40       	sbci	r29, 0x00	; 0
    21de:	1e cc       	rjmp	.-1988   	; 0x1a1c <main+0x17e>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
						//_delay_ms(500); //da ne napravi previse ocitanja
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) {
    21e0:	0f 2e       	mov	r0, r31
    21e2:	fc e3       	ldi	r31, 0x3C	; 60
    21e4:	ef 2e       	mov	r14, r31
    21e6:	f1 2c       	mov	r15, r1
    21e8:	f0 2d       	mov	r31, r0
    21ea:	08 e2       	ldi	r16, 0x28	; 40
    21ec:	10 e0       	ldi	r17, 0x00	; 0
    21ee:	24 eb       	ldi	r18, 0xB4	; 180
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4e eb       	ldi	r20, 0xBE	; 190
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	b5 01       	movw	r22, r10
    21f8:	c6 01       	movw	r24, r12
    21fa:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    21fe:	88 23       	and	r24, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <main+0x966>
    2202:	49 cd       	rjmp	.-1390   	; 0x1c96 <main+0x3f8>
    2204:	10 cd       	rjmp	.-1504   	; 0x1c26 <main+0x388>

00002206 <__umulhisi3>:
    2206:	a2 9f       	mul	r26, r18
    2208:	b0 01       	movw	r22, r0
    220a:	b3 9f       	mul	r27, r19
    220c:	c0 01       	movw	r24, r0
    220e:	a3 9f       	mul	r26, r19
    2210:	70 0d       	add	r23, r0
    2212:	81 1d       	adc	r24, r1
    2214:	11 24       	eor	r1, r1
    2216:	91 1d       	adc	r25, r1
    2218:	b2 9f       	mul	r27, r18
    221a:	70 0d       	add	r23, r0
    221c:	81 1d       	adc	r24, r1
    221e:	11 24       	eor	r1, r1
    2220:	91 1d       	adc	r25, r1
    2222:	08 95       	ret

00002224 <sprintf>:
    2224:	ae e0       	ldi	r26, 0x0E	; 14
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e1       	ldi	r30, 0x18	; 24
    222a:	f1 e1       	ldi	r31, 0x11	; 17
    222c:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__+0x1c>
    2230:	0d 89       	ldd	r16, Y+21	; 0x15
    2232:	1e 89       	ldd	r17, Y+22	; 0x16
    2234:	86 e0       	ldi	r24, 0x06	; 6
    2236:	8c 83       	std	Y+4, r24	; 0x04
    2238:	1a 83       	std	Y+2, r17	; 0x02
    223a:	09 83       	std	Y+1, r16	; 0x01
    223c:	8f ef       	ldi	r24, 0xFF	; 255
    223e:	9f e7       	ldi	r25, 0x7F	; 127
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	ae 01       	movw	r20, r28
    2246:	47 5e       	subi	r20, 0xE7	; 231
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	6f 89       	ldd	r22, Y+23	; 0x17
    224c:	78 8d       	ldd	r23, Y+24	; 0x18
    224e:	ce 01       	movw	r24, r28
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	0e 94 34 11 	call	0x2268	; 0x2268 <vfprintf>
    2256:	ef 81       	ldd	r30, Y+7	; 0x07
    2258:	f8 85       	ldd	r31, Y+8	; 0x08
    225a:	e0 0f       	add	r30, r16
    225c:	f1 1f       	adc	r31, r17
    225e:	10 82       	st	Z, r1
    2260:	2e 96       	adiw	r28, 0x0e	; 14
    2262:	e4 e0       	ldi	r30, 0x04	; 4
    2264:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__+0x1c>

00002268 <vfprintf>:
    2268:	ab e0       	ldi	r26, 0x0B	; 11
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	ea e3       	ldi	r30, 0x3A	; 58
    226e:	f1 e1       	ldi	r31, 0x11	; 17
    2270:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__prologue_saves__>
    2274:	6c 01       	movw	r12, r24
    2276:	7b 01       	movw	r14, r22
    2278:	8a 01       	movw	r16, r20
    227a:	fc 01       	movw	r30, r24
    227c:	17 82       	std	Z+7, r1	; 0x07
    227e:	16 82       	std	Z+6, r1	; 0x06
    2280:	83 81       	ldd	r24, Z+3	; 0x03
    2282:	81 ff       	sbrs	r24, 1
    2284:	cc c1       	rjmp	.+920    	; 0x261e <vfprintf+0x3b6>
    2286:	ce 01       	movw	r24, r28
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	3c 01       	movw	r6, r24
    228c:	f6 01       	movw	r30, r12
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	f7 01       	movw	r30, r14
    2292:	93 fd       	sbrc	r25, 3
    2294:	85 91       	lpm	r24, Z+
    2296:	93 ff       	sbrs	r25, 3
    2298:	81 91       	ld	r24, Z+
    229a:	7f 01       	movw	r14, r30
    229c:	88 23       	and	r24, r24
    229e:	09 f4       	brne	.+2      	; 0x22a2 <vfprintf+0x3a>
    22a0:	ba c1       	rjmp	.+884    	; 0x2616 <vfprintf+0x3ae>
    22a2:	85 32       	cpi	r24, 0x25	; 37
    22a4:	39 f4       	brne	.+14     	; 0x22b4 <vfprintf+0x4c>
    22a6:	93 fd       	sbrc	r25, 3
    22a8:	85 91       	lpm	r24, Z+
    22aa:	93 ff       	sbrs	r25, 3
    22ac:	81 91       	ld	r24, Z+
    22ae:	7f 01       	movw	r14, r30
    22b0:	85 32       	cpi	r24, 0x25	; 37
    22b2:	29 f4       	brne	.+10     	; 0x22be <vfprintf+0x56>
    22b4:	b6 01       	movw	r22, r12
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    22bc:	e7 cf       	rjmp	.-50     	; 0x228c <vfprintf+0x24>
    22be:	91 2c       	mov	r9, r1
    22c0:	21 2c       	mov	r2, r1
    22c2:	31 2c       	mov	r3, r1
    22c4:	ff e1       	ldi	r31, 0x1F	; 31
    22c6:	f3 15       	cp	r31, r3
    22c8:	d8 f0       	brcs	.+54     	; 0x2300 <vfprintf+0x98>
    22ca:	8b 32       	cpi	r24, 0x2B	; 43
    22cc:	79 f0       	breq	.+30     	; 0x22ec <vfprintf+0x84>
    22ce:	38 f4       	brcc	.+14     	; 0x22de <vfprintf+0x76>
    22d0:	80 32       	cpi	r24, 0x20	; 32
    22d2:	79 f0       	breq	.+30     	; 0x22f2 <vfprintf+0x8a>
    22d4:	83 32       	cpi	r24, 0x23	; 35
    22d6:	a1 f4       	brne	.+40     	; 0x2300 <vfprintf+0x98>
    22d8:	23 2d       	mov	r18, r3
    22da:	20 61       	ori	r18, 0x10	; 16
    22dc:	1d c0       	rjmp	.+58     	; 0x2318 <vfprintf+0xb0>
    22de:	8d 32       	cpi	r24, 0x2D	; 45
    22e0:	61 f0       	breq	.+24     	; 0x22fa <vfprintf+0x92>
    22e2:	80 33       	cpi	r24, 0x30	; 48
    22e4:	69 f4       	brne	.+26     	; 0x2300 <vfprintf+0x98>
    22e6:	23 2d       	mov	r18, r3
    22e8:	21 60       	ori	r18, 0x01	; 1
    22ea:	16 c0       	rjmp	.+44     	; 0x2318 <vfprintf+0xb0>
    22ec:	83 2d       	mov	r24, r3
    22ee:	82 60       	ori	r24, 0x02	; 2
    22f0:	38 2e       	mov	r3, r24
    22f2:	e3 2d       	mov	r30, r3
    22f4:	e4 60       	ori	r30, 0x04	; 4
    22f6:	3e 2e       	mov	r3, r30
    22f8:	2a c0       	rjmp	.+84     	; 0x234e <vfprintf+0xe6>
    22fa:	f3 2d       	mov	r31, r3
    22fc:	f8 60       	ori	r31, 0x08	; 8
    22fe:	1d c0       	rjmp	.+58     	; 0x233a <vfprintf+0xd2>
    2300:	37 fc       	sbrc	r3, 7
    2302:	2d c0       	rjmp	.+90     	; 0x235e <vfprintf+0xf6>
    2304:	20 ed       	ldi	r18, 0xD0	; 208
    2306:	28 0f       	add	r18, r24
    2308:	2a 30       	cpi	r18, 0x0A	; 10
    230a:	40 f0       	brcs	.+16     	; 0x231c <vfprintf+0xb4>
    230c:	8e 32       	cpi	r24, 0x2E	; 46
    230e:	b9 f4       	brne	.+46     	; 0x233e <vfprintf+0xd6>
    2310:	36 fc       	sbrc	r3, 6
    2312:	81 c1       	rjmp	.+770    	; 0x2616 <vfprintf+0x3ae>
    2314:	23 2d       	mov	r18, r3
    2316:	20 64       	ori	r18, 0x40	; 64
    2318:	32 2e       	mov	r3, r18
    231a:	19 c0       	rjmp	.+50     	; 0x234e <vfprintf+0xe6>
    231c:	36 fe       	sbrs	r3, 6
    231e:	06 c0       	rjmp	.+12     	; 0x232c <vfprintf+0xc4>
    2320:	8a e0       	ldi	r24, 0x0A	; 10
    2322:	98 9e       	mul	r9, r24
    2324:	20 0d       	add	r18, r0
    2326:	11 24       	eor	r1, r1
    2328:	92 2e       	mov	r9, r18
    232a:	11 c0       	rjmp	.+34     	; 0x234e <vfprintf+0xe6>
    232c:	ea e0       	ldi	r30, 0x0A	; 10
    232e:	2e 9e       	mul	r2, r30
    2330:	20 0d       	add	r18, r0
    2332:	11 24       	eor	r1, r1
    2334:	22 2e       	mov	r2, r18
    2336:	f3 2d       	mov	r31, r3
    2338:	f0 62       	ori	r31, 0x20	; 32
    233a:	3f 2e       	mov	r3, r31
    233c:	08 c0       	rjmp	.+16     	; 0x234e <vfprintf+0xe6>
    233e:	8c 36       	cpi	r24, 0x6C	; 108
    2340:	21 f4       	brne	.+8      	; 0x234a <vfprintf+0xe2>
    2342:	83 2d       	mov	r24, r3
    2344:	80 68       	ori	r24, 0x80	; 128
    2346:	38 2e       	mov	r3, r24
    2348:	02 c0       	rjmp	.+4      	; 0x234e <vfprintf+0xe6>
    234a:	88 36       	cpi	r24, 0x68	; 104
    234c:	41 f4       	brne	.+16     	; 0x235e <vfprintf+0xf6>
    234e:	f7 01       	movw	r30, r14
    2350:	93 fd       	sbrc	r25, 3
    2352:	85 91       	lpm	r24, Z+
    2354:	93 ff       	sbrs	r25, 3
    2356:	81 91       	ld	r24, Z+
    2358:	7f 01       	movw	r14, r30
    235a:	81 11       	cpse	r24, r1
    235c:	b3 cf       	rjmp	.-154    	; 0x22c4 <vfprintf+0x5c>
    235e:	98 2f       	mov	r25, r24
    2360:	9f 7d       	andi	r25, 0xDF	; 223
    2362:	95 54       	subi	r25, 0x45	; 69
    2364:	93 30       	cpi	r25, 0x03	; 3
    2366:	28 f4       	brcc	.+10     	; 0x2372 <vfprintf+0x10a>
    2368:	0c 5f       	subi	r16, 0xFC	; 252
    236a:	1f 4f       	sbci	r17, 0xFF	; 255
    236c:	9f e3       	ldi	r25, 0x3F	; 63
    236e:	99 83       	std	Y+1, r25	; 0x01
    2370:	0d c0       	rjmp	.+26     	; 0x238c <vfprintf+0x124>
    2372:	83 36       	cpi	r24, 0x63	; 99
    2374:	31 f0       	breq	.+12     	; 0x2382 <vfprintf+0x11a>
    2376:	83 37       	cpi	r24, 0x73	; 115
    2378:	71 f0       	breq	.+28     	; 0x2396 <vfprintf+0x12e>
    237a:	83 35       	cpi	r24, 0x53	; 83
    237c:	09 f0       	breq	.+2      	; 0x2380 <vfprintf+0x118>
    237e:	59 c0       	rjmp	.+178    	; 0x2432 <vfprintf+0x1ca>
    2380:	21 c0       	rjmp	.+66     	; 0x23c4 <vfprintf+0x15c>
    2382:	f8 01       	movw	r30, r16
    2384:	80 81       	ld	r24, Z
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	0e 5f       	subi	r16, 0xFE	; 254
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	88 24       	eor	r8, r8
    238e:	83 94       	inc	r8
    2390:	91 2c       	mov	r9, r1
    2392:	53 01       	movw	r10, r6
    2394:	13 c0       	rjmp	.+38     	; 0x23bc <vfprintf+0x154>
    2396:	28 01       	movw	r4, r16
    2398:	f2 e0       	ldi	r31, 0x02	; 2
    239a:	4f 0e       	add	r4, r31
    239c:	51 1c       	adc	r5, r1
    239e:	f8 01       	movw	r30, r16
    23a0:	a0 80       	ld	r10, Z
    23a2:	b1 80       	ldd	r11, Z+1	; 0x01
    23a4:	36 fe       	sbrs	r3, 6
    23a6:	03 c0       	rjmp	.+6      	; 0x23ae <vfprintf+0x146>
    23a8:	69 2d       	mov	r22, r9
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <vfprintf+0x14a>
    23ae:	6f ef       	ldi	r22, 0xFF	; 255
    23b0:	7f ef       	ldi	r23, 0xFF	; 255
    23b2:	c5 01       	movw	r24, r10
    23b4:	0e 94 20 13 	call	0x2640	; 0x2640 <strnlen>
    23b8:	4c 01       	movw	r8, r24
    23ba:	82 01       	movw	r16, r4
    23bc:	f3 2d       	mov	r31, r3
    23be:	ff 77       	andi	r31, 0x7F	; 127
    23c0:	3f 2e       	mov	r3, r31
    23c2:	16 c0       	rjmp	.+44     	; 0x23f0 <vfprintf+0x188>
    23c4:	28 01       	movw	r4, r16
    23c6:	22 e0       	ldi	r18, 0x02	; 2
    23c8:	42 0e       	add	r4, r18
    23ca:	51 1c       	adc	r5, r1
    23cc:	f8 01       	movw	r30, r16
    23ce:	a0 80       	ld	r10, Z
    23d0:	b1 80       	ldd	r11, Z+1	; 0x01
    23d2:	36 fe       	sbrs	r3, 6
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <vfprintf+0x174>
    23d6:	69 2d       	mov	r22, r9
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <vfprintf+0x178>
    23dc:	6f ef       	ldi	r22, 0xFF	; 255
    23de:	7f ef       	ldi	r23, 0xFF	; 255
    23e0:	c5 01       	movw	r24, r10
    23e2:	0e 94 15 13 	call	0x262a	; 0x262a <strnlen_P>
    23e6:	4c 01       	movw	r8, r24
    23e8:	f3 2d       	mov	r31, r3
    23ea:	f0 68       	ori	r31, 0x80	; 128
    23ec:	3f 2e       	mov	r3, r31
    23ee:	82 01       	movw	r16, r4
    23f0:	33 fc       	sbrc	r3, 3
    23f2:	1b c0       	rjmp	.+54     	; 0x242a <vfprintf+0x1c2>
    23f4:	82 2d       	mov	r24, r2
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	88 16       	cp	r8, r24
    23fa:	99 06       	cpc	r9, r25
    23fc:	b0 f4       	brcc	.+44     	; 0x242a <vfprintf+0x1c2>
    23fe:	b6 01       	movw	r22, r12
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    2408:	2a 94       	dec	r2
    240a:	f4 cf       	rjmp	.-24     	; 0x23f4 <vfprintf+0x18c>
    240c:	f5 01       	movw	r30, r10
    240e:	37 fc       	sbrc	r3, 7
    2410:	85 91       	lpm	r24, Z+
    2412:	37 fe       	sbrs	r3, 7
    2414:	81 91       	ld	r24, Z+
    2416:	5f 01       	movw	r10, r30
    2418:	b6 01       	movw	r22, r12
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    2420:	21 10       	cpse	r2, r1
    2422:	2a 94       	dec	r2
    2424:	21 e0       	ldi	r18, 0x01	; 1
    2426:	82 1a       	sub	r8, r18
    2428:	91 08       	sbc	r9, r1
    242a:	81 14       	cp	r8, r1
    242c:	91 04       	cpc	r9, r1
    242e:	71 f7       	brne	.-36     	; 0x240c <vfprintf+0x1a4>
    2430:	e8 c0       	rjmp	.+464    	; 0x2602 <vfprintf+0x39a>
    2432:	84 36       	cpi	r24, 0x64	; 100
    2434:	11 f0       	breq	.+4      	; 0x243a <vfprintf+0x1d2>
    2436:	89 36       	cpi	r24, 0x69	; 105
    2438:	41 f5       	brne	.+80     	; 0x248a <vfprintf+0x222>
    243a:	f8 01       	movw	r30, r16
    243c:	37 fe       	sbrs	r3, 7
    243e:	07 c0       	rjmp	.+14     	; 0x244e <vfprintf+0x1e6>
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	0c 5f       	subi	r16, 0xFC	; 252
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	08 c0       	rjmp	.+16     	; 0x245e <vfprintf+0x1f6>
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	07 2e       	mov	r0, r23
    2454:	00 0c       	add	r0, r0
    2456:	88 0b       	sbc	r24, r24
    2458:	99 0b       	sbc	r25, r25
    245a:	0e 5f       	subi	r16, 0xFE	; 254
    245c:	1f 4f       	sbci	r17, 0xFF	; 255
    245e:	f3 2d       	mov	r31, r3
    2460:	ff 76       	andi	r31, 0x6F	; 111
    2462:	3f 2e       	mov	r3, r31
    2464:	97 ff       	sbrs	r25, 7
    2466:	09 c0       	rjmp	.+18     	; 0x247a <vfprintf+0x212>
    2468:	90 95       	com	r25
    246a:	80 95       	com	r24
    246c:	70 95       	com	r23
    246e:	61 95       	neg	r22
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	8f 4f       	sbci	r24, 0xFF	; 255
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	f0 68       	ori	r31, 0x80	; 128
    2478:	3f 2e       	mov	r3, r31
    247a:	2a e0       	ldi	r18, 0x0A	; 10
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	a3 01       	movw	r20, r6
    2480:	0e 94 67 13 	call	0x26ce	; 0x26ce <__ultoa_invert>
    2484:	88 2e       	mov	r8, r24
    2486:	86 18       	sub	r8, r6
    2488:	45 c0       	rjmp	.+138    	; 0x2514 <vfprintf+0x2ac>
    248a:	85 37       	cpi	r24, 0x75	; 117
    248c:	31 f4       	brne	.+12     	; 0x249a <vfprintf+0x232>
    248e:	23 2d       	mov	r18, r3
    2490:	2f 7e       	andi	r18, 0xEF	; 239
    2492:	b2 2e       	mov	r11, r18
    2494:	2a e0       	ldi	r18, 0x0A	; 10
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	25 c0       	rjmp	.+74     	; 0x24e4 <vfprintf+0x27c>
    249a:	93 2d       	mov	r25, r3
    249c:	99 7f       	andi	r25, 0xF9	; 249
    249e:	b9 2e       	mov	r11, r25
    24a0:	8f 36       	cpi	r24, 0x6F	; 111
    24a2:	c1 f0       	breq	.+48     	; 0x24d4 <vfprintf+0x26c>
    24a4:	18 f4       	brcc	.+6      	; 0x24ac <vfprintf+0x244>
    24a6:	88 35       	cpi	r24, 0x58	; 88
    24a8:	79 f0       	breq	.+30     	; 0x24c8 <vfprintf+0x260>
    24aa:	b5 c0       	rjmp	.+362    	; 0x2616 <vfprintf+0x3ae>
    24ac:	80 37       	cpi	r24, 0x70	; 112
    24ae:	19 f0       	breq	.+6      	; 0x24b6 <vfprintf+0x24e>
    24b0:	88 37       	cpi	r24, 0x78	; 120
    24b2:	21 f0       	breq	.+8      	; 0x24bc <vfprintf+0x254>
    24b4:	b0 c0       	rjmp	.+352    	; 0x2616 <vfprintf+0x3ae>
    24b6:	e9 2f       	mov	r30, r25
    24b8:	e0 61       	ori	r30, 0x10	; 16
    24ba:	be 2e       	mov	r11, r30
    24bc:	b4 fe       	sbrs	r11, 4
    24be:	0d c0       	rjmp	.+26     	; 0x24da <vfprintf+0x272>
    24c0:	fb 2d       	mov	r31, r11
    24c2:	f4 60       	ori	r31, 0x04	; 4
    24c4:	bf 2e       	mov	r11, r31
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <vfprintf+0x272>
    24c8:	34 fe       	sbrs	r3, 4
    24ca:	0a c0       	rjmp	.+20     	; 0x24e0 <vfprintf+0x278>
    24cc:	29 2f       	mov	r18, r25
    24ce:	26 60       	ori	r18, 0x06	; 6
    24d0:	b2 2e       	mov	r11, r18
    24d2:	06 c0       	rjmp	.+12     	; 0x24e0 <vfprintf+0x278>
    24d4:	28 e0       	ldi	r18, 0x08	; 8
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <vfprintf+0x27c>
    24da:	20 e1       	ldi	r18, 0x10	; 16
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <vfprintf+0x27c>
    24e0:	20 e1       	ldi	r18, 0x10	; 16
    24e2:	32 e0       	ldi	r19, 0x02	; 2
    24e4:	f8 01       	movw	r30, r16
    24e6:	b7 fe       	sbrs	r11, 7
    24e8:	07 c0       	rjmp	.+14     	; 0x24f8 <vfprintf+0x290>
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	0c 5f       	subi	r16, 0xFC	; 252
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <vfprintf+0x29c>
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 5f       	subi	r16, 0xFE	; 254
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	a3 01       	movw	r20, r6
    2506:	0e 94 67 13 	call	0x26ce	; 0x26ce <__ultoa_invert>
    250a:	88 2e       	mov	r8, r24
    250c:	86 18       	sub	r8, r6
    250e:	fb 2d       	mov	r31, r11
    2510:	ff 77       	andi	r31, 0x7F	; 127
    2512:	3f 2e       	mov	r3, r31
    2514:	36 fe       	sbrs	r3, 6
    2516:	0d c0       	rjmp	.+26     	; 0x2532 <vfprintf+0x2ca>
    2518:	23 2d       	mov	r18, r3
    251a:	2e 7f       	andi	r18, 0xFE	; 254
    251c:	a2 2e       	mov	r10, r18
    251e:	89 14       	cp	r8, r9
    2520:	58 f4       	brcc	.+22     	; 0x2538 <vfprintf+0x2d0>
    2522:	34 fe       	sbrs	r3, 4
    2524:	0b c0       	rjmp	.+22     	; 0x253c <vfprintf+0x2d4>
    2526:	32 fc       	sbrc	r3, 2
    2528:	09 c0       	rjmp	.+18     	; 0x253c <vfprintf+0x2d4>
    252a:	83 2d       	mov	r24, r3
    252c:	8e 7e       	andi	r24, 0xEE	; 238
    252e:	a8 2e       	mov	r10, r24
    2530:	05 c0       	rjmp	.+10     	; 0x253c <vfprintf+0x2d4>
    2532:	b8 2c       	mov	r11, r8
    2534:	a3 2c       	mov	r10, r3
    2536:	03 c0       	rjmp	.+6      	; 0x253e <vfprintf+0x2d6>
    2538:	b8 2c       	mov	r11, r8
    253a:	01 c0       	rjmp	.+2      	; 0x253e <vfprintf+0x2d6>
    253c:	b9 2c       	mov	r11, r9
    253e:	a4 fe       	sbrs	r10, 4
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <vfprintf+0x2f8>
    2542:	fe 01       	movw	r30, r28
    2544:	e8 0d       	add	r30, r8
    2546:	f1 1d       	adc	r31, r1
    2548:	80 81       	ld	r24, Z
    254a:	80 33       	cpi	r24, 0x30	; 48
    254c:	21 f4       	brne	.+8      	; 0x2556 <vfprintf+0x2ee>
    254e:	9a 2d       	mov	r25, r10
    2550:	99 7e       	andi	r25, 0xE9	; 233
    2552:	a9 2e       	mov	r10, r25
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <vfprintf+0x300>
    2556:	a2 fe       	sbrs	r10, 2
    2558:	06 c0       	rjmp	.+12     	; 0x2566 <vfprintf+0x2fe>
    255a:	b3 94       	inc	r11
    255c:	b3 94       	inc	r11
    255e:	04 c0       	rjmp	.+8      	; 0x2568 <vfprintf+0x300>
    2560:	8a 2d       	mov	r24, r10
    2562:	86 78       	andi	r24, 0x86	; 134
    2564:	09 f0       	breq	.+2      	; 0x2568 <vfprintf+0x300>
    2566:	b3 94       	inc	r11
    2568:	a3 fc       	sbrc	r10, 3
    256a:	11 c0       	rjmp	.+34     	; 0x258e <vfprintf+0x326>
    256c:	a0 fe       	sbrs	r10, 0
    256e:	06 c0       	rjmp	.+12     	; 0x257c <vfprintf+0x314>
    2570:	b2 14       	cp	r11, r2
    2572:	88 f4       	brcc	.+34     	; 0x2596 <vfprintf+0x32e>
    2574:	28 0c       	add	r2, r8
    2576:	92 2c       	mov	r9, r2
    2578:	9b 18       	sub	r9, r11
    257a:	0e c0       	rjmp	.+28     	; 0x2598 <vfprintf+0x330>
    257c:	b2 14       	cp	r11, r2
    257e:	60 f4       	brcc	.+24     	; 0x2598 <vfprintf+0x330>
    2580:	b6 01       	movw	r22, r12
    2582:	80 e2       	ldi	r24, 0x20	; 32
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    258a:	b3 94       	inc	r11
    258c:	f7 cf       	rjmp	.-18     	; 0x257c <vfprintf+0x314>
    258e:	b2 14       	cp	r11, r2
    2590:	18 f4       	brcc	.+6      	; 0x2598 <vfprintf+0x330>
    2592:	2b 18       	sub	r2, r11
    2594:	02 c0       	rjmp	.+4      	; 0x259a <vfprintf+0x332>
    2596:	98 2c       	mov	r9, r8
    2598:	21 2c       	mov	r2, r1
    259a:	a4 fe       	sbrs	r10, 4
    259c:	10 c0       	rjmp	.+32     	; 0x25be <vfprintf+0x356>
    259e:	b6 01       	movw	r22, r12
    25a0:	80 e3       	ldi	r24, 0x30	; 48
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    25a8:	a2 fe       	sbrs	r10, 2
    25aa:	17 c0       	rjmp	.+46     	; 0x25da <vfprintf+0x372>
    25ac:	a1 fc       	sbrc	r10, 1
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <vfprintf+0x34e>
    25b0:	88 e7       	ldi	r24, 0x78	; 120
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <vfprintf+0x352>
    25b6:	88 e5       	ldi	r24, 0x58	; 88
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	b6 01       	movw	r22, r12
    25bc:	0c c0       	rjmp	.+24     	; 0x25d6 <vfprintf+0x36e>
    25be:	8a 2d       	mov	r24, r10
    25c0:	86 78       	andi	r24, 0x86	; 134
    25c2:	59 f0       	breq	.+22     	; 0x25da <vfprintf+0x372>
    25c4:	a1 fe       	sbrs	r10, 1
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0x364>
    25c8:	8b e2       	ldi	r24, 0x2B	; 43
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <vfprintf+0x366>
    25cc:	80 e2       	ldi	r24, 0x20	; 32
    25ce:	a7 fc       	sbrc	r10, 7
    25d0:	8d e2       	ldi	r24, 0x2D	; 45
    25d2:	b6 01       	movw	r22, r12
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    25da:	89 14       	cp	r8, r9
    25dc:	38 f4       	brcc	.+14     	; 0x25ec <vfprintf+0x384>
    25de:	b6 01       	movw	r22, r12
    25e0:	80 e3       	ldi	r24, 0x30	; 48
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    25e8:	9a 94       	dec	r9
    25ea:	f7 cf       	rjmp	.-18     	; 0x25da <vfprintf+0x372>
    25ec:	8a 94       	dec	r8
    25ee:	f3 01       	movw	r30, r6
    25f0:	e8 0d       	add	r30, r8
    25f2:	f1 1d       	adc	r31, r1
    25f4:	80 81       	ld	r24, Z
    25f6:	b6 01       	movw	r22, r12
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    25fe:	81 10       	cpse	r8, r1
    2600:	f5 cf       	rjmp	.-22     	; 0x25ec <vfprintf+0x384>
    2602:	22 20       	and	r2, r2
    2604:	09 f4       	brne	.+2      	; 0x2608 <vfprintf+0x3a0>
    2606:	42 ce       	rjmp	.-892    	; 0x228c <vfprintf+0x24>
    2608:	b6 01       	movw	r22, r12
    260a:	80 e2       	ldi	r24, 0x20	; 32
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 2b 13 	call	0x2656	; 0x2656 <fputc>
    2612:	2a 94       	dec	r2
    2614:	f6 cf       	rjmp	.-20     	; 0x2602 <vfprintf+0x39a>
    2616:	f6 01       	movw	r30, r12
    2618:	86 81       	ldd	r24, Z+6	; 0x06
    261a:	97 81       	ldd	r25, Z+7	; 0x07
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <vfprintf+0x3ba>
    261e:	8f ef       	ldi	r24, 0xFF	; 255
    2620:	9f ef       	ldi	r25, 0xFF	; 255
    2622:	2b 96       	adiw	r28, 0x0b	; 11
    2624:	e2 e1       	ldi	r30, 0x12	; 18
    2626:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__epilogue_restores__>

0000262a <strnlen_P>:
    262a:	fc 01       	movw	r30, r24
    262c:	05 90       	lpm	r0, Z+
    262e:	61 50       	subi	r22, 0x01	; 1
    2630:	70 40       	sbci	r23, 0x00	; 0
    2632:	01 10       	cpse	r0, r1
    2634:	d8 f7       	brcc	.-10     	; 0x262c <strnlen_P+0x2>
    2636:	80 95       	com	r24
    2638:	90 95       	com	r25
    263a:	8e 0f       	add	r24, r30
    263c:	9f 1f       	adc	r25, r31
    263e:	08 95       	ret

00002640 <strnlen>:
    2640:	fc 01       	movw	r30, r24
    2642:	61 50       	subi	r22, 0x01	; 1
    2644:	70 40       	sbci	r23, 0x00	; 0
    2646:	01 90       	ld	r0, Z+
    2648:	01 10       	cpse	r0, r1
    264a:	d8 f7       	brcc	.-10     	; 0x2642 <strnlen+0x2>
    264c:	80 95       	com	r24
    264e:	90 95       	com	r25
    2650:	8e 0f       	add	r24, r30
    2652:	9f 1f       	adc	r25, r31
    2654:	08 95       	ret

00002656 <fputc>:
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	fb 01       	movw	r30, r22
    2660:	23 81       	ldd	r18, Z+3	; 0x03
    2662:	21 fd       	sbrc	r18, 1
    2664:	03 c0       	rjmp	.+6      	; 0x266c <fputc+0x16>
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	9f ef       	ldi	r25, 0xFF	; 255
    266a:	2c c0       	rjmp	.+88     	; 0x26c4 <fputc+0x6e>
    266c:	22 ff       	sbrs	r18, 2
    266e:	16 c0       	rjmp	.+44     	; 0x269c <fputc+0x46>
    2670:	46 81       	ldd	r20, Z+6	; 0x06
    2672:	57 81       	ldd	r21, Z+7	; 0x07
    2674:	24 81       	ldd	r18, Z+4	; 0x04
    2676:	35 81       	ldd	r19, Z+5	; 0x05
    2678:	42 17       	cp	r20, r18
    267a:	53 07       	cpc	r21, r19
    267c:	44 f4       	brge	.+16     	; 0x268e <fputc+0x38>
    267e:	a0 81       	ld	r26, Z
    2680:	b1 81       	ldd	r27, Z+1	; 0x01
    2682:	9d 01       	movw	r18, r26
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	31 83       	std	Z+1, r19	; 0x01
    268a:	20 83       	st	Z, r18
    268c:	8c 93       	st	X, r24
    268e:	26 81       	ldd	r18, Z+6	; 0x06
    2690:	37 81       	ldd	r19, Z+7	; 0x07
    2692:	2f 5f       	subi	r18, 0xFF	; 255
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	37 83       	std	Z+7, r19	; 0x07
    2698:	26 83       	std	Z+6, r18	; 0x06
    269a:	14 c0       	rjmp	.+40     	; 0x26c4 <fputc+0x6e>
    269c:	8b 01       	movw	r16, r22
    269e:	ec 01       	movw	r28, r24
    26a0:	fb 01       	movw	r30, r22
    26a2:	00 84       	ldd	r0, Z+8	; 0x08
    26a4:	f1 85       	ldd	r31, Z+9	; 0x09
    26a6:	e0 2d       	mov	r30, r0
    26a8:	09 95       	icall
    26aa:	89 2b       	or	r24, r25
    26ac:	e1 f6       	brne	.-72     	; 0x2666 <fputc+0x10>
    26ae:	d8 01       	movw	r26, r16
    26b0:	16 96       	adiw	r26, 0x06	; 6
    26b2:	8d 91       	ld	r24, X+
    26b4:	9c 91       	ld	r25, X
    26b6:	17 97       	sbiw	r26, 0x07	; 7
    26b8:	01 96       	adiw	r24, 0x01	; 1
    26ba:	17 96       	adiw	r26, 0x07	; 7
    26bc:	9c 93       	st	X, r25
    26be:	8e 93       	st	-X, r24
    26c0:	16 97       	sbiw	r26, 0x06	; 6
    26c2:	ce 01       	movw	r24, r28
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	08 95       	ret

000026ce <__ultoa_invert>:
    26ce:	fa 01       	movw	r30, r20
    26d0:	aa 27       	eor	r26, r26
    26d2:	28 30       	cpi	r18, 0x08	; 8
    26d4:	51 f1       	breq	.+84     	; 0x272a <__ultoa_invert+0x5c>
    26d6:	20 31       	cpi	r18, 0x10	; 16
    26d8:	81 f1       	breq	.+96     	; 0x273a <__ultoa_invert+0x6c>
    26da:	e8 94       	clt
    26dc:	6f 93       	push	r22
    26de:	6e 7f       	andi	r22, 0xFE	; 254
    26e0:	6e 5f       	subi	r22, 0xFE	; 254
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	8f 4f       	sbci	r24, 0xFF	; 255
    26e6:	9f 4f       	sbci	r25, 0xFF	; 255
    26e8:	af 4f       	sbci	r26, 0xFF	; 255
    26ea:	b1 e0       	ldi	r27, 0x01	; 1
    26ec:	3e d0       	rcall	.+124    	; 0x276a <__ultoa_invert+0x9c>
    26ee:	b4 e0       	ldi	r27, 0x04	; 4
    26f0:	3c d0       	rcall	.+120    	; 0x276a <__ultoa_invert+0x9c>
    26f2:	67 0f       	add	r22, r23
    26f4:	78 1f       	adc	r23, r24
    26f6:	89 1f       	adc	r24, r25
    26f8:	9a 1f       	adc	r25, r26
    26fa:	a1 1d       	adc	r26, r1
    26fc:	68 0f       	add	r22, r24
    26fe:	79 1f       	adc	r23, r25
    2700:	8a 1f       	adc	r24, r26
    2702:	91 1d       	adc	r25, r1
    2704:	a1 1d       	adc	r26, r1
    2706:	6a 0f       	add	r22, r26
    2708:	71 1d       	adc	r23, r1
    270a:	81 1d       	adc	r24, r1
    270c:	91 1d       	adc	r25, r1
    270e:	a1 1d       	adc	r26, r1
    2710:	20 d0       	rcall	.+64     	; 0x2752 <__ultoa_invert+0x84>
    2712:	09 f4       	brne	.+2      	; 0x2716 <__ultoa_invert+0x48>
    2714:	68 94       	set
    2716:	3f 91       	pop	r19
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	26 9f       	mul	r18, r22
    271c:	11 24       	eor	r1, r1
    271e:	30 19       	sub	r19, r0
    2720:	30 5d       	subi	r19, 0xD0	; 208
    2722:	31 93       	st	Z+, r19
    2724:	de f6       	brtc	.-74     	; 0x26dc <__ultoa_invert+0xe>
    2726:	cf 01       	movw	r24, r30
    2728:	08 95       	ret
    272a:	46 2f       	mov	r20, r22
    272c:	47 70       	andi	r20, 0x07	; 7
    272e:	40 5d       	subi	r20, 0xD0	; 208
    2730:	41 93       	st	Z+, r20
    2732:	b3 e0       	ldi	r27, 0x03	; 3
    2734:	0f d0       	rcall	.+30     	; 0x2754 <__ultoa_invert+0x86>
    2736:	c9 f7       	brne	.-14     	; 0x272a <__ultoa_invert+0x5c>
    2738:	f6 cf       	rjmp	.-20     	; 0x2726 <__ultoa_invert+0x58>
    273a:	46 2f       	mov	r20, r22
    273c:	4f 70       	andi	r20, 0x0F	; 15
    273e:	40 5d       	subi	r20, 0xD0	; 208
    2740:	4a 33       	cpi	r20, 0x3A	; 58
    2742:	18 f0       	brcs	.+6      	; 0x274a <__ultoa_invert+0x7c>
    2744:	49 5d       	subi	r20, 0xD9	; 217
    2746:	31 fd       	sbrc	r19, 1
    2748:	40 52       	subi	r20, 0x20	; 32
    274a:	41 93       	st	Z+, r20
    274c:	02 d0       	rcall	.+4      	; 0x2752 <__ultoa_invert+0x84>
    274e:	a9 f7       	brne	.-22     	; 0x273a <__ultoa_invert+0x6c>
    2750:	ea cf       	rjmp	.-44     	; 0x2726 <__ultoa_invert+0x58>
    2752:	b4 e0       	ldi	r27, 0x04	; 4
    2754:	a6 95       	lsr	r26
    2756:	97 95       	ror	r25
    2758:	87 95       	ror	r24
    275a:	77 95       	ror	r23
    275c:	67 95       	ror	r22
    275e:	ba 95       	dec	r27
    2760:	c9 f7       	brne	.-14     	; 0x2754 <__ultoa_invert+0x86>
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	61 05       	cpc	r22, r1
    2766:	71 05       	cpc	r23, r1
    2768:	08 95       	ret
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	0a 2e       	mov	r0, r26
    2770:	06 94       	lsr	r0
    2772:	57 95       	ror	r21
    2774:	47 95       	ror	r20
    2776:	37 95       	ror	r19
    2778:	27 95       	ror	r18
    277a:	ba 95       	dec	r27
    277c:	c9 f7       	brne	.-14     	; 0x2770 <__ultoa_invert+0xa2>
    277e:	62 0f       	add	r22, r18
    2780:	73 1f       	adc	r23, r19
    2782:	84 1f       	adc	r24, r20
    2784:	95 1f       	adc	r25, r21
    2786:	a0 1d       	adc	r26, r0
    2788:	08 95       	ret

0000278a <__prologue_saves__>:
    278a:	2f 92       	push	r2
    278c:	3f 92       	push	r3
    278e:	4f 92       	push	r4
    2790:	5f 92       	push	r5
    2792:	6f 92       	push	r6
    2794:	7f 92       	push	r7
    2796:	8f 92       	push	r8
    2798:	9f 92       	push	r9
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	ca 1b       	sub	r28, r26
    27b4:	db 0b       	sbc	r29, r27
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	09 94       	ijmp

000027c2 <__epilogue_restores__>:
    27c2:	2a 88       	ldd	r2, Y+18	; 0x12
    27c4:	39 88       	ldd	r3, Y+17	; 0x11
    27c6:	48 88       	ldd	r4, Y+16	; 0x10
    27c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    27cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    27d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    27d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d4:	b9 84       	ldd	r11, Y+9	; 0x09
    27d6:	c8 84       	ldd	r12, Y+8	; 0x08
    27d8:	df 80       	ldd	r13, Y+7	; 0x07
    27da:	ee 80       	ldd	r14, Y+6	; 0x06
    27dc:	fd 80       	ldd	r15, Y+5	; 0x05
    27de:	0c 81       	ldd	r16, Y+4	; 0x04
    27e0:	1b 81       	ldd	r17, Y+3	; 0x03
    27e2:	aa 81       	ldd	r26, Y+2	; 0x02
    27e4:	b9 81       	ldd	r27, Y+1	; 0x01
    27e6:	ce 0f       	add	r28, r30
    27e8:	d1 1d       	adc	r29, r1
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	ed 01       	movw	r28, r26
    27f6:	08 95       	ret

000027f8 <_exit>:
    27f8:	f8 94       	cli

000027fa <__stop_program>:
    27fa:	ff cf       	rjmp	.-2      	; 0x27fa <__stop_program>
