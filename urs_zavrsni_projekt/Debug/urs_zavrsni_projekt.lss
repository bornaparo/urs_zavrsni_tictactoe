
urs_zavrsni_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  0000266e  00002702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001bc  008001bc  0000285e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004549  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00006fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b8  00000000  00000000  00007809  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00008cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa0  00000000  00000000  00009534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035c0  00000000  00000000  00009fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000d594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 0c 	call	0x188e	; 0x188e <main>
      8a:	0c 94 35 13 	jmp	0x266a	; 0x266a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9TFT_startv>:
		}
		if (e2 > x) {
			err += ++x * 2 + 1;
		}
	} while (x <= 0);
}
      92:	88 b3       	in	r24, 0x18	; 24
      94:	80 6b       	ori	r24, 0xB0	; 176
      96:	88 bb       	out	0x18, r24	; 24
      98:	08 95       	ret

0000009a <_Z15TFT_touch_writeh>:
      9a:	c7 98       	cbi	0x18, 7	; 24
      9c:	97 e0       	ldi	r25, 0x07	; 7
      9e:	48 2f       	mov	r20, r24
      a0:	50 e0       	ldi	r21, 0x00	; 0
      a2:	9a 01       	movw	r18, r20
      a4:	09 2e       	mov	r0, r25
      a6:	02 c0       	rjmp	.+4      	; 0xac <_Z15TFT_touch_writeh+0x12>
      a8:	35 95       	asr	r19
      aa:	27 95       	ror	r18
      ac:	0a 94       	dec	r0
      ae:	e2 f7       	brpl	.-8      	; 0xa8 <_Z15TFT_touch_writeh+0xe>
      b0:	20 ff       	sbrs	r18, 0
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <_Z15TFT_touch_writeh+0x1e>
      b4:	c5 9a       	sbi	0x18, 5	; 24
      b6:	01 c0       	rjmp	.+2      	; 0xba <_Z15TFT_touch_writeh+0x20>
      b8:	c5 98       	cbi	0x18, 5	; 24
      ba:	c7 98       	cbi	0x18, 7	; 24
      bc:	c7 9a       	sbi	0x18, 7	; 24
      be:	91 50       	subi	r25, 0x01	; 1
      c0:	80 f7       	brcc	.-32     	; 0xa2 <_Z15TFT_touch_writeh+0x8>
      c2:	08 95       	ret

000000c4 <_Z14TFT_touch_readv>:
      c4:	2c e0       	ldi	r18, 0x0C	; 12
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	c7 9a       	sbi	0x18, 7	; 24
      d0:	c7 98       	cbi	0x18, 7	; 24
      d2:	36 b3       	in	r19, 0x16	; 22
      d4:	36 fb       	bst	r19, 6
      d6:	44 27       	eor	r20, r20
      d8:	40 f9       	bld	r20, 0
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	84 0f       	add	r24, r20
      de:	95 1f       	adc	r25, r21
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	99 f7       	brne	.-26     	; 0xca <_Z14TFT_touch_readv+0x6>
      e4:	08 95       	ret

000000e6 <_Z9TFT_writejh>:
      e6:	66 23       	and	r22, r22
      e8:	11 f0       	breq	.+4      	; 0xee <_Z9TFT_writejh+0x8>
      ea:	a8 9a       	sbi	0x15, 0	; 21
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <_Z9TFT_writejh+0xa>
      ee:	a8 98       	cbi	0x15, 0	; 21
      f0:	af 98       	cbi	0x15, 7	; 21
      f2:	9b bb       	out	0x1b, r25	; 27
      f4:	82 bb       	out	0x12, r24	; 18
      f6:	a9 9a       	sbi	0x15, 1	; 21
      f8:	a9 98       	cbi	0x15, 1	; 21
      fa:	af 9a       	sbi	0x15, 7	; 21
      fc:	08 95       	ret

000000fe <_Z14TFT_write_pairjj>:
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	eb 01       	movw	r28, r22
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	ce 01       	movw	r24, r28
     10e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <_Z15TFT_set_addressjjjj>:
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8c 01       	movw	r16, r24
     126:	eb 01       	movw	r28, r22
     128:	79 01       	movw	r14, r18
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	74 2f       	mov	r23, r20
     130:	68 0f       	add	r22, r24
     132:	79 1f       	adc	r23, r25
     134:	84 e4       	ldi	r24, 0x44	; 68
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     13c:	be 01       	movw	r22, r28
     13e:	85 e4       	ldi	r24, 0x45	; 69
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     146:	b7 01       	movw	r22, r14
     148:	86 e4       	ldi	r24, 0x46	; 70
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     150:	b8 01       	movw	r22, r16
     152:	8e e4       	ldi	r24, 0x4E	; 78
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     15a:	be 01       	movw	r22, r28
     15c:	8f e4       	ldi	r24, 0x4F	; 79
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	82 e2       	ldi	r24, 0x22	; 34
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	08 95       	ret

0000017c <_Z8TFT_initv>:
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	8a bb       	out	0x1a, r24	; 26
     180:	81 bb       	out	0x11, r24	; 17
     182:	84 b3       	in	r24, 0x14	; 20
     184:	83 6c       	ori	r24, 0xC3	; 195
     186:	84 bb       	out	0x14, r24	; 20
     188:	8e eb       	ldi	r24, 0xBE	; 190
     18a:	87 bb       	out	0x17, r24	; 23
     18c:	87 b3       	in	r24, 0x17	; 23
     18e:	86 60       	ori	r24, 0x06	; 6
     190:	87 bb       	out	0x17, r24	; 23
     192:	88 b3       	in	r24, 0x18	; 24
     194:	86 60       	ori	r24, 0x06	; 6
     196:	88 bb       	out	0x18, r24	; 24
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	93 e2       	ldi	r25, 0x23	; 35
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <_Z8TFT_initv+0x20>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z8TFT_initv+0x26>
     1a2:	00 00       	nop
     1a4:	c1 98       	cbi	0x18, 1	; 24
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	97 e4       	ldi	r25, 0x47	; 71
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z8TFT_initv+0x2e>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z8TFT_initv+0x34>
     1b0:	00 00       	nop
     1b2:	c1 9a       	sbi	0x18, 1	; 24
     1b4:	af 9a       	sbi	0x15, 7	; 21
     1b6:	ae 9a       	sbi	0x15, 6	; 21
     1b8:	a9 98       	cbi	0x15, 1	; 21
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	9f e8       	ldi	r25, 0x8F	; 143
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z8TFT_initv+0x42>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z8TFT_initv+0x48>
     1c4:	00 00       	nop
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1d2:	83 e3       	ldi	r24, 0x33	; 51
     1d4:	97 e0       	ldi	r25, 0x07	; 7
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_Z8TFT_initv+0x5a>
     1da:	64 ea       	ldi	r22, 0xA4	; 164
     1dc:	78 ea       	ldi	r23, 0xA8	; 168
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1e6:	83 e3       	ldi	r24, 0x33	; 51
     1e8:	97 e0       	ldi	r25, 0x07	; 7
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <_Z8TFT_initv+0x6e>
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8c e0       	ldi	r24, 0x0C	; 12
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1fa:	83 e3       	ldi	r24, 0x33	; 51
     1fc:	97 e0       	ldi	r25, 0x07	; 7
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z8TFT_initv+0x82>
     202:	6c e0       	ldi	r22, 0x0C	; 12
     204:	78 e0       	ldi	r23, 0x08	; 8
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     20e:	83 e3       	ldi	r24, 0x33	; 51
     210:	97 e0       	ldi	r25, 0x07	; 7
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z8TFT_initv+0x96>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	7b e2       	ldi	r23, 0x2B	; 43
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     222:	83 e3       	ldi	r24, 0x33	; 51
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z8TFT_initv+0xaa>
     22a:	60 eb       	ldi	r22, 0xB0	; 176
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     236:	83 e3       	ldi	r24, 0x33	; 51
     238:	97 e0       	ldi	r25, 0x07	; 7
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z8TFT_initv+0xbe>
     23e:	6f e3       	ldi	r22, 0x3F	; 63
     240:	7b e2       	ldi	r23, 0x2B	; 43
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     24a:	83 e3       	ldi	r24, 0x33	; 51
     24c:	97 e0       	ldi	r25, 0x07	; 7
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <_Z8TFT_initv+0xd2>
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	76 e0       	ldi	r23, 0x06	; 6
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     25e:	83 e3       	ldi	r24, 0x33	; 51
     260:	97 e0       	ldi	r25, 0x07	; 7
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <_Z8TFT_initv+0xe6>
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     272:	83 e3       	ldi	r24, 0x33	; 51
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <_Z8TFT_initv+0xfa>
     27a:	60 e7       	ldi	r22, 0x70	; 112
     27c:	70 e6       	ldi	r23, 0x60	; 96
     27e:	81 e1       	ldi	r24, 0x11	; 17
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     286:	83 e3       	ldi	r24, 0x33	; 51
     288:	97 e0       	ldi	r25, 0x07	; 7
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_Z8TFT_initv+0x10e>
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     29a:	83 e3       	ldi	r24, 0x33	; 51
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <_Z8TFT_initv+0x122>
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ae:	83 e3       	ldi	r24, 0x33	; 51
     2b0:	97 e0       	ldi	r25, 0x07	; 7
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <_Z8TFT_initv+0x136>
     2b6:	6c e1       	ldi	r22, 0x1C	; 28
     2b8:	7f ee       	ldi	r23, 0xEF	; 239
     2ba:	86 e1       	ldi	r24, 0x16	; 22
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z8TFT_initv+0x14a>
     2ca:	63 e0       	ldi	r22, 0x03	; 3
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e1       	ldi	r24, 0x17	; 23
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2d6:	83 e3       	ldi	r24, 0x33	; 51
     2d8:	97 e0       	ldi	r25, 0x07	; 7
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <_Z8TFT_initv+0x15e>
     2de:	63 e3       	ldi	r22, 0x33	; 51
     2e0:	72 e0       	ldi	r23, 0x02	; 2
     2e2:	87 e0       	ldi	r24, 0x07	; 7
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ea:	83 e3       	ldi	r24, 0x33	; 51
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <_Z8TFT_initv+0x172>
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8b e0       	ldi	r24, 0x0B	; 11
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2fe:	83 e3       	ldi	r24, 0x33	; 51
     300:	97 e0       	ldi	r25, 0x07	; 7
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <_Z8TFT_initv+0x186>
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     312:	83 e3       	ldi	r24, 0x33	; 51
     314:	97 e0       	ldi	r25, 0x07	; 7
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <_Z8TFT_initv+0x19a>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	81 e4       	ldi	r24, 0x41	; 65
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     326:	83 e3       	ldi	r24, 0x33	; 51
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_Z8TFT_initv+0x1ae>
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <_Z8TFT_initv+0x1c2>
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	88 e4       	ldi	r24, 0x48	; 72
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	97 e0       	ldi	r25, 0x07	; 7
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <_Z8TFT_initv+0x1d6>
     356:	6f e3       	ldi	r22, 0x3F	; 63
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	89 e4       	ldi	r24, 0x49	; 73
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     362:	83 e3       	ldi	r24, 0x33	; 51
     364:	97 e0       	ldi	r25, 0x07	; 7
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <_Z8TFT_initv+0x1ea>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	8a e4       	ldi	r24, 0x4A	; 74
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     376:	83 e3       	ldi	r24, 0x33	; 51
     378:	97 e0       	ldi	r25, 0x07	; 7
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <_Z8TFT_initv+0x1fe>
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8b e4       	ldi	r24, 0x4B	; 75
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     38a:	83 e3       	ldi	r24, 0x33	; 51
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_Z8TFT_initv+0x212>
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	7f ee       	ldi	r23, 0xEF	; 239
     396:	84 e4       	ldi	r24, 0x44	; 68
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     39e:	83 e3       	ldi	r24, 0x33	; 51
     3a0:	97 e0       	ldi	r25, 0x07	; 7
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <_Z8TFT_initv+0x226>
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	85 e4       	ldi	r24, 0x45	; 69
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3b2:	83 e3       	ldi	r24, 0x33	; 51
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_Z8TFT_initv+0x23a>
     3ba:	6f e3       	ldi	r22, 0x3F	; 63
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	86 e4       	ldi	r24, 0x46	; 70
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3c6:	83 e3       	ldi	r24, 0x33	; 51
     3c8:	97 e0       	ldi	r25, 0x07	; 7
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <_Z8TFT_initv+0x24e>
     3ce:	67 e0       	ldi	r22, 0x07	; 7
     3d0:	77 e0       	ldi	r23, 0x07	; 7
     3d2:	80 e3       	ldi	r24, 0x30	; 48
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3da:	83 e3       	ldi	r24, 0x33	; 51
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <_Z8TFT_initv+0x262>
     3e2:	64 e0       	ldi	r22, 0x04	; 4
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	81 e3       	ldi	r24, 0x31	; 49
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3ee:	83 e3       	ldi	r24, 0x33	; 51
     3f0:	97 e0       	ldi	r25, 0x07	; 7
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_Z8TFT_initv+0x276>
     3f6:	64 e0       	ldi	r22, 0x04	; 4
     3f8:	72 e0       	ldi	r23, 0x02	; 2
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     402:	83 e3       	ldi	r24, 0x33	; 51
     404:	97 e0       	ldi	r25, 0x07	; 7
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	75 e0       	ldi	r23, 0x05	; 5
     40e:	83 e3       	ldi	r24, 0x33	; 51
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     416:	83 e3       	ldi	r24, 0x33	; 51
     418:	97 e0       	ldi	r25, 0x07	; 7
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	75 e0       	ldi	r23, 0x05	; 5
     422:	84 e3       	ldi	r24, 0x34	; 52
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     42a:	83 e3       	ldi	r24, 0x33	; 51
     42c:	97 e0       	ldi	r25, 0x07	; 7
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	64 e0       	ldi	r22, 0x04	; 4
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	85 e3       	ldi	r24, 0x35	; 53
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     43e:	83 e3       	ldi	r24, 0x33	; 51
     440:	97 e0       	ldi	r25, 0x07	; 7
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	72 e0       	ldi	r23, 0x02	; 2
     44a:	86 e3       	ldi	r24, 0x36	; 54
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     452:	83 e3       	ldi	r24, 0x33	; 51
     454:	97 e0       	ldi	r25, 0x07	; 7
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	75 e0       	ldi	r23, 0x05	; 5
     45e:	87 e3       	ldi	r24, 0x37	; 55
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     466:	83 e3       	ldi	r24, 0x33	; 51
     468:	97 e0       	ldi	r25, 0x07	; 7
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	73 e0       	ldi	r23, 0x03	; 3
     472:	8a e3       	ldi	r24, 0x3A	; 58
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     47a:	83 e3       	ldi	r24, 0x33	; 51
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	73 e0       	ldi	r23, 0x03	; 3
     486:	8b e3       	ldi	r24, 0x3B	; 59
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     48e:	83 e3       	ldi	r24, 0x33	; 51
     490:	97 e0       	ldi	r25, 0x07	; 7
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e2       	ldi	r24, 0x23	; 35
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4a2:	83 e3       	ldi	r24, 0x33	; 51
     4a4:	97 e0       	ldi	r25, 0x07	; 7
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	84 e2       	ldi	r24, 0x24	; 36
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	97 e0       	ldi	r25, 0x07	; 7
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8f e4       	ldi	r24, 0x4F	; 79
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	8e e4       	ldi	r24, 0x4E	; 78
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	82 e2       	ldi	r24, 0x22	; 34
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     4e0:	08 95       	ret

000004e2 <_Z14TFT_set_cursorjj>:
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	eb 01       	movw	r28, r22
     4e8:	bc 01       	movw	r22, r24
     4ea:	8e e4       	ldi	r24, 0x4E	; 78
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4f2:	60 e4       	ldi	r22, 0x40	; 64
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	6c 1b       	sub	r22, r28
     4f8:	7d 0b       	sbc	r23, r29
     4fa:	8f e4       	ldi	r24, 0x4F	; 79
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <_Z17read_touch_coordsPjS_>:
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	8b 01       	movw	r16, r22
     51e:	83 e3       	ldi	r24, 0x33	; 51
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z17read_touch_coordsPjS_+0x10>
     526:	c4 98       	cbi	0x18, 4	; 24
     528:	80 e9       	ldi	r24, 0x90	; 144
     52a:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     52e:	e3 e3       	ldi	r30, 0x33	; 51
     530:	f7 e0       	ldi	r31, 0x07	; 7
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <_Z17read_touch_coordsPjS_+0x20>
     536:	c7 9a       	sbi	0x18, 7	; 24
	...
     540:	c7 98       	cbi	0x18, 7	; 24
	...
     54a:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     54e:	9c 01       	movw	r18, r24
     550:	20 55       	subi	r18, 0x50	; 80
     552:	31 09       	sbc	r19, r1
     554:	ab ea       	ldi	r26, 0xAB	; 171
     556:	ba ea       	ldi	r27, 0xAA	; 170
     558:	0e 94 3c 10 	call	0x2078	; 0x2078 <__umulhisi3>
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	f8 01       	movw	r30, r16
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
     56a:	80 ed       	ldi	r24, 0xD0	; 208
     56c:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     570:	c7 9a       	sbi	0x18, 7	; 24
	...
     57a:	c7 98       	cbi	0x18, 7	; 24
	...
     584:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     588:	80 55       	subi	r24, 0x50	; 80
     58a:	91 09       	sbc	r25, r1
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	99 83       	std	Y+1, r25	; 0x01
     59a:	88 83       	st	Y, r24
     59c:	c4 9a       	sbi	0x18, 4	; 24
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <_Z20set_background_colorj>:
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	8c 01       	movw	r16, r24
     5b4:	2f e3       	ldi	r18, 0x3F	; 63
     5b6:	31 e0       	ldi	r19, 0x01	; 1
     5b8:	4f ee       	ldi	r20, 0xEF	; 239
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 8c 00 	call	0x118	; 0x118 <_Z15TFT_set_addressjjjj>
     5c8:	68 94       	set
     5ca:	ee 24       	eor	r14, r14
     5cc:	e6 f8       	bld	r14, 6
     5ce:	ff 24       	eor	r15, r15
     5d0:	f3 94       	inc	r15
     5d2:	c0 ef       	ldi	r28, 0xF0	; 240
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     5dc:	c1 50       	subi	r28, 0x01	; 1
     5de:	d1 f7       	brne	.-12     	; 0x5d4 <_Z20set_background_colorj+0x2c>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	e8 1a       	sub	r14, r24
     5e4:	f1 08       	sbc	r15, r1
     5e6:	a9 f7       	brne	.-22     	; 0x5d2 <_Z20set_background_colorj+0x2a>
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <_Z10draw_pixeljjj>:
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ea 01       	movw	r28, r20
     5fa:	af 98       	cbi	0x15, 7	; 21
     5fc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z14TFT_set_cursorjj>
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	ce 01       	movw	r24, r28
     604:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     608:	af 9a       	sbi	0x15, 7	; 21
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_Z15draw_font_pixeljjjh>:
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	22 23       	and	r18, r18
     62a:	e9 f0       	breq	.+58     	; 0x666 <_Z15draw_font_pixeljjjh+0x56>
     62c:	a2 2e       	mov	r10, r18
     62e:	6a 01       	movw	r12, r20
     630:	4b 01       	movw	r8, r22
     632:	08 2f       	mov	r16, r24
     634:	19 2f       	mov	r17, r25
     636:	b1 2c       	mov	r11, r1
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	82 0f       	add	r24, r18
     63c:	7b 01       	movw	r14, r22
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	e9 1a       	sub	r14, r25
     642:	f9 0a       	sbc	r15, r25
     644:	e8 0e       	add	r14, r24
     646:	f1 1c       	adc	r15, r1
     648:	e4 01       	movw	r28, r8
     64a:	a6 01       	movw	r20, r12
     64c:	be 01       	movw	r22, r28
     64e:	c8 01       	movw	r24, r16
     650:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     654:	21 96       	adiw	r28, 0x01	; 1
     656:	ce 15       	cp	r28, r14
     658:	df 05       	cpc	r29, r15
     65a:	b9 f7       	brne	.-18     	; 0x64a <_Z15draw_font_pixeljjjh+0x3a>
     65c:	b3 94       	inc	r11
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	ab 10       	cpse	r10, r11
     664:	f1 cf       	rjmp	.-30     	; 0x648 <_Z15draw_font_pixeljjjh+0x38>
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <_Z10print_charjjhjjh>:
     680:	2f 92       	push	r2
     682:	3f 92       	push	r3
     684:	4f 92       	push	r4
     686:	5f 92       	push	r5
     688:	6f 92       	push	r6
     68a:	7f 92       	push	r7
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <_Z10print_charjjhjjh+0x26>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <_Z10print_charjjhjjh+0x28>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	6b 01       	movw	r12, r22
     6b2:	54 2e       	mov	r5, r20
     6b4:	39 01       	movw	r6, r18
     6b6:	18 01       	movw	r2, r16
     6b8:	f1 2c       	mov	r15, r1
     6ba:	47 01       	movw	r8, r14
     6bc:	88 0c       	add	r8, r8
     6be:	99 1c       	adc	r9, r9
     6c0:	88 0c       	add	r8, r8
     6c2:	99 1c       	adc	r9, r9
     6c4:	c4 01       	movw	r24, r8
     6c6:	8e 0d       	add	r24, r14
     6c8:	9f 1d       	adc	r25, r15
     6ca:	9c 01       	movw	r18, r24
     6cc:	22 50       	subi	r18, 0x02	; 2
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	49 01       	movw	r8, r18
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f5 e0       	ldi	r31, 0x05	; 5
     6d6:	4f 2e       	mov	r4, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	a4 2e       	mov	r10, r20
     6dc:	b1 2c       	mov	r11, r1
     6de:	f4 01       	movw	r30, r8
     6e0:	e1 90       	ld	r14, Z+
     6e2:	4f 01       	movw	r8, r30
     6e4:	09 81       	ldd	r16, Y+1	; 0x01
     6e6:	1a 81       	ldd	r17, Y+2	; 0x02
     6e8:	1c 82       	std	Y+4, r1	; 0x04
     6ea:	1b 82       	std	Y+3, r1	; 0x03
     6ec:	f1 2c       	mov	r15, r1
     6ee:	c7 01       	movw	r24, r14
     6f0:	0b 80       	ldd	r0, Y+3	; 0x03
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_Z10print_charjjhjjh+0x78>
     6f4:	95 95       	asr	r25
     6f6:	87 95       	ror	r24
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <_Z10print_charjjhjjh+0x74>
     6fc:	80 ff       	sbrs	r24, 0
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <_Z10print_charjjhjjh+0x8e>
     700:	25 2d       	mov	r18, r5
     702:	a3 01       	movw	r20, r6
     704:	b6 01       	movw	r22, r12
     706:	c8 01       	movw	r24, r16
     708:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     70c:	06 c0       	rjmp	.+12     	; 0x71a <_Z10print_charjjhjjh+0x9a>
     70e:	25 2d       	mov	r18, r5
     710:	a1 01       	movw	r20, r2
     712:	b6 01       	movw	r22, r12
     714:	c8 01       	movw	r24, r16
     716:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     71a:	2b 81       	ldd	r18, Y+3	; 0x03
     71c:	3c 81       	ldd	r19, Y+4	; 0x04
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	3c 83       	std	Y+4, r19	; 0x04
     724:	2b 83       	std	Y+3, r18	; 0x03
     726:	0a 0d       	add	r16, r10
     728:	1b 1d       	adc	r17, r11
     72a:	28 30       	cpi	r18, 0x08	; 8
     72c:	31 05       	cpc	r19, r1
     72e:	f9 f6       	brne	.-66     	; 0x6ee <_Z10print_charjjhjjh+0x6e>
     730:	ca 0c       	add	r12, r10
     732:	db 1c       	adc	r13, r11
     734:	4a 94       	dec	r4
     736:	41 10       	cpse	r4, r1
     738:	d2 cf       	rjmp	.-92     	; 0x6de <_Z10print_charjjhjjh+0x5e>
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	bf 90       	pop	r11
     754:	af 90       	pop	r10
     756:	9f 90       	pop	r9
     758:	8f 90       	pop	r8
     75a:	7f 90       	pop	r7
     75c:	6f 90       	pop	r6
     75e:	5f 90       	pop	r5
     760:	4f 90       	pop	r4
     762:	3f 90       	pop	r3
     764:	2f 90       	pop	r2
     766:	08 95       	ret

00000768 <_Z12print_stringjjhjjPKc>:
     768:	3f 92       	push	r3
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
     78c:	34 2e       	mov	r3, r20
     78e:	49 01       	movw	r8, r18
     790:	28 01       	movw	r4, r16
     792:	67 01       	movw	r12, r14
     794:	a4 2e       	mov	r10, r20
     796:	b1 2c       	mov	r11, r1
     798:	95 01       	movw	r18, r10
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	a2 0e       	add	r10, r18
     7a4:	b3 1e       	adc	r11, r19
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	a2 1a       	sub	r10, r18
     7aa:	b2 0a       	sbc	r11, r18
     7ac:	f1 2c       	mov	r15, r1
     7ae:	3c 01       	movw	r6, r24
     7b0:	64 0e       	add	r6, r20
     7b2:	71 1c       	adc	r7, r1
     7b4:	f6 01       	movw	r30, r12
     7b6:	ef 0d       	add	r30, r15
     7b8:	f1 1d       	adc	r31, r1
     7ba:	80 81       	ld	r24, Z
     7bc:	80 32       	cpi	r24, 0x20	; 32
     7be:	61 f4       	brne	.+24     	; 0x7d8 <_Z12print_stringjjhjjPKc+0x70>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fa e1       	ldi	r31, 0x1A	; 26
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	82 01       	movw	r16, r4
     7ca:	94 01       	movw	r18, r8
     7cc:	43 2d       	mov	r20, r3
     7ce:	be 01       	movw	r22, r28
     7d0:	c3 01       	movw	r24, r6
     7d2:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7d6:	a5 c0       	rjmp	.+330    	; 0x922 <__stack+0xc3>
     7d8:	80 33       	cpi	r24, 0x30	; 48
     7da:	61 f4       	brne	.+24     	; 0x7f4 <_Z12print_stringjjhjjPKc+0x8c>
     7dc:	0f 2e       	mov	r0, r31
     7de:	fb e1       	ldi	r31, 0x1B	; 27
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	82 01       	movw	r16, r4
     7e6:	94 01       	movw	r18, r8
     7e8:	43 2d       	mov	r20, r3
     7ea:	be 01       	movw	r22, r28
     7ec:	c3 01       	movw	r24, r6
     7ee:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7f2:	97 c0       	rjmp	.+302    	; 0x922 <__stack+0xc3>
     7f4:	81 33       	cpi	r24, 0x31	; 49
     7f6:	61 f4       	brne	.+24     	; 0x810 <_Z12print_stringjjhjjPKc+0xa8>
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fc e1       	ldi	r31, 0x1C	; 28
     7fc:	ef 2e       	mov	r14, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	82 01       	movw	r16, r4
     802:	94 01       	movw	r18, r8
     804:	43 2d       	mov	r20, r3
     806:	be 01       	movw	r22, r28
     808:	c3 01       	movw	r24, r6
     80a:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     80e:	89 c0       	rjmp	.+274    	; 0x922 <__stack+0xc3>
     810:	82 33       	cpi	r24, 0x32	; 50
     812:	61 f4       	brne	.+24     	; 0x82c <_Z12print_stringjjhjjPKc+0xc4>
     814:	0f 2e       	mov	r0, r31
     816:	fd e1       	ldi	r31, 0x1D	; 29
     818:	ef 2e       	mov	r14, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	82 01       	movw	r16, r4
     81e:	94 01       	movw	r18, r8
     820:	43 2d       	mov	r20, r3
     822:	be 01       	movw	r22, r28
     824:	c3 01       	movw	r24, r6
     826:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     82a:	7b c0       	rjmp	.+246    	; 0x922 <__stack+0xc3>
     82c:	83 33       	cpi	r24, 0x33	; 51
     82e:	61 f4       	brne	.+24     	; 0x848 <_Z12print_stringjjhjjPKc+0xe0>
     830:	0f 2e       	mov	r0, r31
     832:	fe e1       	ldi	r31, 0x1E	; 30
     834:	ef 2e       	mov	r14, r31
     836:	f0 2d       	mov	r31, r0
     838:	82 01       	movw	r16, r4
     83a:	94 01       	movw	r18, r8
     83c:	43 2d       	mov	r20, r3
     83e:	be 01       	movw	r22, r28
     840:	c3 01       	movw	r24, r6
     842:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     846:	6d c0       	rjmp	.+218    	; 0x922 <__stack+0xc3>
     848:	84 33       	cpi	r24, 0x34	; 52
     84a:	61 f4       	brne	.+24     	; 0x864 <__stack+0x5>
     84c:	0f 2e       	mov	r0, r31
     84e:	ff e1       	ldi	r31, 0x1F	; 31
     850:	ef 2e       	mov	r14, r31
     852:	f0 2d       	mov	r31, r0
     854:	82 01       	movw	r16, r4
     856:	94 01       	movw	r18, r8
     858:	43 2d       	mov	r20, r3
     85a:	be 01       	movw	r22, r28
     85c:	c3 01       	movw	r24, r6
     85e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     862:	5f c0       	rjmp	.+190    	; 0x922 <__stack+0xc3>
     864:	85 33       	cpi	r24, 0x35	; 53
     866:	59 f4       	brne	.+22     	; 0x87e <__stack+0x1f>
     868:	68 94       	set
     86a:	ee 24       	eor	r14, r14
     86c:	e5 f8       	bld	r14, 5
     86e:	82 01       	movw	r16, r4
     870:	94 01       	movw	r18, r8
     872:	43 2d       	mov	r20, r3
     874:	be 01       	movw	r22, r28
     876:	c3 01       	movw	r24, r6
     878:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     87c:	52 c0       	rjmp	.+164    	; 0x922 <__stack+0xc3>
     87e:	86 33       	cpi	r24, 0x36	; 54
     880:	61 f4       	brne	.+24     	; 0x89a <__stack+0x3b>
     882:	0f 2e       	mov	r0, r31
     884:	f1 e2       	ldi	r31, 0x21	; 33
     886:	ef 2e       	mov	r14, r31
     888:	f0 2d       	mov	r31, r0
     88a:	82 01       	movw	r16, r4
     88c:	94 01       	movw	r18, r8
     88e:	43 2d       	mov	r20, r3
     890:	be 01       	movw	r22, r28
     892:	c3 01       	movw	r24, r6
     894:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     898:	44 c0       	rjmp	.+136    	; 0x922 <__stack+0xc3>
     89a:	87 33       	cpi	r24, 0x37	; 55
     89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x57>
     89e:	0f 2e       	mov	r0, r31
     8a0:	f2 e2       	ldi	r31, 0x22	; 34
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	82 01       	movw	r16, r4
     8a8:	94 01       	movw	r18, r8
     8aa:	43 2d       	mov	r20, r3
     8ac:	be 01       	movw	r22, r28
     8ae:	c3 01       	movw	r24, r6
     8b0:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8b4:	36 c0       	rjmp	.+108    	; 0x922 <__stack+0xc3>
     8b6:	88 33       	cpi	r24, 0x38	; 56
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <__stack+0x73>
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f3 e2       	ldi	r31, 0x23	; 35
     8be:	ef 2e       	mov	r14, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	82 01       	movw	r16, r4
     8c4:	94 01       	movw	r18, r8
     8c6:	43 2d       	mov	r20, r3
     8c8:	be 01       	movw	r22, r28
     8ca:	c3 01       	movw	r24, r6
     8cc:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8d0:	28 c0       	rjmp	.+80     	; 0x922 <__stack+0xc3>
     8d2:	89 33       	cpi	r24, 0x39	; 57
     8d4:	61 f4       	brne	.+24     	; 0x8ee <__stack+0x8f>
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f4 e2       	ldi	r31, 0x24	; 36
     8da:	ef 2e       	mov	r14, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	82 01       	movw	r16, r4
     8e0:	94 01       	movw	r18, r8
     8e2:	43 2d       	mov	r20, r3
     8e4:	be 01       	movw	r22, r28
     8e6:	c3 01       	movw	r24, r6
     8e8:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8ec:	1a c0       	rjmp	.+52     	; 0x922 <__stack+0xc3>
     8ee:	8a 33       	cpi	r24, 0x3A	; 58
     8f0:	61 f4       	brne	.+24     	; 0x90a <__stack+0xab>
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f5 e2       	ldi	r31, 0x25	; 37
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	82 01       	movw	r16, r4
     8fc:	94 01       	movw	r18, r8
     8fe:	43 2d       	mov	r20, r3
     900:	be 01       	movw	r22, r28
     902:	c3 01       	movw	r24, r6
     904:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0xc3>
     90a:	0f 2e       	mov	r0, r31
     90c:	ff eb       	ldi	r31, 0xBF	; 191
     90e:	ef 2e       	mov	r14, r31
     910:	f0 2d       	mov	r31, r0
     912:	e8 0e       	add	r14, r24
     914:	82 01       	movw	r16, r4
     916:	94 01       	movw	r18, r8
     918:	43 2d       	mov	r20, r3
     91a:	be 01       	movw	r22, r28
     91c:	c3 01       	movw	r24, r6
     91e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     922:	f3 94       	inc	r15
     924:	ca 0d       	add	r28, r10
     926:	db 1d       	adc	r29, r11
     928:	f6 01       	movw	r30, r12
     92a:	ef 0d       	add	r30, r15
     92c:	f1 1d       	adc	r31, r1
     92e:	80 81       	ld	r24, Z
     930:	81 11       	cpse	r24, r1
     932:	40 cf       	rjmp	.-384    	; 0x7b4 <_Z12print_stringjjhjjPKc+0x4c>
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	3f 90       	pop	r3
     956:	08 95       	ret

00000958 <_Z11draw_h_linejjjj>:
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	6c 01       	movw	r12, r24
     96a:	eb 01       	movw	r28, r22
     96c:	8a 01       	movw	r16, r20
     96e:	79 01       	movw	r14, r18
     970:	64 17       	cp	r22, r20
     972:	75 07       	cpc	r23, r21
     974:	48 f4       	brcc	.+18     	; 0x988 <_Z11draw_h_linejjjj+0x30>
     976:	a7 01       	movw	r20, r14
     978:	be 01       	movw	r22, r28
     97a:	c6 01       	movw	r24, r12
     97c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     980:	21 96       	adiw	r28, 0x01	; 1
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	b8 f3       	brcs	.-18     	; 0x976 <_Z11draw_h_linejjjj+0x1e>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	08 95       	ret

0000099a <_Z11draw_v_linejjjj>:
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	6c 01       	movw	r12, r24
     9ac:	eb 01       	movw	r28, r22
     9ae:	8a 01       	movw	r16, r20
     9b0:	79 01       	movw	r14, r18
     9b2:	64 17       	cp	r22, r20
     9b4:	75 07       	cpc	r23, r21
     9b6:	48 f4       	brcc	.+18     	; 0x9ca <_Z11draw_v_linejjjj+0x30>
     9b8:	a7 01       	movw	r20, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     9c2:	21 96       	adiw	r28, 0x01	; 1
     9c4:	c0 17       	cp	r28, r16
     9c6:	d1 07       	cpc	r29, r17
     9c8:	b8 f3       	brcs	.-18     	; 0x9b8 <_Z11draw_v_linejjjj+0x1e>
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <_Z13my_draw_crossjjjj>:
     9dc:	5f 92       	push	r5
     9de:	6f 92       	push	r6
     9e0:	7f 92       	push	r7
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	5c 01       	movw	r10, r24
     9fc:	a4 1a       	sub	r10, r20
     9fe:	b5 0a       	sbc	r11, r21
     a00:	6b 01       	movw	r12, r22
     a02:	c4 1a       	sub	r12, r20
     a04:	d5 0a       	sbc	r13, r21
     a06:	7c 01       	movw	r14, r24
     a08:	e4 0e       	add	r14, r20
     a0a:	f5 1e       	adc	r15, r21
     a0c:	8a 01       	movw	r16, r20
     a0e:	00 0f       	add	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	01 15       	cp	r16, r1
     a14:	11 05       	cpc	r17, r1
     a16:	d9 f0       	breq	.+54     	; 0xa4e <_Z13my_draw_crossjjjj+0x72>
     a18:	49 01       	movw	r8, r18
     a1a:	61 2c       	mov	r6, r1
     a1c:	71 2c       	mov	r7, r1
     a1e:	51 2c       	mov	r5, r1
     a20:	e6 01       	movw	r28, r12
     a22:	c6 0d       	add	r28, r6
     a24:	d7 1d       	adc	r29, r7
     a26:	a4 01       	movw	r20, r8
     a28:	be 01       	movw	r22, r28
     a2a:	c5 01       	movw	r24, r10
     a2c:	86 0d       	add	r24, r6
     a2e:	97 1d       	adc	r25, r7
     a30:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     a34:	a4 01       	movw	r20, r8
     a36:	be 01       	movw	r22, r28
     a38:	c7 01       	movw	r24, r14
     a3a:	86 19       	sub	r24, r6
     a3c:	97 09       	sbc	r25, r7
     a3e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     a42:	53 94       	inc	r5
     a44:	65 2c       	mov	r6, r5
     a46:	71 2c       	mov	r7, r1
     a48:	60 16       	cp	r6, r16
     a4a:	71 06       	cpc	r7, r17
     a4c:	48 f3       	brcs	.-46     	; 0xa20 <_Z13my_draw_crossjjjj+0x44>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	9f 90       	pop	r9
     a64:	8f 90       	pop	r8
     a66:	7f 90       	pop	r7
     a68:	6f 90       	pop	r6
     a6a:	5f 90       	pop	r5
     a6c:	08 95       	ret

00000a6e <_Z19adafruit_drawCirclejjjj>:

void adafruit_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) { //unutar adaFruit library, bolji zato jer mu das srediste, i radius, a ovaj draw_cirle ne kuzim kako radi
     a6e:	2f 92       	push	r2
     a70:	3f 92       	push	r3
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <_Z19adafruit_drawCirclejjjj+0x26>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <_Z19adafruit_drawCirclejjjj+0x28>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <_Z19adafruit_drawCirclejjjj+0x2a>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	6c 01       	movw	r12, r24
     a9e:	4b 01       	movw	r8, r22
     aa0:	5a 83       	std	Y+2, r21	; 0x02
     aa2:	49 83       	std	Y+1, r20	; 0x01
     aa4:	3c 83       	std	Y+4, r19	; 0x04
     aa6:	2b 83       	std	Y+3, r18	; 0x03
	int16_t f = 1 - r;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	7c 01       	movw	r14, r24
     aae:	e4 1a       	sub	r14, r20
     ab0:	f5 0a       	sbc	r15, r21
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
     ab2:	1a 01       	movw	r2, r20
     ab4:	31 94       	neg	r3
     ab6:	21 94       	neg	r2
     ab8:	31 08       	sbc	r3, r1
     aba:	22 0c       	add	r2, r2
     abc:	33 1c       	adc	r3, r3
	int16_t x = 0;
	int16_t y = r;
     abe:	8a 01       	movw	r16, r20

	draw_pixel(x0, y0 + r, color);
     ac0:	ba 01       	movw	r22, r20
     ac2:	68 0d       	add	r22, r8
     ac4:	79 1d       	adc	r23, r9
     ac6:	a9 01       	movw	r20, r18
     ac8:	c6 01       	movw	r24, r12
     aca:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0, y0 - r, color);
     ace:	b4 01       	movw	r22, r8
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	3a 81       	ldd	r19, Y+2	; 0x02
     ad4:	62 1b       	sub	r22, r18
     ad6:	73 0b       	sbc	r23, r19
     ad8:	4b 81       	ldd	r20, Y+3	; 0x03
     ada:	5c 81       	ldd	r21, Y+4	; 0x04
     adc:	c6 01       	movw	r24, r12
     ade:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0 + r, y0, color);
     ae2:	4b 81       	ldd	r20, Y+3	; 0x03
     ae4:	5c 81       	ldd	r21, Y+4	; 0x04
     ae6:	b4 01       	movw	r22, r8
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	8c 0d       	add	r24, r12
     aee:	9d 1d       	adc	r25, r13
     af0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0 - r, y0, color);
     af4:	4b 81       	ldd	r20, Y+3	; 0x03
     af6:	5c 81       	ldd	r21, Y+4	; 0x04
     af8:	b4 01       	movw	r22, r8
     afa:	c6 01       	movw	r24, r12
     afc:	29 81       	ldd	r18, Y+1	; 0x01
     afe:	3a 81       	ldd	r19, Y+2	; 0x02
     b00:	82 1b       	sub	r24, r18
     b02:	93 0b       	sbc	r25, r19
     b04:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>

	while (x < y) {
     b08:	10 16       	cp	r1, r16
     b0a:	11 06       	cpc	r1, r17
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <_Z19adafruit_drawCirclejjjj+0xa2>
     b0e:	74 c0       	rjmp	.+232    	; 0xbf8 <_Z19adafruit_drawCirclejjjj+0x18a>
     b10:	1e 82       	std	Y+6, r1	; 0x06
     b12:	1d 82       	std	Y+5, r1	; 0x05
     b14:	66 24       	eor	r6, r6
     b16:	63 94       	inc	r6
     b18:	71 2c       	mov	r7, r1
		if (f >= 0) {
     b1a:	ff 20       	and	r15, r15
     b1c:	3c f0       	brlt	.+14     	; 0xb2c <_Z19adafruit_drawCirclejjjj+0xbe>
			y--;
     b1e:	01 50       	subi	r16, 0x01	; 1
     b20:	11 09       	sbc	r17, r1
			ddF_y += 2;
     b22:	32 e0       	ldi	r19, 0x02	; 2
     b24:	23 0e       	add	r2, r19
     b26:	31 1c       	adc	r3, r1
			f += ddF_y;
     b28:	e2 0c       	add	r14, r2
     b2a:	f3 1c       	adc	r15, r3
		}
		x++;
     b2c:	8d 81       	ldd	r24, Y+5	; 0x05
     b2e:	9e 81       	ldd	r25, Y+6	; 0x06
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
		ddF_x += 2;
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	69 0e       	add	r6, r25
     b3a:	71 1c       	adc	r7, r1
		f += ddF_x;
     b3c:	e6 0c       	add	r14, r6
     b3e:	f7 1c       	adc	r15, r7
     b40:	ad 80       	ldd	r10, Y+5	; 0x05
     b42:	be 80       	ldd	r11, Y+6	; 0x06
     b44:	ac 0c       	add	r10, r12
     b46:	bd 1c       	adc	r11, r13

		draw_pixel(x0 + x, y0 + y, color);
     b48:	4b 81       	ldd	r20, Y+3	; 0x03
     b4a:	5c 81       	ldd	r21, Y+4	; 0x04
     b4c:	94 01       	movw	r18, r8
     b4e:	20 0f       	add	r18, r16
     b50:	31 1f       	adc	r19, r17
     b52:	3a 83       	std	Y+2, r19	; 0x02
     b54:	29 83       	std	Y+1, r18	; 0x01
     b56:	b9 01       	movw	r22, r18
     b58:	c5 01       	movw	r24, r10
     b5a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     b5e:	26 01       	movw	r4, r12
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	48 1a       	sub	r4, r24
     b66:	59 0a       	sbc	r5, r25
		draw_pixel(x0 - x, y0 + y, color);
     b68:	4b 81       	ldd	r20, Y+3	; 0x03
     b6a:	5c 81       	ldd	r21, Y+4	; 0x04
     b6c:	69 81       	ldd	r22, Y+1	; 0x01
     b6e:	7a 81       	ldd	r23, Y+2	; 0x02
     b70:	c2 01       	movw	r24, r4
     b72:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 + x, y0 - y, color);
     b76:	4b 81       	ldd	r20, Y+3	; 0x03
     b78:	5c 81       	ldd	r21, Y+4	; 0x04
     b7a:	94 01       	movw	r18, r8
     b7c:	20 1b       	sub	r18, r16
     b7e:	31 0b       	sbc	r19, r17
     b80:	3a 83       	std	Y+2, r19	; 0x02
     b82:	29 83       	std	Y+1, r18	; 0x01
     b84:	b9 01       	movw	r22, r18
     b86:	c5 01       	movw	r24, r10
     b88:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - x, y0 - y, color);
     b8c:	4b 81       	ldd	r20, Y+3	; 0x03
     b8e:	5c 81       	ldd	r21, Y+4	; 0x04
     b90:	69 81       	ldd	r22, Y+1	; 0x01
     b92:	7a 81       	ldd	r23, Y+2	; 0x02
     b94:	c2 01       	movw	r24, r4
     b96:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     b9a:	ad 80       	ldd	r10, Y+5	; 0x05
     b9c:	be 80       	ldd	r11, Y+6	; 0x06
     b9e:	a8 0c       	add	r10, r8
     ba0:	b9 1c       	adc	r11, r9
		draw_pixel(x0 + y, y0 + x, color);
     ba2:	4b 81       	ldd	r20, Y+3	; 0x03
     ba4:	5c 81       	ldd	r21, Y+4	; 0x04
     ba6:	b5 01       	movw	r22, r10
     ba8:	26 01       	movw	r4, r12
     baa:	40 0e       	add	r4, r16
     bac:	51 1e       	adc	r5, r17
     bae:	c2 01       	movw	r24, r4
     bb0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - y, y0 + x, color);
     bb4:	4b 81       	ldd	r20, Y+3	; 0x03
     bb6:	5c 81       	ldd	r21, Y+4	; 0x04
     bb8:	b5 01       	movw	r22, r10
     bba:	c6 01       	movw	r24, r12
     bbc:	80 1b       	sub	r24, r16
     bbe:	91 0b       	sbc	r25, r17
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     bc8:	54 01       	movw	r10, r8
     bca:	2d 81       	ldd	r18, Y+5	; 0x05
     bcc:	3e 81       	ldd	r19, Y+6	; 0x06
     bce:	a2 1a       	sub	r10, r18
     bd0:	b3 0a       	sbc	r11, r19
		draw_pixel(x0 + y, y0 - x, color);
     bd2:	4b 81       	ldd	r20, Y+3	; 0x03
     bd4:	5c 81       	ldd	r21, Y+4	; 0x04
     bd6:	b5 01       	movw	r22, r10
     bd8:	c2 01       	movw	r24, r4
     bda:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - y, y0 - x, color);
     bde:	4b 81       	ldd	r20, Y+3	; 0x03
     be0:	5c 81       	ldd	r21, Y+4	; 0x04
     be2:	b5 01       	movw	r22, r10
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0, y0 + r, color);
	draw_pixel(x0, y0 - r, color);
	draw_pixel(x0 + r, y0, color);
	draw_pixel(x0 - r, y0, color);

	while (x < y) {
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	80 17       	cp	r24, r16
     bf2:	91 07       	cpc	r25, r17
     bf4:	0c f4       	brge	.+2      	; 0xbf8 <_Z19adafruit_drawCirclejjjj+0x18a>
     bf6:	91 cf       	rjmp	.-222    	; 0xb1a <_Z19adafruit_drawCirclejjjj+0xac>
		draw_pixel(x0 + y, y0 + x, color);
		draw_pixel(x0 - y, y0 + x, color);
		draw_pixel(x0 + y, y0 - x, color);
		draw_pixel(x0 - y, y0 - x, color);
	}
}
     bf8:	26 96       	adiw	r28, 0x06	; 6
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	9f 90       	pop	r9
     c1a:	8f 90       	pop	r8
     c1c:	7f 90       	pop	r7
     c1e:	6f 90       	pop	r6
     c20:	5f 90       	pop	r5
     c22:	4f 90       	pop	r4
     c24:	3f 90       	pop	r3
     c26:	2f 90       	pop	r2
     c28:	08 95       	ret

00000c2a <_Z14draw_rectanglejjjjj>:

// setting a color to the pixels of a rectangle
void draw_rectangle(uint16_t x, uint16_t y, uint16_t dx, uint16_t dy, uint16_t color) {
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	6c 01       	movw	r12, r24
     c40:	5b 01       	movw	r10, r22
     c42:	7a 01       	movw	r14, r20
	draw_h_line(x, y, y + dy, color);
     c44:	eb 01       	movw	r28, r22
     c46:	c2 0f       	add	r28, r18
     c48:	d3 1f       	adc	r29, r19
     c4a:	98 01       	movw	r18, r16
     c4c:	ae 01       	movw	r20, r28
     c4e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(x + dx, y, y + dy, color);
     c52:	ec 0c       	add	r14, r12
     c54:	fd 1c       	adc	r15, r13
     c56:	98 01       	movw	r18, r16
     c58:	ae 01       	movw	r20, r28
     c5a:	b5 01       	movw	r22, r10
     c5c:	c7 01       	movw	r24, r14
     c5e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_v_line(y, x, x + dx, color);
     c62:	98 01       	movw	r18, r16
     c64:	a7 01       	movw	r20, r14
     c66:	b6 01       	movw	r22, r12
     c68:	c5 01       	movw	r24, r10
     c6a:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(y + dy, x, x + dx, color);
     c6e:	98 01       	movw	r18, r16
     c70:	a7 01       	movw	r20, r14
     c72:	b6 01       	movw	r22, r12
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	08 95       	ret

00000c90 <_Z11check_touchjjjjjj>:

// check if the screen is being touched
uint8_t check_touch(uint16_t TP_X, uint16_t TP_Y, uint16_t x, uint16_t y, uint16_t dx, uint16_t dy) {
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	fc 01       	movw	r30, r24
	return TP_Y >= y && TP_Y <= y + dy && TP_X >= x && TP_X <= x + dx;
     c9a:	62 17       	cp	r22, r18
     c9c:	73 07       	cpc	r23, r19
     c9e:	80 f0       	brcs	.+32     	; 0xcc0 <_Z11check_touchjjjjjj+0x30>
     ca0:	e2 0e       	add	r14, r18
     ca2:	f3 1e       	adc	r15, r19
     ca4:	e6 16       	cp	r14, r22
     ca6:	f7 06       	cpc	r15, r23
     ca8:	68 f0       	brcs	.+26     	; 0xcc4 <_Z11check_touchjjjjjj+0x34>
     caa:	84 17       	cp	r24, r20
     cac:	95 07       	cpc	r25, r21
     cae:	60 f0       	brcs	.+24     	; 0xcc8 <_Z11check_touchjjjjjj+0x38>
     cb0:	04 0f       	add	r16, r20
     cb2:	15 1f       	adc	r17, r21
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 17       	cp	r16, r30
     cb8:	1f 07       	cpc	r17, r31
     cba:	38 f4       	brcc	.+14     	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
}
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	08 95       	ret

00000cd4 <_Z14print_keyboardPc>:
uint8_t currentPlayer = CROSS;	
uint8_t gameOver = 0;
uint8_t numberOfMoves = 0;	
	

void print_keyboard(char str[]) {
     cd4:	4f 92       	push	r4
     cd6:	5f 92       	push	r5
     cd8:	6f 92       	push	r6
     cda:	7f 92       	push	r7
     cdc:	8f 92       	push	r8
     cde:	9f 92       	push	r9
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_Z14print_keyboardPc+0x22>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	3c 01       	movw	r6, r24
	uint8_t offset_x, offset_y;
	
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej ??
     cfc:	51 2c       	mov	r5, r1
		sprintf(tmp, "%c\0", str[i]);
     cfe:	0f 2e       	mov	r0, r31
     d00:	fd e6       	ldi	r31, 0x6D	; 109
     d02:	8f 2e       	mov	r8, r31
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	9f 2e       	mov	r9, r31
     d08:	f0 2d       	mov	r31, r0
     d0a:	ce 01       	movw	r24, r28
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	5c 01       	movw	r10, r24
		draw_rectangle(KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     d10:	0f 2e       	mov	r0, r31
     d12:	f5 e2       	ldi	r31, 0x25	; 37
     d14:	4f 2e       	mov	r4, r31
     d16:	f0 2d       	mov	r31, r0
	
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej ??
		sprintf(tmp, "%c\0", str[i]);
     d18:	f3 01       	movw	r30, r6
     d1a:	81 91       	ld	r24, Z+
     d1c:	3f 01       	movw	r6, r30
     d1e:	1f 92       	push	r1
     d20:	8f 93       	push	r24
     d22:	9f 92       	push	r9
     d24:	8f 92       	push	r8
     d26:	bf 92       	push	r11
     d28:	af 92       	push	r10
     d2a:	0e 94 4b 10 	call	0x2096	; 0x2096 <sprintf>
		draw_rectangle(KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     d2e:	65 2d       	mov	r22, r5
     d30:	67 70       	andi	r22, 0x07	; 7
     d32:	46 9e       	mul	r4, r22
     d34:	70 01       	movw	r14, r0
     d36:	11 24       	eor	r1, r1
     d38:	c5 2c       	mov	r12, r5
     d3a:	c6 94       	lsr	r12
     d3c:	c6 94       	lsr	r12
     d3e:	c6 94       	lsr	r12
     d40:	4c 9c       	mul	r4, r12
     d42:	60 01       	movw	r12, r0
     d44:	11 24       	eor	r1, r1
     d46:	b7 01       	movw	r22, r14
     d48:	66 5f       	subi	r22, 0xF6	; 246
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	0f ef       	ldi	r16, 0xFF	; 255
     d4e:	1f ef       	ldi	r17, 0xFF	; 255
     d50:	20 e2       	ldi	r18, 0x20	; 32
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	c6 01       	movw	r24, r12
     d5a:	8a 5b       	subi	r24, 0xBA	; 186
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(KEY_Y + offset_y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE / 2), KEY_X + i%KEYS_IN_ONE_ROW *(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
     d62:	b7 01       	movw	r22, r14
     d64:	6e 5e       	subi	r22, 0xEE	; 238
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	75 01       	movw	r14, r10
     d6a:	0e ea       	ldi	r16, 0xAE	; 174
     d6c:	1a e1       	ldi	r17, 0x1A	; 26
     d6e:	2f ef       	ldi	r18, 0xFF	; 255
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	43 e0       	ldi	r20, 0x03	; 3
     d74:	c6 01       	movw	r24, r12
     d76:	86 5b       	subi	r24, 0xB6	; 182
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	uint8_t offset_x, offset_y;
	
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej ??
     d7e:	53 94       	inc	r5
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	f6 e1       	ldi	r31, 0x16	; 22
     d8e:	5f 12       	cpse	r5, r31
     d90:	c3 cf       	rjmp	.-122    	; 0xd18 <_Z14print_keyboardPc+0x44>
		sprintf(tmp, "%c\0", str[i]);
		draw_rectangle(KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
		print_string(KEY_Y + offset_y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE / 2), KEY_X + i%KEYS_IN_ONE_ROW *(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
	}
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	7f 90       	pop	r7
     db0:	6f 90       	pop	r6
     db2:	5f 90       	pop	r5
     db4:	4f 90       	pop	r4
     db6:	08 95       	ret

00000db8 <_Z14drawHomeScreenv>:


void drawHomeScreen() {
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (HS_W - strlen("NEW PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(HS_S_Y, HS_S_X, HS_H, HS_W, WHITE);
     dc0:	0f ef       	ldi	r16, 0xFF	; 255
     dc2:	1f ef       	ldi	r17, 0xFF	; 255
     dc4:	28 e1       	ldi	r18, 0x18	; 24
     dc6:	31 e0       	ldi	r19, 0x01	; 1
     dc8:	4c e3       	ldi	r20, 0x3C	; 60
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	64 e1       	ldi	r22, 0x14	; 20
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(HS_S_Y + offset_y, HS_S_X + offset_x, 3, WHITE, CYAN, "NEW PLAYER\0");
     dd8:	0f 2e       	mov	r0, r31
     dda:	f1 e7       	ldi	r31, 0x71	; 113
     ddc:	ef 2e       	mov	r14, r31
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	ff 2e       	mov	r15, r31
     de2:	f0 2d       	mov	r31, r0
     de4:	0e ea       	ldi	r16, 0xAE	; 174
     de6:	1a e1       	ldi	r17, 0x1A	; 26
     de8:	2f ef       	ldi	r18, 0xFF	; 255
     dea:	3f ef       	ldi	r19, 0xFF	; 255
     dec:	43 e0       	ldi	r20, 0x03	; 3
     dee:	65 e5       	ldi	r22, 0x55	; 85
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	8c e1       	ldi	r24, 0x1C	; 28
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("CHOOSE PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(CP_Y, CP_X, CP_H, CP_W, WHITE);
     dfa:	0f ef       	ldi	r16, 0xFF	; 255
     dfc:	1f ef       	ldi	r17, 0xFF	; 255
     dfe:	28 e1       	ldi	r18, 0x18	; 24
     e00:	31 e0       	ldi	r19, 0x01	; 1
     e02:	4c e3       	ldi	r20, 0x3C	; 60
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	64 e1       	ldi	r22, 0x14	; 20
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e5       	ldi	r24, 0x50	; 80
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(CP_Y + offset_y, CP_X + offset_x, 3, WHITE, CYAN, "CHOOSE PLAYER\0");
     e12:	0f 2e       	mov	r0, r31
     e14:	fd e7       	ldi	r31, 0x7D	; 125
     e16:	ef 2e       	mov	r14, r31
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ff 2e       	mov	r15, r31
     e1c:	f0 2d       	mov	r31, r0
     e1e:	0e ea       	ldi	r16, 0xAE	; 174
     e20:	1a e1       	ldi	r17, 0x1A	; 26
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	43 e0       	ldi	r20, 0x03	; 3
     e28:	6e e3       	ldi	r22, 0x3E	; 62
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	82 e6       	ldi	r24, 0x62	; 98
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("LEADERBOARDS") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(LB_Y, LB_X, LB_H, LB_W, WHITE);
     e34:	0f ef       	ldi	r16, 0xFF	; 255
     e36:	1f ef       	ldi	r17, 0xFF	; 255
     e38:	28 e1       	ldi	r18, 0x18	; 24
     e3a:	31 e0       	ldi	r19, 0x01	; 1
     e3c:	4c e3       	ldi	r20, 0x3C	; 60
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	64 e1       	ldi	r22, 0x14	; 20
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	86 e9       	ldi	r24, 0x96	; 150
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(LB_Y + offset_y, LB_X + offset_x, 3, WHITE, CYAN, "LEADERBOARDS\0");
     e4c:	0f 2e       	mov	r0, r31
     e4e:	fc e8       	ldi	r31, 0x8C	; 140
     e50:	ef 2e       	mov	r14, r31
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ff 2e       	mov	r15, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	0e ea       	ldi	r16, 0xAE	; 174
     e5a:	1a e1       	ldi	r17, 0x1A	; 26
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	43 e0       	ldi	r20, 0x03	; 3
     e62:	66 e4       	ldi	r22, 0x46	; 70
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	88 ea       	ldi	r24, 0xA8	; 168
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	08 95       	ret

00000e78 <_Z14drawBackButtonv>:

void drawBackButton() {
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (BCK_BTN_W - strlen("BACK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (BCK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W, WHITE);
     e80:	0f ef       	ldi	r16, 0xFF	; 255
     e82:	1f ef       	ldi	r17, 0xFF	; 255
     e84:	20 e5       	ldi	r18, 0x50	; 80
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	48 e2       	ldi	r20, 0x28	; 40
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	6a e0       	ldi	r22, 0x0A	; 10
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	8a e0       	ldi	r24, 0x0A	; 10
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(BCK_BTN_Y + offset_y, BCK_BTN_X + offset_x, 3, WHITE, CYAN, "BACK\0");
     e98:	0f 2e       	mov	r0, r31
     e9a:	fa e9       	ldi	r31, 0x9A	; 154
     e9c:	ef 2e       	mov	r14, r31
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	ff 2e       	mov	r15, r31
     ea2:	f0 2d       	mov	r31, r0
     ea4:	0e ea       	ldi	r16, 0xAE	; 174
     ea6:	1a e1       	ldi	r17, 0x1A	; 26
     ea8:	2f ef       	ldi	r18, 0xFF	; 255
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	43 e0       	ldi	r20, 0x03	; 3
     eae:	64 e1       	ldi	r22, 0x14	; 20
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	82 e1       	ldi	r24, 0x12	; 18
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	08 95       	ret

00000ec4 <_Z6clrScrv>:

void clrScr() {
	set_background_color(CYAN);
     ec4:	8e ea       	ldi	r24, 0xAE	; 174
     ec6:	9a e1       	ldi	r25, 0x1A	; 26
     ec8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
     ecc:	08 95       	ret

00000ece <_Z18resetNewPlayerNamev>:
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	a6 e6       	ldi	r26, 0x66	; 102
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
		newPlayerName[i] = ' ';
     ed4:	90 e2       	ldi	r25, 0x20	; 32
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     ed6:	fd 01       	movw	r30, r26
     ed8:	01 90       	ld	r0, Z+
     eda:	00 20       	and	r0, r0
     edc:	e9 f7       	brne	.-6      	; 0xed8 <_Z18resetNewPlayerNamev+0xa>
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	e6 56       	subi	r30, 0x66	; 102
     ee2:	f0 40       	sbci	r31, 0x00	; 0
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	2e 17       	cp	r18, r30
     eea:	3f 07       	cpc	r19, r31
     eec:	30 f4       	brcc	.+12     	; 0xefa <_Z18resetNewPlayerNamev+0x2c>
		newPlayerName[i] = ' ';
     eee:	f9 01       	movw	r30, r18
     ef0:	ea 59       	subi	r30, 0x9A	; 154
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	90 83       	st	Z, r25
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	ee cf       	rjmp	.-36     	; 0xed6 <_Z18resetNewPlayerNamev+0x8>
		newPlayerName[i] = ' ';
	}
	newPlayerNameIndex = 0;
     efa:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <newPlayerNameIndex>
     efe:	08 95       	ret

00000f00 <_Z18resetPlayersColorsP6Player>:
}

void resetPlayersColors(Player *players) { //andClicks,, mozda bolje nazvat funkciju
	for(uint8_t i = 0; i < players_size; i++) {
     f00:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
     f04:	22 23       	and	r18, r18
     f06:	61 f0       	breq	.+24     	; 0xf20 <_Z18resetPlayersColorsP6Player+0x20>
     f08:	e8 2f       	mov	r30, r24
     f0a:	f9 2f       	mov	r31, r25
     f0c:	80 e0       	ldi	r24, 0x00	; 0
		players[i].color = WHITE;
     f0e:	4f ef       	ldi	r20, 0xFF	; 255
     f10:	5f ef       	ldi	r21, 0xFF	; 255
     f12:	52 83       	std	Z+2, r21	; 0x02
     f14:	41 83       	std	Z+1, r20	; 0x01
		players[i].clicked = 0;
     f16:	13 82       	std	Z+3, r1	; 0x03
	}
	newPlayerNameIndex = 0;
}

void resetPlayersColors(Player *players) { //andClicks,, mozda bolje nazvat funkciju
	for(uint8_t i = 0; i < players_size; i++) {
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	3b 96       	adiw	r30, 0x0b	; 11
     f1c:	82 13       	cpse	r24, r18
     f1e:	f9 cf       	rjmp	.-14     	; 0xf12 <_Z18resetPlayersColorsP6Player+0x12>
		players[i].color = WHITE;
		players[i].clicked = 0;
	}
	cross_chosen = NONE;
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <cross_chosen>
	nought_chosen = NONE;
     f26:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <nought_chosen>
     f2a:	08 95       	ret

00000f2c <_Z9resetGamev>:
}
void resetGame() {
	memset(board, 0, sizeof(board));
     f2c:	89 e0       	ldi	r24, 0x09	; 9
     f2e:	ee eb       	ldi	r30, 0xBE	; 190
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	df 01       	movw	r26, r30
     f34:	1d 92       	st	X+, r1
     f36:	8a 95       	dec	r24
     f38:	e9 f7       	brne	.-6      	; 0xf34 <_Z9resetGamev+0x8>
	currentPlayer = CROSS; //reset player
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	gameOver = 0;
     f40:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <gameOver>
	numberOfMoves = 0;
     f44:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
     f48:	08 95       	ret

00000f4a <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>:
	//game_rerender = 1;
}
void checkBackButtonPressed(uint16_t *TP_X, uint16_t *TP_Y, uint8_t *currentPage, Player *players, uint8_t *game_rerender) {
     f4a:	8f 92       	push	r8
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
	if(get_bit(PINB, T_IRQ) == 0) {
     f62:	b0 99       	sbic	0x16, 0	; 22
     f64:	35 c0       	rjmp	.+106    	; 0xfd0 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x86>
     f66:	58 01       	movw	r10, r16
     f68:	49 01       	movw	r8, r18
     f6a:	6a 01       	movw	r12, r20
     f6c:	8b 01       	movw	r16, r22
     f6e:	ec 01       	movw	r28, r24
		read_touch_coords(TP_X, TP_Y);
     f70:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
		if(check_touch(*TP_X, *TP_Y, BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W)) { //BACK button, ovo bolje napravit preko define-a --jesam
     f74:	f8 01       	movw	r30, r16
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	0f 2e       	mov	r0, r31
     f7c:	f0 e5       	ldi	r31, 0x50	; 80
     f7e:	ef 2e       	mov	r14, r31
     f80:	f1 2c       	mov	r15, r1
     f82:	f0 2d       	mov	r31, r0
     f84:	08 e2       	ldi	r16, 0x28	; 40
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	2a e0       	ldi	r18, 0x0A	; 10
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	4a e0       	ldi	r20, 0x0A	; 10
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
     f98:	88 23       	and	r24, r24
     f9a:	d1 f0       	breq	.+52     	; 0xfd0 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x86>
			//clrScr();
			//_delay_ms(10);
			if(*currentPage == NEW_PLAYER) { //ako je bio u NEW PLAYER da cleara
     f9c:	f6 01       	movw	r30, r12
     f9e:	80 81       	ld	r24, Z
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x66>
				resetNewPlayerName();
     fa4:	0e 94 67 07 	call	0xece	; 0xece <_Z18resetNewPlayerNamev>
				np_rerender = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <np_rerender>
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x82>
			}else if(*currentPage == CHOOSE_PLAYER || *currentPage == GAME) { //ako je bio u CHOOSE PLAYER ili u GAME
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x6e>
     fb4:	84 30       	cpi	r24, 0x04	; 4
     fb6:	51 f4       	brne	.+20     	; 0xfcc <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x82>
				resetPlayersColors(players);
     fb8:	c4 01       	movw	r24, r8
     fba:	0e 94 80 07 	call	0xf00	; 0xf00 <_Z18resetPlayersColorsP6Player>
				resetGame();
     fbe:	0e 94 96 07 	call	0xf2c	; 0xf2c <_Z9resetGamev>
				cp_rerender = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cp_rerender>
				*game_rerender = 1;
     fc8:	f5 01       	movw	r30, r10
     fca:	80 83       	st	Z, r24
			}
			//*game_rerender = 1;
			*currentPage = HOMESCREEN;
     fcc:	f6 01       	movw	r30, r12
     fce:	10 82       	st	Z, r1
			//clrScr();
		}
	}
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	cf 90       	pop	r12
     fe0:	bf 90       	pop	r11
     fe2:	af 90       	pop	r10
     fe4:	9f 90       	pop	r9
     fe6:	8f 90       	pop	r8
     fe8:	08 95       	ret

00000fea <_Z12sortByPointsP6Player>:
void sortByPoints(Player *players) {
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	2b 97       	sbiw	r28, 0x0b	; 11
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
	for(uint8_t i = 0; i < players_size - 1; i++) {
    1006:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	21 50       	subi	r18, 0x01	; 1
    100e:	31 09       	sbc	r19, r1
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	0c f0       	brlt	.+2      	; 0x1018 <_Z12sortByPointsP6Player+0x2e>
    1016:	55 c0       	rjmp	.+170    	; 0x10c2 <_Z12sortByPointsP6Player+0xd8>
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	f1 2c       	mov	r15, r1
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
			if(players[j].points < players[j+1].points) {
    101e:	7b e0       	ldi	r23, 0x0B	; 11
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
    1020:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	24 1b       	sub	r18, r20
    1028:	35 0b       	sbc	r19, r21
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	31 09       	sbc	r19, r1
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	dc f5       	brge	.+118    	; 0x10aa <_Z12sortByPointsP6Player+0xc0>
    1034:	60 e0       	ldi	r22, 0x00	; 0
			if(players[j].points < players[j+1].points) {
    1036:	76 9f       	mul	r23, r22
    1038:	90 01       	movw	r18, r0
    103a:	11 24       	eor	r1, r1
    103c:	8c 01       	movw	r16, r24
    103e:	02 0f       	add	r16, r18
    1040:	13 1f       	adc	r17, r19
    1042:	25 5f       	subi	r18, 0xF5	; 245
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	28 0f       	add	r18, r24
    1048:	39 1f       	adc	r19, r25
    104a:	d8 01       	movw	r26, r16
    104c:	fc 91       	ld	r31, X
    104e:	d9 01       	movw	r26, r18
    1050:	ec 91       	ld	r30, X
    1052:	fe 17       	cp	r31, r30
    1054:	e8 f4       	brcc	.+58     	; 0x1090 <_Z12sortByPointsP6Player+0xa6>
				Player tmp = players[j];
    1056:	0f 2e       	mov	r0, r31
    1058:	fb e0       	ldi	r31, 0x0B	; 11
    105a:	ef 2e       	mov	r14, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	f8 01       	movw	r30, r16
    1060:	de 01       	movw	r26, r28
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	01 90       	ld	r0, Z+
    1066:	0d 92       	st	X+, r0
    1068:	ea 94       	dec	r14
    106a:	e1 f7       	brne	.-8      	; 0x1064 <_Z12sortByPointsP6Player+0x7a>
				players[j] = players[j+1];
    106c:	0f 2e       	mov	r0, r31
    106e:	fb e0       	ldi	r31, 0x0B	; 11
    1070:	ef 2e       	mov	r14, r31
    1072:	f0 2d       	mov	r31, r0
    1074:	f9 01       	movw	r30, r18
    1076:	d8 01       	movw	r26, r16
    1078:	01 90       	ld	r0, Z+
    107a:	0d 92       	st	X+, r0
    107c:	ea 94       	dec	r14
    107e:	e1 f7       	brne	.-8      	; 0x1078 <_Z12sortByPointsP6Player+0x8e>
				players[j+1] = tmp;
    1080:	1b e0       	ldi	r17, 0x0B	; 11
    1082:	fe 01       	movw	r30, r28
    1084:	31 96       	adiw	r30, 0x01	; 1
    1086:	d9 01       	movw	r26, r18
    1088:	01 90       	ld	r0, Z+
    108a:	0d 92       	st	X+, r0
    108c:	1a 95       	dec	r17
    108e:	e1 f7       	brne	.-8      	; 0x1088 <_Z12sortByPointsP6Player+0x9e>
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	e6 2f       	mov	r30, r22
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	24 1b       	sub	r18, r20
    109e:	35 0b       	sbc	r19, r21
    10a0:	21 50       	subi	r18, 0x01	; 1
    10a2:	31 09       	sbc	r19, r1
    10a4:	e2 17       	cp	r30, r18
    10a6:	f3 07       	cpc	r31, r19
    10a8:	34 f2       	brlt	.-116    	; 0x1036 <_Z12sortByPointsP6Player+0x4c>
			//clrScr();
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
    10aa:	f3 94       	inc	r15
    10ac:	4f 2d       	mov	r20, r15
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	21 50       	subi	r18, 0x01	; 1
    10b8:	31 09       	sbc	r19, r1
    10ba:	42 17       	cp	r20, r18
    10bc:	53 07       	cpc	r21, r19
    10be:	0c f4       	brge	.+2      	; 0x10c2 <_Z12sortByPointsP6Player+0xd8>
    10c0:	af cf       	rjmp	.-162    	; 0x1020 <_Z12sortByPointsP6Player+0x36>
				players[j] = players[j+1];
				players[j+1] = tmp;
			}
		}
	}
}
    10c2:	2b 96       	adiw	r28, 0x0b	; 11
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <_Z17printLeaderboardsP6Playerh>:

void printLeaderboards(Player *players, uint8_t players_size) {
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <_Z17printLeaderboardsP6Playerh+0x22>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <_Z17printLeaderboardsP6Playerh+0x24>
    1100:	1f 92       	push	r1
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	a8 2e       	mov	r10, r24
    1108:	b9 2e       	mov	r11, r25
    110a:	46 2e       	mov	r4, r22
	sortByPoints(players);
    110c:	0e 94 f5 07 	call	0xfea	; 0xfea <_Z12sortByPointsP6Player>
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
    1110:	0f 2e       	mov	r0, r31
    1112:	f0 ea       	ldi	r31, 0xA0	; 160
    1114:	ef 2e       	mov	r14, r31
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ff 2e       	mov	r15, r31
    111a:	f0 2d       	mov	r31, r0
    111c:	0e ea       	ldi	r16, 0xAE	; 174
    111e:	1a e1       	ldi	r17, 0x1A	; 26
    1120:	2f ef       	ldi	r18, 0xFF	; 255
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	43 e0       	ldi	r20, 0x03	; 3
    1126:	64 e6       	ldi	r22, 0x64	; 100
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	89 e1       	ldi	r24, 0x19	; 25
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
    1132:	0f 2e       	mov	r0, r31
    1134:	f6 ea       	ldi	r31, 0xA6	; 166
    1136:	ef 2e       	mov	r14, r31
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ff 2e       	mov	r15, r31
    113c:	f0 2d       	mov	r31, r0
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	43 e0       	ldi	r20, 0x03	; 3
    1144:	68 ec       	ldi	r22, 0xC8	; 200
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	89 e1       	ldi	r24, 0x19	; 25
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	char tmp[5];
	//tmp[4] = '\0';
	for(uint8_t i = 0; i < players_size; i++) {
    1150:	44 20       	and	r4, r4
    1152:	09 f4       	brne	.+2      	; 0x1156 <_Z17printLeaderboardsP6Playerh+0x7a>
    1154:	41 c0       	rjmp	.+130    	; 0x11d8 <_Z17printLeaderboardsP6Playerh+0xfc>
    1156:	ca 2c       	mov	r12, r10
    1158:	db 2c       	mov	r13, r11
    115a:	0f 2e       	mov	r0, r31
    115c:	f0 e5       	ldi	r31, 0x50	; 80
    115e:	af 2e       	mov	r10, r31
    1160:	b1 2c       	mov	r11, r1
    1162:	f0 2d       	mov	r31, r0
    1164:	51 2c       	mov	r5, r1
		sprintf(tmp, "%d\0", players[i].points);
    1166:	0f 2e       	mov	r0, r31
    1168:	fe ea       	ldi	r31, 0xAE	; 174
    116a:	6f 2e       	mov	r6, r31
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	7f 2e       	mov	r7, r31
    1170:	f0 2d       	mov	r31, r0
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	4c 01       	movw	r8, r24
    1178:	f6 01       	movw	r30, r12
    117a:	80 81       	ld	r24, Z
    117c:	1f 92       	push	r1
    117e:	8f 93       	push	r24
    1180:	7f 92       	push	r7
    1182:	6f 92       	push	r6
    1184:	9f 92       	push	r9
    1186:	8f 92       	push	r8
    1188:	0e 94 4b 10 	call	0x2096	; 0x2096 <sprintf>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
    118c:	76 01       	movw	r14, r12
    118e:	f4 e0       	ldi	r31, 0x04	; 4
    1190:	ef 0e       	add	r14, r31
    1192:	f1 1c       	adc	r15, r1
    1194:	0e ea       	ldi	r16, 0xAE	; 174
    1196:	1a e1       	ldi	r17, 0x1A	; 26
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	43 e0       	ldi	r20, 0x03	; 3
    119e:	64 e6       	ldi	r22, 0x64	; 100
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	c5 01       	movw	r24, r10
    11a4:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
    11a8:	74 01       	movw	r14, r8
    11aa:	2f ef       	ldi	r18, 0xFF	; 255
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	43 e0       	ldi	r20, 0x03	; 3
    11b0:	6a ef       	ldi	r22, 0xFA	; 250
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	c5 01       	movw	r24, r10
    11b6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	sortByPoints(players);
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
	char tmp[5];
	//tmp[4] = '\0';
	for(uint8_t i = 0; i < players_size; i++) {
    11ba:	53 94       	inc	r5
    11bc:	8b e0       	ldi	r24, 0x0B	; 11
    11be:	c8 0e       	add	r12, r24
    11c0:	d1 1c       	adc	r13, r1
    11c2:	98 e2       	ldi	r25, 0x28	; 40
    11c4:	a9 0e       	add	r10, r25
    11c6:	b1 1c       	adc	r11, r1
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	45 10       	cpse	r4, r5
    11d6:	d0 cf       	rjmp	.-96     	; 0x1178 <_Z17printLeaderboardsP6Playerh+0x9c>
		sprintf(tmp, "%d\0", players[i].points);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	7f 90       	pop	r7
    11fc:	6f 90       	pop	r6
    11fe:	5f 90       	pop	r5
    1200:	4f 90       	pop	r4
    1202:	08 95       	ret

00001204 <_Z11showPlayersP6Playerh>:

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
    1204:	2f 92       	push	r2
    1206:	3f 92       	push	r3
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    1228:	66 23       	and	r22, r22
    122a:	09 f4       	brne	.+2      	; 0x122e <_Z11showPlayersP6Playerh+0x2a>
    122c:	5a c0       	rjmp	.+180    	; 0x12e2 <_Z11showPlayersP6Playerh+0xde>
    122e:	26 2e       	mov	r2, r22
    1230:	c8 2e       	mov	r12, r24
    1232:	d9 2e       	mov	r13, r25
    1234:	51 2c       	mov	r5, r1
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    1236:	80 e0       	ldi	r24, 0x00	; 0
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    1238:	0f 2e       	mov	r0, r31
    123a:	f2 e8       	ldi	r31, 0x82	; 130
    123c:	4f 2e       	mov	r4, r31
    123e:	f0 2d       	mov	r31, r0
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    1240:	0f 2e       	mov	r0, r31
    1242:	ff e0       	ldi	r31, 0x0F	; 15
    1244:	3f 2e       	mov	r3, r31
    1246:	f0 2d       	mov	r31, r0
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <_Z11showPlayersP6Playerh+0x52>
}

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	85 15       	cp	r24, r5
    124e:	10 f0       	brcs	.+4      	; 0x1254 <_Z11showPlayersP6Playerh+0x50>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <_Z11showPlayersP6Playerh+0x52>
    1254:	82 e3       	ldi	r24, 0x32	; 50
    1256:	76 01       	movw	r14, r12
    1258:	94 e0       	ldi	r25, 0x04	; 4
    125a:	e9 0e       	add	r14, r25
    125c:	f1 1c       	adc	r15, r1
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
    125e:	e7 01       	movw	r28, r14
    1260:	09 90       	ld	r0, Y+
    1262:	00 20       	and	r0, r0
    1264:	e9 f7       	brne	.-6      	; 0x1260 <_Z11showPlayersP6Playerh+0x5c>
    1266:	21 97       	sbiw	r28, 0x01	; 1
    1268:	ce 19       	sub	r28, r14
    126a:	df 09       	sbc	r29, r15
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    126c:	50 fa       	bst	r5, 0
    126e:	66 24       	eor	r6, r6
    1270:	60 f8       	bld	r6, 0
    1272:	71 2c       	mov	r7, r1
    1274:	46 9c       	mul	r4, r6
    1276:	40 01       	movw	r8, r0
    1278:	47 9c       	mul	r4, r7
    127a:	90 0c       	add	r9, r0
    127c:	11 24       	eor	r1, r1
    127e:	a8 2e       	mov	r10, r24
    1280:	b1 2c       	mov	r11, r1
    1282:	f6 01       	movw	r30, r12
    1284:	01 81       	ldd	r16, Z+1	; 0x01
    1286:	12 81       	ldd	r17, Z+2	; 0x02
    1288:	b4 01       	movw	r22, r8
    128a:	6c 5e       	subi	r22, 0xEC	; 236
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	28 e7       	ldi	r18, 0x78	; 120
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	48 e2       	ldi	r20, 0x28	; 40
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	c5 01       	movw	r24, r10
    1298:	8a 5b       	subi	r24, 0xBA	; 186
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    12a0:	f6 01       	movw	r30, r12
    12a2:	21 81       	ldd	r18, Z+1	; 0x01
    12a4:	32 81       	ldd	r19, Z+2	; 0x02
    12a6:	3c 9e       	mul	r3, r28
    12a8:	c0 01       	movw	r24, r0
    12aa:	3d 9e       	mul	r3, r29
    12ac:	90 0d       	add	r25, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	68 e7       	ldi	r22, 0x78	; 120
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	68 1b       	sub	r22, r24
    12b6:	79 0b       	sbc	r23, r25
    12b8:	76 95       	lsr	r23
    12ba:	67 95       	ror	r22
    12bc:	77 27       	eor	r23, r23
    12be:	6c 5e       	subi	r22, 0xEC	; 236
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	68 0d       	add	r22, r8
    12c4:	79 1d       	adc	r23, r9
    12c6:	0e ea       	ldi	r16, 0xAE	; 174
    12c8:	1a e1       	ldi	r17, 0x1A	; 26
    12ca:	43 e0       	ldi	r20, 0x03	; 3
    12cc:	c5 01       	movw	r24, r10
    12ce:	82 5b       	subi	r24, 0xB2	; 178
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    12d6:	53 94       	inc	r5
    12d8:	fb e0       	ldi	r31, 0x0B	; 11
    12da:	cf 0e       	add	r12, r31
    12dc:	d1 1c       	adc	r13, r1
    12de:	25 10       	cpse	r2, r5
    12e0:	b4 cf       	rjmp	.-152    	; 0x124a <_Z11showPlayersP6Playerh+0x46>
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
	}
}
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	9f 90       	pop	r9
    12f8:	8f 90       	pop	r8
    12fa:	7f 90       	pop	r7
    12fc:	6f 90       	pop	r6
    12fe:	5f 90       	pop	r5
    1300:	4f 90       	pop	r4
    1302:	3f 90       	pop	r3
    1304:	2f 90       	pop	r2
    1306:	08 95       	ret

00001308 <_Z12drawOKButtonv>:

void drawOKButton() {
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (OK_BTN_W - strlen("OK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (OK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W, WHITE);
    1310:	0f ef       	ldi	r16, 0xFF	; 255
    1312:	1f ef       	ldi	r17, 0xFF	; 255
    1314:	2c e3       	ldi	r18, 0x3C	; 60
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	48 e2       	ldi	r20, 0x28	; 40
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	6a ef       	ldi	r22, 0xFA	; 250
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	8e eb       	ldi	r24, 0xBE	; 190
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(OK_BTN_Y + offset_y, OK_BTN_X + offset_x, 3, WHITE, CYAN, "OK\0");
    1328:	0f 2e       	mov	r0, r31
    132a:	f2 eb       	ldi	r31, 0xB2	; 178
    132c:	ef 2e       	mov	r14, r31
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	ff 2e       	mov	r15, r31
    1332:	f0 2d       	mov	r31, r0
    1334:	0e ea       	ldi	r16, 0xAE	; 174
    1336:	1a e1       	ldi	r17, 0x1A	; 26
    1338:	2f ef       	ldi	r18, 0xFF	; 255
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	43 e0       	ldi	r20, 0x03	; 3
    133e:	69 e0       	ldi	r22, 0x09	; 9
    1340:	71 e0       	ldi	r23, 0x01	; 1
    1342:	86 ec       	ldi	r24, 0xC6	; 198
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	08 95       	ret

00001354 <_Z16drawDeleteButtonv>:

void drawDeleteButton() {
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (DEL_BTN_W - strlen("DEL") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (DEL_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W, WHITE);
    135c:	0f ef       	ldi	r16, 0xFF	; 255
    135e:	1f ef       	ldi	r17, 0xFF	; 255
    1360:	2c e3       	ldi	r18, 0x3C	; 60
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	48 e2       	ldi	r20, 0x28	; 40
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	64 eb       	ldi	r22, 0xB4	; 180
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	8e eb       	ldi	r24, 0xBE	; 190
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(DEL_BTN_Y + offset_y, DEL_BTN_X + offset_x, 3, WHITE, CYAN, "DEL\0");
    1374:	0f 2e       	mov	r0, r31
    1376:	f6 eb       	ldi	r31, 0xB6	; 182
    1378:	ef 2e       	mov	r14, r31
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ff 2e       	mov	r15, r31
    137e:	f0 2d       	mov	r31, r0
    1380:	0e ea       	ldi	r16, 0xAE	; 174
    1382:	1a e1       	ldi	r17, 0x1A	; 26
    1384:	2f ef       	ldi	r18, 0xFF	; 255
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	43 e0       	ldi	r20, 0x03	; 3
    138a:	6b eb       	ldi	r22, 0xBB	; 187
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	86 ec       	ldi	r24, 0xC6	; 198
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret

000013a0 <_Z15drawStartButtonv>:

void drawStartButton() {
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
	uint8_t offset_x = (START_BTN_W - strlen("START") * CHAR_W * FONT_SIZE) / 2;
	uint8_t offset_y = (START_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W, WHITE);
    13a8:	0f ef       	ldi	r16, 0xFF	; 255
    13aa:	1f ef       	ldi	r17, 0xFF	; 255
    13ac:	2a e5       	ldi	r18, 0x5A	; 90
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	48 e2       	ldi	r20, 0x28	; 40
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	6c ed       	ldi	r22, 0xDC	; 220
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	8e eb       	ldi	r24, 0xBE	; 190
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(START_BTN_Y + offset_y, START_BTN_X + offset_x , 3, WHITE, CYAN, "START\0");
    13c0:	0f 2e       	mov	r0, r31
    13c2:	fb eb       	ldi	r31, 0xBB	; 187
    13c4:	ef 2e       	mov	r14, r31
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	ff 2e       	mov	r15, r31
    13ca:	f0 2d       	mov	r31, r0
    13cc:	0e ea       	ldi	r16, 0xAE	; 174
    13ce:	1a e1       	ldi	r17, 0x1A	; 26
    13d0:	2f ef       	ldi	r18, 0xFF	; 255
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	43 e0       	ldi	r20, 0x03	; 3
    13d6:	63 ee       	ldi	r22, 0xE3	; 227
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	86 ec       	ldi	r24, 0xC6	; 198
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	08 95       	ret

000013ec <_Z9drawNamesP6Player>:

void drawNames(Player *players) {
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	62 97       	sbiw	r28, 0x12	; 18
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
	char tmp[7+1+2+1+7]; //max first name, space, vs, space, max 2nd name //mozda 6 umjesto 7 al dobro
	sprintf(tmp, "%s VS %s", players[cross_chosen].name, players[nought_chosen].name);
    1408:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <nought_chosen>
    140c:	4b e0       	ldi	r20, 0x0B	; 11
    140e:	bc 01       	movw	r22, r24
    1410:	42 9f       	mul	r20, r18
    1412:	60 0d       	add	r22, r0
    1414:	71 1d       	adc	r23, r1
    1416:	11 24       	eor	r1, r1
    1418:	9b 01       	movw	r18, r22
    141a:	2c 5f       	subi	r18, 0xFC	; 252
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	3f 93       	push	r19
    1420:	2f 93       	push	r18
    1422:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <cross_chosen>
    1426:	42 9f       	mul	r20, r18
    1428:	80 0d       	add	r24, r0
    142a:	91 1d       	adc	r25, r1
    142c:	11 24       	eor	r1, r1
    142e:	04 96       	adiw	r24, 0x04	; 4
    1430:	9f 93       	push	r25
    1432:	8f 93       	push	r24
    1434:	85 ef       	ldi	r24, 0xF5	; 245
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	7c 01       	movw	r14, r24
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	0e 94 4b 10 	call	0x2096	; 0x2096 <sprintf>
	uint8_t offset_x = (MAX_Y - BLANK_SPACE - (BCK_BTN_X + BCK_BTN_W) - strlen(tmp) * CHAR_W * 2) / 2; //2 je FONT_SIZE, 220 -> sirina od kraja BCK_BTN do 310
    144a:	f7 01       	movw	r30, r14
    144c:	01 90       	ld	r0, Z+
    144e:	00 20       	and	r0, r0
    1450:	e9 f7       	brne	.-6      	; 0x144c <_Z9drawNamesP6Player+0x60>
    1452:	31 97       	sbiw	r30, 0x01	; 1
    1454:	ee 19       	sub	r30, r14
    1456:	ff 09       	sbc	r31, r15
	print_string(BLANK_SPACE, (BCK_BTN_X + BCK_BTN_W) + offset_x, 2, WHITE, CYAN, tmp); //90 je kraj od bck btn,, mozda da je ime svako u svojoj boji ili kako oces
    1458:	cf 01       	movw	r24, r30
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	e8 0f       	add	r30, r24
    146c:	f9 1f       	adc	r31, r25
    146e:	6c ed       	ldi	r22, 0xDC	; 220
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	6e 1b       	sub	r22, r30
    1474:	7f 0b       	sbc	r23, r31
    1476:	76 95       	lsr	r23
    1478:	67 95       	ror	r22
    147a:	77 27       	eor	r23, r23
    147c:	66 5a       	subi	r22, 0xA6	; 166
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	0e ea       	ldi	r16, 0xAE	; 174
    1482:	1a e1       	ldi	r17, 0x1A	; 26
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	8a e0       	ldi	r24, 0x0A	; 10
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	62 96       	adiw	r28, 0x12	; 18
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	08 95       	ret

000014b6 <_Z8drawGridv>:

void drawGrid() {
	//draw_rectangle(10+40-5, 110, 185, 185, WHITE);
	
	draw_v_line(GRID_STARTING_X + GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE); //62~185/3
    14b6:	2f ef       	ldi	r18, 0xFF	; 255
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	46 ee       	ldi	r20, 0xE6	; 230
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	6d e2       	ldi	r22, 0x2D	; 45
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	8c ea       	ldi	r24, 0xAC	; 172
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(GRID_STARTING_X + 2*GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE);
    14ca:	2f ef       	ldi	r18, 0xFF	; 255
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	46 ee       	ldi	r20, 0xE6	; 230
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	6d e2       	ldi	r22, 0x2D	; 45
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	8a ee       	ldi	r24, 0xEA	; 234
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	
	draw_h_line(GRID_STARTING_Y + GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    14de:	2f ef       	ldi	r18, 0xFF	; 255
    14e0:	3f ef       	ldi	r19, 0xFF	; 255
    14e2:	47 e2       	ldi	r20, 0x27	; 39
    14e4:	51 e0       	ldi	r21, 0x01	; 1
    14e6:	6e e6       	ldi	r22, 0x6E	; 110
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	8b e6       	ldi	r24, 0x6B	; 107
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(GRID_STARTING_Y + 2*GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    14f2:	2f ef       	ldi	r18, 0xFF	; 255
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	47 e2       	ldi	r20, 0x27	; 39
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	6e e6       	ldi	r22, 0x6E	; 110
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	89 ea       	ldi	r24, 0xA9	; 169
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
    1506:	08 95       	ret

00001508 <_Z8drawTurnP6Player>:
	
	//my_drawCircle(GRID_STARTING_Y + GRID_BLOCK_SIZE + GRID_BLOCK_SIZE/2, GRID_STARTING_X + GRID_BLOCK_SIZE + GRID_BLOCK_SIZE/2, 30, WHITE);
	
}

void drawTurn(Player *players) {
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
	print_string(BCK_BTN_Y + BCK_BTN_H + 4*BLANK_SPACE, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
    1518:	0f 2e       	mov	r0, r31
    151a:	f2 ec       	ldi	r31, 0xC2	; 194
    151c:	ef 2e       	mov	r14, r31
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	ff 2e       	mov	r15, r31
    1522:	f0 2d       	mov	r31, r0
    1524:	0e ea       	ldi	r16, 0xAE	; 174
    1526:	1a e1       	ldi	r17, 0x1A	; 26
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	43 e0       	ldi	r20, 0x03	; 3
    152e:	6a e0       	ldi	r22, 0x0A	; 10
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	8a e5       	ldi	r24, 0x5A	; 90
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	if(currentPlayer == CROSS) {
    153a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	59 f5       	brne	.+86     	; 0x1598 <_Z8drawTurnP6Player+0x90>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, CYAN, CYAN, players[nought_chosen].name); //prvo prebrise starog tj poboja mu i slova i pozadinu u boju pozadine (CYAN) zato jer ako jedan ima duze ime od drugog onda ce od tog koji ima duze ime slova od njegovog imena ce se i dalje vidit pored imena od ovog koji ima krace
    1542:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1546:	0f 2e       	mov	r0, r31
    1548:	fb e0       	ldi	r31, 0x0B	; 11
    154a:	df 2e       	mov	r13, r31
    154c:	f0 2d       	mov	r31, r0
    154e:	7e 01       	movw	r14, r28
    1550:	d8 9e       	mul	r13, r24
    1552:	e0 0c       	add	r14, r0
    1554:	f1 1c       	adc	r15, r1
    1556:	11 24       	eor	r1, r1
    1558:	84 e0       	ldi	r24, 0x04	; 4
    155a:	e8 0e       	add	r14, r24
    155c:	f1 1c       	adc	r15, r1
    155e:	2e ea       	ldi	r18, 0xAE	; 174
    1560:	3a e1       	ldi	r19, 0x1A	; 26
    1562:	42 e0       	ldi	r20, 0x02	; 2
    1564:	6a e0       	ldi	r22, 0x0A	; 10
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	88 e7       	ldi	r24, 0x78	; 120
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name);
    1570:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1574:	d8 9e       	mul	r13, r24
    1576:	c0 0d       	add	r28, r0
    1578:	d1 1d       	adc	r29, r1
    157a:	11 24       	eor	r1, r1
    157c:	7e 01       	movw	r14, r28
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	e8 0e       	add	r14, r24
    1582:	f1 1c       	adc	r15, r1
    1584:	29 81       	ldd	r18, Y+1	; 0x01
    1586:	3a 81       	ldd	r19, Y+2	; 0x02
    1588:	42 e0       	ldi	r20, 0x02	; 2
    158a:	6a e0       	ldi	r22, 0x0A	; 10
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	88 e7       	ldi	r24, 0x78	; 120
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    1596:	2c c0       	rjmp	.+88     	; 0x15f0 <_Z8drawTurnP6Player+0xe8>
	}else{
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, CYAN, CYAN, players[cross_chosen].name); //prvo prebrise starog tj poboja mu i slova i pozadinu u boju pozadine (CYAN) zato jer ako jedan ima duze ime od drugog onda ce od tog koji ima duze ime slova od njegovog imena ce se i dalje vidit pored imena od ovog koji ima krace
    1598:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    159c:	0f 2e       	mov	r0, r31
    159e:	fb e0       	ldi	r31, 0x0B	; 11
    15a0:	df 2e       	mov	r13, r31
    15a2:	f0 2d       	mov	r31, r0
    15a4:	7e 01       	movw	r14, r28
    15a6:	d8 9e       	mul	r13, r24
    15a8:	e0 0c       	add	r14, r0
    15aa:	f1 1c       	adc	r15, r1
    15ac:	11 24       	eor	r1, r1
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	e8 0e       	add	r14, r24
    15b2:	f1 1c       	adc	r15, r1
    15b4:	0e ea       	ldi	r16, 0xAE	; 174
    15b6:	1a e1       	ldi	r17, 0x1A	; 26
    15b8:	2e ea       	ldi	r18, 0xAE	; 174
    15ba:	3a e1       	ldi	r19, 0x1A	; 26
    15bc:	42 e0       	ldi	r20, 0x02	; 2
    15be:	6a e0       	ldi	r22, 0x0A	; 10
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	88 e7       	ldi	r24, 0x78	; 120
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    15ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    15ce:	d8 9e       	mul	r13, r24
    15d0:	c0 0d       	add	r28, r0
    15d2:	d1 1d       	adc	r29, r1
    15d4:	11 24       	eor	r1, r1
    15d6:	7e 01       	movw	r14, r28
    15d8:	84 e0       	ldi	r24, 0x04	; 4
    15da:	e8 0e       	add	r14, r24
    15dc:	f1 1c       	adc	r15, r1
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	3a 81       	ldd	r19, Y+2	; 0x02
    15e2:	42 e0       	ldi	r20, 0x02	; 2
    15e4:	6a e0       	ldi	r22, 0x0A	; 10
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	88 e7       	ldi	r24, 0x78	; 120
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	08 95       	ret

00001600 <_Z10drawOnGridhh>:

uint8_t drawOnGrid(uint8_t y, uint8_t x) { //skuzi kako ovo centrirat i napravi preko define-ova
	if(currentPlayer == CROSS) { //nesto sa players[cross_chosen]
    1600:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    1604:	91 30       	cpi	r25, 0x01	; 1
    1606:	69 f4       	brne	.+26     	; 0x1622 <_Z10drawOnGridhh+0x22>
		my_draw_cross(y + GRID_BLOCK_SIZE/2, x + GRID_BLOCK_SIZE/2, 20, RED);
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	61 5e       	subi	r22, 0xE1	; 225
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	29 e6       	ldi	r18, 0x69	; 105
    1612:	33 ed       	ldi	r19, 0xD3	; 211
    1614:	44 e1       	ldi	r20, 0x14	; 20
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	4f 96       	adiw	r24, 0x1f	; 31
    161a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z13my_draw_crossjjjj>
		return NOUGHT;
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	08 95       	ret
	}else {
		adafruit_drawCircle(y + GRID_BLOCK_SIZE/2, x + GRID_BLOCK_SIZE/2, 20, GREEN);
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	61 5e       	subi	r22, 0xE1	; 225
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2b e2       	ldi	r18, 0x2B	; 43
    162c:	37 ec       	ldi	r19, 0xC7	; 199
    162e:	44 e1       	ldi	r20, 0x14	; 20
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	4f 96       	adiw	r24, 0x1f	; 31
    1634:	0e 94 37 05 	call	0xa6e	; 0xa6e <_Z19adafruit_drawCirclejjjj>
		return CROSS;
    1638:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    163a:	08 95       	ret

0000163c <_Z13checkGameOverP6Player>:

void checkGameOver(Player *players) {
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	5c 01       	movw	r10, r24
    1650:	ee eb       	ldi	r30, 0xBE	; 190
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	21 ec       	ldi	r18, 0xC1	; 193
    1656:	31 e0       	ldi	r19, 0x01	; 1
    1658:	df 01       	movw	r26, r30
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
		if (board[i][0] != EMPTY && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
    165a:	80 81       	ld	r24, Z
    165c:	88 23       	and	r24, r24
    165e:	51 f0       	breq	.+20     	; 0x1674 <_Z13checkGameOverP6Player+0x38>
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	89 13       	cpse	r24, r25
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <_Z13checkGameOverP6Player+0x38>
    1666:	d2 80       	ldd	r13, Z+2	; 0x02
    1668:	8d 11       	cpse	r24, r13
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <_Z13checkGameOverP6Player+0x38>
			gameOver = 1; // 3 same in a row
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
			winner = board[i][0];
			break;
    1672:	e5 c0       	rjmp	.+458    	; 0x183e <_Z13checkGameOverP6Player+0x202>
		}
		if (board[0][i] != EMPTY && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
    1674:	8d 91       	ld	r24, X+
    1676:	88 23       	and	r24, r24
    1678:	71 f0       	breq	.+28     	; 0x1696 <_Z13checkGameOverP6Player+0x5a>
    167a:	12 96       	adiw	r26, 0x02	; 2
    167c:	9c 91       	ld	r25, X
    167e:	12 97       	sbiw	r26, 0x02	; 2
    1680:	89 13       	cpse	r24, r25
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <_Z13checkGameOverP6Player+0x5a>
    1684:	15 96       	adiw	r26, 0x05	; 5
    1686:	dc 90       	ld	r13, X
    1688:	15 97       	sbiw	r26, 0x05	; 5
    168a:	8d 11       	cpse	r24, r13
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <_Z13checkGameOverP6Player+0x5a>
			gameOver = 1; // 3 same in a column
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
			winner = board[0][i];
			break;
    1694:	d4 c0       	rjmp	.+424    	; 0x183e <_Z13checkGameOverP6Player+0x202>
    1696:	33 96       	adiw	r30, 0x03	; 3
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
    1698:	a2 17       	cp	r26, r18
    169a:	b3 07       	cpc	r27, r19
    169c:	f1 f6       	brne	.-68     	; 0x165a <_Z13checkGameOverP6Player+0x1e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    169e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <board+0x4>
    16a2:	88 23       	and	r24, r24
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_Z13checkGameOverP6Player+0x6c>
    16a6:	e3 c0       	rjmp	.+454    	; 0x186e <_Z13checkGameOverP6Player+0x232>
		return CROSS;
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
    16a8:	d1 2c       	mov	r13, r1
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    16aa:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <board>
    16ae:	98 13       	cpse	r25, r24
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <_Z13checkGameOverP6Player+0x7e>
    16b2:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <board+0x8>
    16b6:	92 17       	cp	r25, r18
    16b8:	41 f0       	breq	.+16     	; 0x16ca <_Z13checkGameOverP6Player+0x8e>
    16ba:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <board+0x2>
    16be:	98 13       	cpse	r25, r24
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <_Z13checkGameOverP6Player+0x98>
    16c2:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <board+0x6>
    16c6:	92 13       	cpse	r25, r18
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <_Z13checkGameOverP6Player+0x98>
		gameOver = 1; // 3 same in a diagonal
    16ca:	91 e0       	ldi	r25, 0x01	; 1
    16cc:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <gameOver>
    16d0:	d8 2e       	mov	r13, r24
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <_Z13checkGameOverP6Player+0xa2>
		winner = board[1][1];
	}
	
	if(gameOver) {
    16d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    16d8:	88 23       	and	r24, r24
    16da:	09 f4       	brne	.+2      	; 0x16de <_Z13checkGameOverP6Player+0xa2>
    16dc:	79 c0       	rjmp	.+242    	; 0x17d0 <_Z13checkGameOverP6Player+0x194>
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
    16de:	0f 2e       	mov	r0, r31
    16e0:	f9 ec       	ldi	r31, 0xC9	; 201
    16e2:	ef 2e       	mov	r14, r31
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	ff 2e       	mov	r15, r31
    16e8:	f0 2d       	mov	r31, r0
    16ea:	0e ea       	ldi	r16, 0xAE	; 174
    16ec:	1a e1       	ldi	r17, 0x1A	; 26
    16ee:	2f ef       	ldi	r18, 0xFF	; 255
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	43 e0       	ldi	r20, 0x03	; 3
    16f4:	6a e0       	ldi	r22, 0x0A	; 10
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	8c e8       	ldi	r24, 0x8C	; 140
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	d8 12       	cpse	r13, r24
    1704:	23 c0       	rjmp	.+70     	; 0x174c <_Z13checkGameOverP6Player+0x110>
    1706:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    170a:	0f 2e       	mov	r0, r31
    170c:	fb e0       	ldi	r31, 0x0B	; 11
    170e:	df 2e       	mov	r13, r31
    1710:	f0 2d       	mov	r31, r0
    1712:	f5 01       	movw	r30, r10
    1714:	d8 9e       	mul	r13, r24
    1716:	e0 0d       	add	r30, r0
    1718:	f1 1d       	adc	r31, r1
    171a:	11 24       	eor	r1, r1
    171c:	7f 01       	movw	r14, r30
    171e:	c4 e0       	ldi	r28, 0x04	; 4
    1720:	ec 0e       	add	r14, r28
    1722:	f1 1c       	adc	r15, r1
    1724:	21 81       	ldd	r18, Z+1	; 0x01
    1726:	32 81       	ldd	r19, Z+2	; 0x02
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	6a e0       	ldi	r22, 0x0A	; 10
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	8a ea       	ldi	r24, 0xAA	; 170
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    1736:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    173a:	e5 01       	movw	r28, r10
    173c:	d8 9e       	mul	r13, r24
    173e:	c0 0d       	add	r28, r0
    1740:	d1 1d       	adc	r29, r1
    1742:	11 24       	eor	r1, r1
    1744:	88 81       	ld	r24, Y
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	88 83       	st	Y, r24
    174a:	24 c0       	rjmp	.+72     	; 0x1794 <_Z13checkGameOverP6Player+0x158>
		winner = board[1][1];
	}
	
	if(gameOver) {
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
		winner == CROSS ? print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    174c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1750:	0f 2e       	mov	r0, r31
    1752:	fb e0       	ldi	r31, 0x0B	; 11
    1754:	df 2e       	mov	r13, r31
    1756:	f0 2d       	mov	r31, r0
    1758:	f5 01       	movw	r30, r10
    175a:	d8 9e       	mul	r13, r24
    175c:	e0 0d       	add	r30, r0
    175e:	f1 1d       	adc	r31, r1
    1760:	11 24       	eor	r1, r1
    1762:	7f 01       	movw	r14, r30
    1764:	d4 e0       	ldi	r29, 0x04	; 4
    1766:	ed 0e       	add	r14, r29
    1768:	f1 1c       	adc	r15, r1
    176a:	21 81       	ldd	r18, Z+1	; 0x01
    176c:	32 81       	ldd	r19, Z+2	; 0x02
    176e:	0e ea       	ldi	r16, 0xAE	; 174
    1770:	1a e1       	ldi	r17, 0x1A	; 26
    1772:	42 e0       	ldi	r20, 0x02	; 2
    1774:	6a e0       	ldi	r22, 0x0A	; 10
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	8a ea       	ldi	r24, 0xAA	; 170
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    1780:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1784:	e5 01       	movw	r28, r10
    1786:	d8 9e       	mul	r13, r24
    1788:	c0 0d       	add	r28, r0
    178a:	d1 1d       	adc	r29, r1
    178c:	11 24       	eor	r1, r1
    178e:	88 81       	ld	r24, Y
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	88 83       	st	Y, r24
		
		uint8_t offset_x, offset_y;
		
		offset_x = (TRY_AGAIN_W - strlen("TRY AGAIN\0") * CHAR_W * 2) / 2;
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
    1794:	0f ef       	ldi	r16, 0xFF	; 255
    1796:	1f ef       	ldi	r17, 0xFF	; 255
    1798:	29 e6       	ldi	r18, 0x69	; 105
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4e e1       	ldi	r20, 0x1E	; 30
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	6a e0       	ldi	r22, 0x0A	; 10
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	88 ec       	ldi	r24, 0xC8	; 200
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset x bude previse desno ne kuzim zasto ??
    17ac:	0f 2e       	mov	r0, r31
    17ae:	ff ec       	ldi	r31, 0xCF	; 207
    17b0:	ef 2e       	mov	r14, r31
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	ff 2e       	mov	r15, r31
    17b6:	f0 2d       	mov	r31, r0
    17b8:	0e ea       	ldi	r16, 0xAE	; 174
    17ba:	1a e1       	ldi	r17, 0x1A	; 26
    17bc:	2f ef       	ldi	r18, 0xFF	; 255
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	42 e0       	ldi	r20, 0x02	; 2
    17c2:	6e e0       	ldi	r22, 0x0E	; 14
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	8f ec       	ldi	r24, 0xCF	; 207
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    17ce:	55 c0       	rjmp	.+170    	; 0x187a <_Z13checkGameOverP6Player+0x23e>
	}else if(numberOfMoves == 9) {
    17d0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
    17d4:	89 30       	cpi	r24, 0x09	; 9
    17d6:	09 f0       	breq	.+2      	; 0x17da <_Z13checkGameOverP6Player+0x19e>
    17d8:	50 c0       	rjmp	.+160    	; 0x187a <_Z13checkGameOverP6Player+0x23e>
		//tie
		gameOver = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
		print_string(MAX_X - 9*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "TIE\0");
    17e0:	0f 2e       	mov	r0, r31
    17e2:	fa ed       	ldi	r31, 0xDA	; 218
    17e4:	ef 2e       	mov	r14, r31
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	ff 2e       	mov	r15, r31
    17ea:	f0 2d       	mov	r31, r0
    17ec:	0e ea       	ldi	r16, 0xAE	; 174
    17ee:	1a e1       	ldi	r17, 0x1A	; 26
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	43 e0       	ldi	r20, 0x03	; 3
    17f6:	6a e0       	ldi	r22, 0x0A	; 10
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	86 e9       	ldi	r24, 0x96	; 150
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		
		uint8_t offset_x, offset_y;
		
		offset_x = (TRY_AGAIN_W - strlen("TRY AGAIN") * CHAR_W * 2) / 2;
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
    1802:	0f ef       	ldi	r16, 0xFF	; 255
    1804:	1f ef       	ldi	r17, 0xFF	; 255
    1806:	29 e6       	ldi	r18, 0x69	; 105
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4e e1       	ldi	r20, 0x1E	; 30
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	6a e0       	ldi	r22, 0x0A	; 10
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset0_x bude previse desno ne kuzim zasto ??
    181a:	0f 2e       	mov	r0, r31
    181c:	ff ec       	ldi	r31, 0xCF	; 207
    181e:	ef 2e       	mov	r14, r31
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	ff 2e       	mov	r15, r31
    1824:	f0 2d       	mov	r31, r0
    1826:	0e ea       	ldi	r16, 0xAE	; 174
    1828:	1a e1       	ldi	r17, 0x1A	; 26
    182a:	2f ef       	ldi	r18, 0xFF	; 255
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	42 e0       	ldi	r20, 0x02	; 2
    1830:	6e e0       	ldi	r22, 0x0E	; 14
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	8f ec       	ldi	r24, 0xCF	; 207
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
	
}
    183c:	1e c0       	rjmp	.+60     	; 0x187a <_Z13checkGameOverP6Player+0x23e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    183e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <board+0x4>
    1842:	88 23       	and	r24, r24
    1844:	09 f4       	brne	.+2      	; 0x1848 <_Z13checkGameOverP6Player+0x20c>
    1846:	4b cf       	rjmp	.-362    	; 0x16de <_Z13checkGameOverP6Player+0xa2>
    1848:	30 cf       	rjmp	.-416    	; 0x16aa <_Z13checkGameOverP6Player+0x6e>
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) {
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
    184a:	0f 2e       	mov	r0, r31
    184c:	f9 ec       	ldi	r31, 0xC9	; 201
    184e:	ef 2e       	mov	r14, r31
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	ff 2e       	mov	r15, r31
    1854:	f0 2d       	mov	r31, r0
    1856:	0e ea       	ldi	r16, 0xAE	; 174
    1858:	1a e1       	ldi	r17, 0x1A	; 26
    185a:	2f ef       	ldi	r18, 0xFF	; 255
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	43 e0       	ldi	r20, 0x03	; 3
    1860:	6a e0       	ldi	r22, 0x0A	; 10
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	8c e8       	ldi	r24, 0x8C	; 140
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    186c:	6f cf       	rjmp	.-290    	; 0x174c <_Z13checkGameOverP6Player+0x110>
	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) {
    186e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1872:	88 23       	and	r24, r24
    1874:	09 f4       	brne	.+2      	; 0x1878 <_Z13checkGameOverP6Player+0x23c>
    1876:	ac cf       	rjmp	.-168    	; 0x17d0 <_Z13checkGameOverP6Player+0x194>
    1878:	e8 cf       	rjmp	.-48     	; 0x184a <_Z13checkGameOverP6Player+0x20e>
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset0_x bude previse desno ne kuzim zasto ??
	}
	
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	bf 90       	pop	r11
    188a:	af 90       	pop	r10
    188c:	08 95       	ret

0000188e <main>:

int main() {
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	c0 56       	subi	r28, 0x60	; 96
    1898:	d1 09       	sbc	r29, r1
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
	TFT_init();
    18a4:	0e 94 be 00 	call	0x17c	; 0x17c <_Z8TFT_initv>

	//initialize_menu();

	TFT_start();
    18a8:	0e 94 49 00 	call	0x92	; 0x92 <_Z9TFT_startv>
	
	uint16_t TP_X;                  // received coordiates rom tuch part of screen
	uint16_t TP_Y;                  // received coordiates rom tuch part of screen
	set_background_color(CYAN); //kao neki clearscr
    18ac:	8e ea       	ldi	r24, 0xAE	; 174
    18ae:	9a e1       	ldi	r25, 0x1A	; 26
    18b0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
	//uint8_t i = 0;
	uint8_t currentPage = HOMESCREEN; //0 - homescreen //vratit na HOMESCREEN
    18b4:	1d 82       	std	Y+5, r1	; 0x05
	char str[22] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
    18b6:	86 e1       	ldi	r24, 0x16	; 22
    18b8:	ef ed       	ldi	r30, 0xDF	; 223
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	de 01       	movw	r26, r28
    18be:	16 96       	adiw	r26, 0x06	; 6
    18c0:	01 90       	ld	r0, Z+
    18c2:	0d 92       	st	X+, r0
    18c4:	8a 95       	dec	r24
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <main+0x32>
	//print_keyboard(str);
	//Player players[4];
	uint8_t game_rerender = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	8c 8f       	std	Y+28, r24	; 0x1c
						if(check_touch(TP_X, TP_Y, GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE, GRID_BLOCK_SIZE, GRID_BLOCK_SIZE)) {
							if(board[i][j] == EMPTY) { //ovo sa konstantama
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
								numberOfMoves++;
								currentPlayer = drawOnGrid(GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
								game_rerender = 1;
    18cc:	33 24       	eor	r3, r3
    18ce:	33 94       	inc	r3
	//players[2] = p3;
	//players[3] = p4;
	
	while (1) {
		// if screen is touched
		if(currentPage == HOMESCREEN) {
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	81 11       	cpse	r24, r1
    18d4:	67 c0       	rjmp	.+206    	; 0x19a4 <main+0x116>
			//clrScr();
			if(hs_first_enter) { //bez ovoga ostanu stvari od proslog page-a nez zas iako sam gore u back buttonu stavio clrScr() ??
    18d6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <hs_first_enter>
    18da:	88 23       	and	r24, r24
    18dc:	31 f0       	breq	.+12     	; 0x18ea <main+0x5c>
				clrScr();
    18de:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
				drawHomeScreen();
    18e2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_Z14drawHomeScreenv>
				hs_first_enter = 0;
    18e6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <hs_first_enter>
			}
			cp_rerender = 1;
    18ea:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <cp_rerender>
			game_rerender = 1;
    18ee:	3c 8e       	std	Y+28, r3	; 0x1c
			//drawHomeScreen();
			if(get_bit(PINB, T_IRQ) == 0) {
    18f0:	b0 99       	sbic	0x16, 0	; 22
    18f2:	ee cf       	rjmp	.-36     	; 0x18d0 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    18f4:	be 01       	movw	r22, r28
    18f6:	6d 5f       	subi	r22, 0xFD	; 253
    18f8:	7f 4f       	sbci	r23, 0xFF	; 255
    18fa:	ce 01       	movw	r24, r28
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				if(check_touch(TP_X, TP_Y, HS_S_Y, HS_S_X, HS_H, HS_W)) { //NEW_PLAYER
    1902:	6b 81       	ldd	r22, Y+3	; 0x03
    1904:	7c 81       	ldd	r23, Y+4	; 0x04
    1906:	0f 2e       	mov	r0, r31
    1908:	f8 e1       	ldi	r31, 0x18	; 24
    190a:	ef 2e       	mov	r14, r31
    190c:	ff 24       	eor	r15, r15
    190e:	f3 94       	inc	r15
    1910:	f0 2d       	mov	r31, r0
    1912:	0c e3       	ldi	r16, 0x3C	; 60
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	24 e1       	ldi	r18, 0x14	; 20
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a e0       	ldi	r20, 0x0A	; 10
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1926:	88 23       	and	r24, r24
    1928:	39 f0       	breq	.+14     	; 0x1938 <main+0xaa>
					clrScr();
    192a:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
					hs_first_enter = 1;
    192e:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <hs_first_enter>
					np_rerender = 1;
    1932:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
					currentPage = NEW_PLAYER;
    1936:	3d 82       	std	Y+5, r3	; 0x05
				}
				if(check_touch(TP_X, TP_Y, CP_Y, CP_X, CP_H, CP_W)) { //CHOOSE_PLAYER
    1938:	6b 81       	ldd	r22, Y+3	; 0x03
    193a:	7c 81       	ldd	r23, Y+4	; 0x04
    193c:	0f 2e       	mov	r0, r31
    193e:	f8 e1       	ldi	r31, 0x18	; 24
    1940:	ef 2e       	mov	r14, r31
    1942:	ff 24       	eor	r15, r15
    1944:	f3 94       	inc	r15
    1946:	f0 2d       	mov	r31, r0
    1948:	0c e3       	ldi	r16, 0x3C	; 60
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	24 e1       	ldi	r18, 0x14	; 20
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e5       	ldi	r20, 0x50	; 80
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    195c:	88 23       	and	r24, r24
    195e:	31 f0       	breq	.+12     	; 0x196c <main+0xde>
					clrScr();
    1960:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
					hs_first_enter = 1;
    1964:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <hs_first_enter>
					currentPage = CHOOSE_PLAYER;
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	8d 83       	std	Y+5, r24	; 0x05
				}
				if(check_touch(TP_X, TP_Y, LB_Y, LB_X, LB_H, LB_W)) { //LEADERBOARDS
    196c:	6b 81       	ldd	r22, Y+3	; 0x03
    196e:	7c 81       	ldd	r23, Y+4	; 0x04
    1970:	0f 2e       	mov	r0, r31
    1972:	f8 e1       	ldi	r31, 0x18	; 24
    1974:	ef 2e       	mov	r14, r31
    1976:	ff 24       	eor	r15, r15
    1978:	f3 94       	inc	r15
    197a:	f0 2d       	mov	r31, r0
    197c:	0c e3       	ldi	r16, 0x3C	; 60
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	24 e1       	ldi	r18, 0x14	; 20
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	46 e9       	ldi	r20, 0x96	; 150
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1990:	88 23       	and	r24, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <main+0x108>
    1994:	9d cf       	rjmp	.-198    	; 0x18d0 <main+0x42>
					clrScr(); //tu da se clear-a da se stalno ne re-cleara
    1996:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
					hs_first_enter = 1;
    199a:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <hs_first_enter>
					currentPage = LEADERBOARDS;
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	8d 83       	std	Y+5, r24	; 0x05
    19a2:	96 cf       	rjmp	.-212    	; 0x18d0 <main+0x42>
				}
			}
		}else if(currentPage == NEW_PLAYER) {
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	09 f0       	breq	.+2      	; 0x19aa <main+0x11c>
    19a8:	3c c1       	rjmp	.+632    	; 0x1c22 <main+0x394>
			//drawBackButton();
			//print_keyboard(str); //stavi da se ponovo rendera tek kad dode do promjene
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    19aa:	8e 01       	movw	r16, r28
    19ac:	04 5e       	subi	r16, 0xE4	; 228
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	9e 01       	movw	r18, r28
    19b2:	23 5e       	subi	r18, 0xE3	; 227
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	ae 01       	movw	r20, r28
    19b8:	4b 5f       	subi	r20, 0xFB	; 251
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
    19bc:	be 01       	movw	r22, r28
    19be:	6d 5f       	subi	r22, 0xFD	; 253
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//drawDeleteButton();
			//drawOKButton();
			if(np_rerender) {
    19ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <np_rerender>
    19ce:	88 23       	and	r24, r24
    19d0:	61 f0       	breq	.+24     	; 0x19ea <main+0x15c>
				drawBackButton();
    19d2:	0e 94 3c 07 	call	0xe78	; 0xe78 <_Z14drawBackButtonv>
				print_keyboard(str); //stavi da se ponovo rendera tek kad dode do promjene
    19d6:	ce 01       	movw	r24, r28
    19d8:	06 96       	adiw	r24, 0x06	; 6
    19da:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_Z14print_keyboardPc>
				drawDeleteButton();
    19de:	0e 94 aa 09 	call	0x1354	; 0x1354 <_Z16drawDeleteButtonv>
				drawOKButton();
    19e2:	0e 94 84 09 	call	0x1308	; 0x1308 <_Z12drawOKButtonv>
				np_rerender = 0;
    19e6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <np_rerender>
			}
				
			if(get_bit(PINB, T_IRQ) == 0) {
    19ea:	b0 99       	sbic	0x16, 0	; 22
    19ec:	71 cf       	rjmp	.-286    	; 0x18d0 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    19ee:	be 01       	movw	r22, r28
    19f0:	6d 5f       	subi	r22, 0xFD	; 253
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
					if(check_touch(TP_X, TP_Y, KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    19fc:	ab 80       	ldd	r10, Y+3	; 0x03
    19fe:	bc 80       	ldd	r11, Y+4	; 0x04
    1a00:	c9 80       	ldd	r12, Y+1	; 0x01
    1a02:	da 80       	ldd	r13, Y+2	; 0x02
				np_rerender = 0;
			}
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1a04:	91 2c       	mov	r9, r1
					if(check_touch(TP_X, TP_Y, KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    1a06:	0f 2e       	mov	r0, r31
    1a08:	f5 e2       	ldi	r31, 0x25	; 37
    1a0a:	8f 2e       	mov	r8, r31
    1a0c:	f0 2d       	mov	r31, r0
    1a0e:	29 2d       	mov	r18, r9
    1a10:	27 70       	andi	r18, 0x07	; 7
    1a12:	82 9e       	mul	r8, r18
    1a14:	90 01       	movw	r18, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	26 5f       	subi	r18, 0xF6	; 246
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	49 2d       	mov	r20, r9
    1a1e:	46 95       	lsr	r20
    1a20:	46 95       	lsr	r20
    1a22:	46 95       	lsr	r20
    1a24:	84 9e       	mul	r8, r20
    1a26:	a0 01       	movw	r20, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	4a 5b       	subi	r20, 0xBA	; 186
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	68 94       	set
    1a30:	ee 24       	eor	r14, r14
    1a32:	e5 f8       	bld	r14, 5
    1a34:	f1 2c       	mov	r15, r1
    1a36:	00 e2       	ldi	r16, 0x20	; 32
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	b5 01       	movw	r22, r10
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1a42:	88 23       	and	r24, r24
    1a44:	71 f1       	breq	.+92     	; 0x1aa2 <main+0x214>
						if(newPlayerNameIndex == (MAX_NAME_LENGTH-1)) break; //jer ime ima max 7 char-a, ako je == 6 (zadnji index) naci da je vec sve upisao jer na zadnji mora doc nulterm
    1a46:	80 90 c8 01 	lds	r8, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1a4a:	26 e0       	ldi	r18, 0x06	; 6
    1a4c:	82 16       	cp	r8, r18
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <main+0x1c4>
    1a50:	00 c3       	rjmp	.+1536   	; 0x2052 <main+0x7c4>
						clrScr();
    1a52:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
						newPlayerName[newPlayerNameIndex] = str[i];
    1a56:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1a5a:	e8 2f       	mov	r30, r24
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	ea 59       	subi	r30, 0x9A	; 154
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	a6 e0       	ldi	r26, 0x06	; 6
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ac 0f       	add	r26, r28
    1a68:	bd 1f       	adc	r27, r29
    1a6a:	a9 0d       	add	r26, r9
    1a6c:	b1 1d       	adc	r27, r1
    1a6e:	9c 91       	ld	r25, X
    1a70:	90 83       	st	Z, r25
						newPlayerName[newPlayerNameIndex+1] = '\0';
    1a72:	11 82       	std	Z+1, r1	; 0x01
						newPlayerNameIndex++;
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <newPlayerNameIndex>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f6 e6       	ldi	r31, 0x66	; 102
    1a7e:	ef 2e       	mov	r14, r31
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	ff 2e       	mov	r15, r31
    1a84:	f0 2d       	mov	r31, r0
    1a86:	0e ea       	ldi	r16, 0xAE	; 174
    1a88:	1a e1       	ldi	r17, 0x1A	; 26
    1a8a:	2f ef       	ldi	r18, 0xFF	; 255
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	43 e0       	ldi	r20, 0x03	; 3
    1a90:	6a e0       	ldi	r22, 0x0A	; 10
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	88 ec       	ldi	r24, 0xC8	; 200
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
						//_delay_ms(500); //da ne napravi previse ocitanja
						np_rerender = 1;
    1a9c:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
						break;
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <main+0x21c>
				np_rerender = 0;
			}
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1aa2:	93 94       	inc	r9
    1aa4:	46 e1       	ldi	r20, 0x16	; 22
    1aa6:	94 12       	cpse	r9, r20
    1aa8:	b2 cf       	rjmp	.-156    	; 0x1a0e <main+0x180>
						//_delay_ms(500); //da ne napravi previse ocitanja
						np_rerender = 1;
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) { //delete button
    1aaa:	6b 81       	ldd	r22, Y+3	; 0x03
    1aac:	7c 81       	ldd	r23, Y+4	; 0x04
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	fc e3       	ldi	r31, 0x3C	; 60
    1ab2:	ef 2e       	mov	r14, r31
    1ab4:	f1 2c       	mov	r15, r1
    1ab6:	f0 2d       	mov	r31, r0
    1ab8:	08 e2       	ldi	r16, 0x28	; 40
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    1abc:	24 eb       	ldi	r18, 0xB4	; 180
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4e eb       	ldi	r20, 0xBE	; 190
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1acc:	88 23       	and	r24, r24
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <main+0x244>
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <main+0x2c2>
					if(newPlayerNameIndex > 1) { //znaci da ima jedno slovo, npr A\0
    1ad2:	80 90 c8 01 	lds	r8, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	88 15       	cp	r24, r8
    1ada:	e0 f4       	brcc	.+56     	; 0x1b14 <main+0x286>
						newPlayerNameIndex--;
    1adc:	8a 94       	dec	r8
    1ade:	80 92 c8 01 	sts	0x01C8, r8	; 0x8001c8 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = '\0';
    1ae2:	e8 2d       	mov	r30, r8
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	ea 59       	subi	r30, 0x9A	; 154
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	10 82       	st	Z, r1
						clrScr();
    1aec:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1af0:	0f 2e       	mov	r0, r31
    1af2:	f6 e6       	ldi	r31, 0x66	; 102
    1af4:	ef 2e       	mov	r14, r31
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	ff 2e       	mov	r15, r31
    1afa:	f0 2d       	mov	r31, r0
    1afc:	0e ea       	ldi	r16, 0xAE	; 174
    1afe:	1a e1       	ldi	r17, 0x1A	; 26
    1b00:	2f ef       	ldi	r18, 0xFF	; 255
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	43 e0       	ldi	r20, 0x03	; 3
    1b06:	6a e0       	ldi	r22, 0x0A	; 10
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    1b12:	1c c0       	rjmp	.+56     	; 0x1b4c <main+0x2be>
					}else if(newPlayerNameIndex == 1){ //nema ni jedno slovo, stavim razmak jer inace ako je nulterm bude zbugano
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	89 12       	cpse	r8, r25
    1b18:	19 c0       	rjmp	.+50     	; 0x1b4c <main+0x2be>
						newPlayerNameIndex--;
    1b1a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = ' ';
    1b1e:	80 e2       	ldi	r24, 0x20	; 32
    1b20:	e6 e6       	ldi	r30, 0x66	; 102
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 83       	st	Z, r24
						clrScr();
    1b26:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1b2a:	0f 2e       	mov	r0, r31
    1b2c:	f6 e6       	ldi	r31, 0x66	; 102
    1b2e:	ef 2e       	mov	r14, r31
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	ff 2e       	mov	r15, r31
    1b34:	f0 2d       	mov	r31, r0
    1b36:	0e ea       	ldi	r16, 0xAE	; 174
    1b38:	1a e1       	ldi	r17, 0x1A	; 26
    1b3a:	2f ef       	ldi	r18, 0xFF	; 255
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	43 e0       	ldi	r20, 0x03	; 3
    1b40:	6a e0       	ldi	r22, 0x0A	; 10
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
					}
					np_rerender = 1;
    1b4c:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
				}
				
				if(check_touch(TP_X, TP_Y, OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W)) { //OK button
    1b50:	6b 81       	ldd	r22, Y+3	; 0x03
    1b52:	7c 81       	ldd	r23, Y+4	; 0x04
    1b54:	0f 2e       	mov	r0, r31
    1b56:	fc e3       	ldi	r31, 0x3C	; 60
    1b58:	ef 2e       	mov	r14, r31
    1b5a:	f1 2c       	mov	r15, r1
    1b5c:	f0 2d       	mov	r31, r0
    1b5e:	08 e2       	ldi	r16, 0x28	; 40
    1b60:	10 e0       	ldi	r17, 0x00	; 0
    1b62:	2a ef       	ldi	r18, 0xFA	; 250
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4e eb       	ldi	r20, 0xBE	; 190
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1b72:	88 23       	and	r24, r24
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <main+0x2ea>
    1b76:	ac ce       	rjmp	.-680    	; 0x18d0 <main+0x42>
					//create player i da se vrati na homescreen
					if(players_size == MAX_PLAYERS || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
    1b78:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <players_size>
    1b7c:	34 30       	cpi	r19, 0x04	; 4
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <main+0x2f4>
    1b80:	a7 ce       	rjmp	.-690    	; 0x18d0 <main+0x42>
    1b82:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1b86:	44 23       	and	r20, r20
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <main+0x2fe>
    1b8a:	a2 ce       	rjmp	.-700    	; 0x18d0 <main+0x42>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1b8e:	e6 e6       	ldi	r30, 0x66	; 102
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	01 90       	ld	r0, Z+
    1b94:	00 20       	and	r0, r0
    1b96:	e9 f7       	brne	.-6      	; 0x1b92 <main+0x304>
    1b98:	31 97       	sbiw	r30, 0x01	; 1
    1b9a:	e6 56       	subi	r30, 0x66	; 102
    1b9c:	f0 40       	sbci	r31, 0x00	; 0
    1b9e:	82 2f       	mov	r24, r18
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	8e 17       	cp	r24, r30
    1ba4:	9f 07       	cpc	r25, r31
    1ba6:	68 f4       	brcc	.+26     	; 0x1bc2 <main+0x334>
						newPlayer.name[i] = newPlayerName[i];
    1ba8:	e9 e4       	ldi	r30, 0x49	; 73
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	ec 0f       	add	r30, r28
    1bae:	fd 1f       	adc	r31, r29
    1bb0:	e8 0f       	add	r30, r24
    1bb2:	f9 1f       	adc	r31, r25
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	aa 59       	subi	r26, 0x9A	; 154
    1bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bba:	8c 91       	ld	r24, X
    1bbc:	84 83       	std	Z+4, r24	; 0x04
					//create player i da se vrati na homescreen
					if(players_size == MAX_PLAYERS || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1bbe:	2f 5f       	subi	r18, 0xFF	; 255
    1bc0:	e6 cf       	rjmp	.-52     	; 0x1b8e <main+0x300>
						newPlayer.name[i] = newPlayerName[i];
					}
					newPlayer.name[newPlayerNameIndex] = '\0';
    1bc2:	e9 e4       	ldi	r30, 0x49	; 73
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	ec 0f       	add	r30, r28
    1bc8:	fd 1f       	adc	r31, r29
    1bca:	e4 0f       	add	r30, r20
    1bcc:	f1 1d       	adc	r31, r1
    1bce:	14 82       	std	Z+4, r1	; 0x04
					newPlayer.points = 0;
					newPlayer.clicked = 0;
					newPlayer.color = WHITE;
					players[players_size] = newPlayer;
    1bd0:	2a 96       	adiw	r28, 0x0a	; 10
    1bd2:	1f ae       	std	Y+63, r1	; 0x3f
    1bd4:	2a 97       	sbiw	r28, 0x0a	; 10
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255
    1bda:	2c 96       	adiw	r28, 0x0c	; 12
    1bdc:	9f af       	std	Y+63, r25	; 0x3f
    1bde:	8e af       	std	Y+62, r24	; 0x3e
    1be0:	2c 97       	sbiw	r28, 0x0c	; 12
    1be2:	2d 96       	adiw	r28, 0x0d	; 13
    1be4:	1f ae       	std	Y+63, r1	; 0x3f
    1be6:	2d 97       	sbiw	r28, 0x0d	; 13
    1be8:	a1 e0       	ldi	r26, 0x01	; 1
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ac 0f       	add	r26, r28
    1bee:	bd 1f       	adc	r27, r29
    1bf0:	fb e0       	ldi	r31, 0x0B	; 11
    1bf2:	3f 9f       	mul	r19, r31
    1bf4:	a0 0d       	add	r26, r0
    1bf6:	b1 1d       	adc	r27, r1
    1bf8:	11 24       	eor	r1, r1
    1bfa:	5c 96       	adiw	r26, 0x1c	; 28
    1bfc:	8b e0       	ldi	r24, 0x0B	; 11
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e7 5b       	subi	r30, 0xB7	; 183
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	01 90       	ld	r0, Z+
    1c06:	0d 92       	st	X+, r0
    1c08:	8a 95       	dec	r24
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <main+0x376>
					players_size++;
    1c0c:	3f 5f       	subi	r19, 0xFF	; 255
    1c0e:	30 93 c7 01 	sts	0x01C7, r19	; 0x8001c7 <players_size>
					resetNewPlayerName();
    1c12:	0e 94 67 07 	call	0xece	; 0xece <_Z18resetNewPlayerNamev>
					clrScr();
    1c16:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
					np_rerender = 1;
    1c1a:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
					currentPage = HOMESCREEN;
    1c1e:	1d 82       	std	Y+5, r1	; 0x05
    1c20:	57 ce       	rjmp	.-850    	; 0x18d0 <main+0x42>
				}
			}
			
		}else if(currentPage == CHOOSE_PLAYER) {
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <main+0x39a>
    1c26:	03 c1       	rjmp	.+518    	; 0x1e2e <main+0x5a0>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1c28:	8e 01       	movw	r16, r28
    1c2a:	04 5e       	subi	r16, 0xE4	; 228
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	9e 01       	movw	r18, r28
    1c30:	23 5e       	subi	r18, 0xE3	; 227
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	ae 01       	movw	r20, r28
    1c36:	4b 5f       	subi	r20, 0xFB	; 251
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	be 01       	movw	r22, r28
    1c3c:	6d 5f       	subi	r22, 0xFD	; 253
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	ce 01       	movw	r24, r28
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			if(cp_rerender) { //tako da ne radi stalno rerender ako se nista nije promjenilo, puno je responzivnije na ovaj nacin
    1c48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cp_rerender>
    1c4c:	88 23       	and	r24, r24
    1c4e:	61 f0       	breq	.+24     	; 0x1c68 <main+0x3da>
				drawBackButton();
    1c50:	0e 94 3c 07 	call	0xe78	; 0xe78 <_Z14drawBackButtonv>
				showPlayers(players, players_size);
    1c54:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <players_size>
    1c58:	ce 01       	movw	r24, r28
    1c5a:	4d 96       	adiw	r24, 0x1d	; 29
    1c5c:	0e 94 02 09 	call	0x1204	; 0x1204 <_Z11showPlayersP6Playerh>
				drawStartButton();
    1c60:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <_Z15drawStartButtonv>
				cp_rerender = 0;	
    1c64:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cp_rerender>
			}
			
			if (get_bit(PINB, T_IRQ) == 0) {
    1c68:	b0 99       	sbic	0x16, 0	; 22
    1c6a:	32 ce       	rjmp	.-924    	; 0x18d0 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    1c6c:	be 01       	movw	r22, r28
    1c6e:	6d 5f       	subi	r22, 0xFD	; 253
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	ce 01       	movw	r24, r28
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1c7a:	80 90 c7 01 	lds	r8, 0x01C7	; 0x8001c7 <players_size>
    1c7e:	88 20       	and	r8, r8
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <main+0x3f6>
    1c82:	b1 c0       	rjmp	.+354    	; 0x1de6 <main+0x558>
					tmp = i > 1 ? 50 : 0;
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1c84:	ab 80       	ldd	r10, Y+3	; 0x03
    1c86:	bc 80       	ldd	r11, Y+4	; 0x04
    1c88:	c9 80       	ldd	r12, Y+1	; 0x01
    1c8a:	da 80       	ldd	r13, Y+2	; 0x02
    1c8c:	91 2c       	mov	r9, r1
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1c90:	0f 2e       	mov	r0, r31
    1c92:	f2 e8       	ldi	r31, 0x82	; 130
    1c94:	7f 2e       	mov	r7, r31
    1c96:	f0 2d       	mov	r31, r0
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1c98:	61 2c       	mov	r6, r1
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <main+0x41a>
    1c9c:	21 e0       	ldi	r18, 0x01	; 1
    1c9e:	29 15       	cp	r18, r9
    1ca0:	10 f0       	brcs	.+4      	; 0x1ca6 <main+0x418>
    1ca2:	46 2d       	mov	r20, r6
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <main+0x41a>
    1ca6:	42 e3       	ldi	r20, 0x32	; 50
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1ca8:	90 fa       	bst	r9, 0
    1caa:	44 24       	eor	r4, r4
    1cac:	40 f8       	bld	r4, 0
    1cae:	51 2c       	mov	r5, r1
    1cb0:	74 9c       	mul	r7, r4
    1cb2:	90 01       	movw	r18, r0
    1cb4:	75 9c       	mul	r7, r5
    1cb6:	30 0d       	add	r19, r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	2c 5e       	subi	r18, 0xEC	; 236
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	4a 5b       	subi	r20, 0xBA	; 186
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	0f 2e       	mov	r0, r31
    1cc6:	f8 e7       	ldi	r31, 0x78	; 120
    1cc8:	ef 2e       	mov	r14, r31
    1cca:	f1 2c       	mov	r15, r1
    1ccc:	f0 2d       	mov	r31, r0
    1cce:	08 e2       	ldi	r16, 0x28	; 40
    1cd0:	10 e0       	ldi	r17, 0x00	; 0
    1cd2:	b5 01       	movw	r22, r10
    1cd4:	c6 01       	movw	r24, r12
    1cd6:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <main+0x452>
    1cde:	80 c0       	rjmp	.+256    	; 0x1de0 <main+0x552>
						if(players[i].color == WHITE && cross_chosen == NONE) {
    1ce0:	29 2d       	mov	r18, r9
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	e1 e0       	ldi	r30, 0x01	; 1
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ec 0f       	add	r30, r28
    1cea:	fd 1f       	adc	r31, r29
    1cec:	4b e0       	ldi	r20, 0x0B	; 11
    1cee:	94 9e       	mul	r9, r20
    1cf0:	e0 0d       	add	r30, r0
    1cf2:	f1 1d       	adc	r31, r1
    1cf4:	11 24       	eor	r1, r1
    1cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cf8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cfc:	ef ef       	ldi	r30, 0xFF	; 255
    1cfe:	9e 07       	cpc	r25, r30
    1d00:	99 f5       	brne	.+102    	; 0x1d68 <main+0x4da>
    1d02:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1d06:	85 30       	cpi	r24, 0x05	; 5
    1d08:	a9 f4       	brne	.+42     	; 0x1d34 <main+0x4a6>
							players[i].color = RED;
    1d0a:	8b e0       	ldi	r24, 0x0B	; 11
    1d0c:	82 9f       	mul	r24, r18
    1d0e:	f0 01       	movw	r30, r0
    1d10:	83 9f       	mul	r24, r19
    1d12:	f0 0d       	add	r31, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	8c 0f       	add	r24, r28
    1d1c:	9d 1f       	adc	r25, r29
    1d1e:	e8 0f       	add	r30, r24
    1d20:	f9 1f       	adc	r31, r25
    1d22:	89 e6       	ldi	r24, 0x69	; 105
    1d24:	93 ed       	ldi	r25, 0xD3	; 211
    1d26:	96 8f       	std	Z+30, r25	; 0x1e
    1d28:	85 8f       	std	Z+29, r24	; 0x1d
							players[i].clicked = 1;
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	97 8f       	std	Z+31, r25	; 0x1f
							cross_chosen = i;
    1d2e:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <cross_chosen>
    1d32:	4a c0       	rjmp	.+148    	; 0x1dc8 <main+0x53a>
						}else if(players[i].color == WHITE && cross_chosen != 5 && nought_chosen == NONE) {
    1d34:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1d38:	85 30       	cpi	r24, 0x05	; 5
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <main+0x4b0>
    1d3c:	45 c0       	rjmp	.+138    	; 0x1dc8 <main+0x53a>
							players[i].color = GREEN;
    1d3e:	8b e0       	ldi	r24, 0x0B	; 11
    1d40:	82 9f       	mul	r24, r18
    1d42:	f0 01       	movw	r30, r0
    1d44:	83 9f       	mul	r24, r19
    1d46:	f0 0d       	add	r31, r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	8c 0f       	add	r24, r28
    1d50:	9d 1f       	adc	r25, r29
    1d52:	e8 0f       	add	r30, r24
    1d54:	f9 1f       	adc	r31, r25
    1d56:	8b e2       	ldi	r24, 0x2B	; 43
    1d58:	97 ec       	ldi	r25, 0xC7	; 199
    1d5a:	96 8f       	std	Z+30, r25	; 0x1e
    1d5c:	85 8f       	std	Z+29, r24	; 0x1d
							players[i].clicked = 1;
    1d5e:	91 e0       	ldi	r25, 0x01	; 1
    1d60:	97 8f       	std	Z+31, r25	; 0x1f
							nought_chosen = i;
    1d62:	90 92 64 00 	sts	0x0064, r9	; 0x800064 <nought_chosen>
    1d66:	30 c0       	rjmp	.+96     	; 0x1dc8 <main+0x53a>
						}else if(players[i].color == RED) {
    1d68:	89 36       	cpi	r24, 0x69	; 105
    1d6a:	e3 ed       	ldi	r30, 0xD3	; 211
    1d6c:	9e 07       	cpc	r25, r30
    1d6e:	a9 f4       	brne	.+42     	; 0x1d9a <main+0x50c>
							players[i].color = WHITE;
    1d70:	8b e0       	ldi	r24, 0x0B	; 11
    1d72:	82 9f       	mul	r24, r18
    1d74:	f0 01       	movw	r30, r0
    1d76:	83 9f       	mul	r24, r19
    1d78:	f0 0d       	add	r31, r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	8c 0f       	add	r24, r28
    1d82:	9d 1f       	adc	r25, r29
    1d84:	e8 0f       	add	r30, r24
    1d86:	f9 1f       	adc	r31, r25
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	9f ef       	ldi	r25, 0xFF	; 255
    1d8c:	96 8f       	std	Z+30, r25	; 0x1e
    1d8e:	85 8f       	std	Z+29, r24	; 0x1d
							cross_chosen = NONE;
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <cross_chosen>
							players[i].clicked = 0;
    1d96:	17 8e       	std	Z+31, r1	; 0x1f
    1d98:	17 c0       	rjmp	.+46     	; 0x1dc8 <main+0x53a>
						}else if(players[i].color == GREEN) {
    1d9a:	8b 32       	cpi	r24, 0x2B	; 43
    1d9c:	97 4c       	sbci	r25, 0xC7	; 199
    1d9e:	a1 f4       	brne	.+40     	; 0x1dc8 <main+0x53a>
							players[i].color = WHITE;
    1da0:	8b e0       	ldi	r24, 0x0B	; 11
    1da2:	82 9f       	mul	r24, r18
    1da4:	f0 01       	movw	r30, r0
    1da6:	83 9f       	mul	r24, r19
    1da8:	f0 0d       	add	r31, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	8c 0f       	add	r24, r28
    1db2:	9d 1f       	adc	r25, r29
    1db4:	e8 0f       	add	r30, r24
    1db6:	f9 1f       	adc	r31, r25
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	96 8f       	std	Z+30, r25	; 0x1e
    1dbe:	85 8f       	std	Z+29, r24	; 0x1d
							nought_chosen = NONE;
    1dc0:	85 e0       	ldi	r24, 0x05	; 5
    1dc2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <nought_chosen>
							players[i].clicked = 0;
    1dc6:	17 8e       	std	Z+31, r1	; 0x1f
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1dc8:	9f ef       	ldi	r25, 0xFF	; 255
    1dca:	ef e1       	ldi	r30, 0x1F	; 31
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	91 50       	subi	r25, 0x01	; 1
    1dd0:	e0 40       	sbci	r30, 0x00	; 0
    1dd2:	f0 40       	sbci	r31, 0x00	; 0
    1dd4:	e1 f7       	brne	.-8      	; 0x1dce <main+0x540>
    1dd6:	00 c0       	rjmp	.+0      	; 0x1dd8 <main+0x54a>
    1dd8:	00 00       	nop
						}
						_delay_ms(50); //da ne napravi 2 ocitanja
						cp_rerender = 1;
    1dda:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <cp_rerender>
						break;
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <main+0x558>
			}
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1de0:	93 94       	inc	r9
    1de2:	98 10       	cpse	r9, r8
    1de4:	5b cf       	rjmp	.-330    	; 0x1c9c <main+0x40e>
						cp_rerender = 1;
						break;
					}
				}
				
				if(check_touch(TP_X, TP_Y, START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W)) {
    1de6:	6b 81       	ldd	r22, Y+3	; 0x03
    1de8:	7c 81       	ldd	r23, Y+4	; 0x04
    1dea:	0f 2e       	mov	r0, r31
    1dec:	fa e5       	ldi	r31, 0x5A	; 90
    1dee:	ef 2e       	mov	r14, r31
    1df0:	f1 2c       	mov	r15, r1
    1df2:	f0 2d       	mov	r31, r0
    1df4:	08 e2       	ldi	r16, 0x28	; 40
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	2c ed       	ldi	r18, 0xDC	; 220
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4e eb       	ldi	r20, 0xBE	; 190
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <main+0x580>
    1e0c:	61 cd       	rjmp	.-1342   	; 0x18d0 <main+0x42>
					if(cross_chosen != NONE && nought_chosen != NONE){ //ne moze uc u game ako nije odabrao dvojicu
    1e0e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1e12:	85 30       	cpi	r24, 0x05	; 5
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <main+0x58a>
    1e16:	5c cd       	rjmp	.-1352   	; 0x18d0 <main+0x42>
    1e18:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1e1c:	85 30       	cpi	r24, 0x05	; 5
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <main+0x594>
    1e20:	57 cd       	rjmp	.-1362   	; 0x18d0 <main+0x42>
						clrScr();
    1e22:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
						currentPage = GAME;
    1e26:	84 e0       	ldi	r24, 0x04	; 4
    1e28:	8d 83       	std	Y+5, r24	; 0x05
						game_rerender = 1; //dok ovo nisam napravio, prvi put nakon sta si stisnuo back i usao u GAME ovo bi bilo 0 iako se unutar checkBackButton to stavi na 1 ?????
    1e2a:	3c 8e       	std	Y+28, r3	; 0x1c
    1e2c:	51 cd       	rjmp	.-1374   	; 0x18d0 <main+0x42>
					}
				}
			}
		}else if(currentPage == LEADERBOARDS) {
    1e2e:	83 30       	cpi	r24, 0x03	; 3
    1e30:	c9 f4       	brne	.+50     	; 0x1e64 <main+0x5d6>
			drawBackButton();
    1e32:	0e 94 3c 07 	call	0xe78	; 0xe78 <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1e36:	8e 01       	movw	r16, r28
    1e38:	04 5e       	subi	r16, 0xE4	; 228
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	23 5e       	subi	r18, 0xE3	; 227
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	ae 01       	movw	r20, r28
    1e44:	4b 5f       	subi	r20, 0xFB	; 251
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	be 01       	movw	r22, r28
    1e4a:	6d 5f       	subi	r22, 0xFD	; 253
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	ce 01       	movw	r24, r28
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//printLeaderboards(players, sizeof(players) / sizeof(players[0])); //moras prije nego saljes u funkciju jer se u funkciju salje samo pointer, ali ovo ce ti poslat za koliko njih je alocirano mjesta, a ne koliko ih je stvarno unutra
			printLeaderboards(players, players_size);
    1e56:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <players_size>
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	4d 96       	adiw	r24, 0x1d	; 29
    1e5e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_Z17printLeaderboardsP6Playerh>
    1e62:	36 cd       	rjmp	.-1428   	; 0x18d0 <main+0x42>
		}else if(currentPage == GAME) {
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <main+0x5dc>
    1e68:	33 cd       	rjmp	.-1434   	; 0x18d0 <main+0x42>
			//drawBackButton();
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	04 5e       	subi	r16, 0xE4	; 228
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	9e 01       	movw	r18, r28
    1e72:	23 5e       	subi	r18, 0xE3	; 227
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	ae 01       	movw	r20, r28
    1e78:	4b 5f       	subi	r20, 0xFB	; 251
    1e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7c:	be 01       	movw	r22, r28
    1e7e:	6d 5f       	subi	r22, 0xFD	; 253
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//drawNames(players);
			//drawGrid();
			//char tmp[2];
			//sprintf(tmp, "%d\0", game_rerender);
			//print_string(200, 10, 2, WHITE, CYAN, tmp);
			if(gameOver && check_touch(TP_X, TP_Y, TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W)) { //TRY AGAIN
    1e8a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1e8e:	88 23       	and	r24, r24
    1e90:	f1 f0       	breq	.+60     	; 0x1ece <main+0x640>
    1e92:	6b 81       	ldd	r22, Y+3	; 0x03
    1e94:	7c 81       	ldd	r23, Y+4	; 0x04
    1e96:	0f 2e       	mov	r0, r31
    1e98:	f9 e6       	ldi	r31, 0x69	; 105
    1e9a:	ef 2e       	mov	r14, r31
    1e9c:	f1 2c       	mov	r15, r1
    1e9e:	f0 2d       	mov	r31, r0
    1ea0:	0e e1       	ldi	r16, 0x1E	; 30
    1ea2:	10 e0       	ldi	r17, 0x00	; 0
    1ea4:	2a e0       	ldi	r18, 0x0A	; 10
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	48 ec       	ldi	r20, 0xC8	; 200
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <main+0x62c>
    1eb8:	0b cd       	rjmp	.-1514   	; 0x18d0 <main+0x42>
				resetGame();
    1eba:	0e 94 96 07 	call	0xf2c	; 0xf2c <_Z9resetGamev>
				clrScr();
    1ebe:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z6clrScrv>
				game_rerender = 1;
    1ec2:	3c 8e       	std	Y+28, r3	; 0x1c
			}
			
			if(gameOver) continue;
    1ec4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1ec8:	81 11       	cpse	r24, r1
    1eca:	02 cd       	rjmp	.-1532   	; 0x18d0 <main+0x42>
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <main+0x646>
			
			if(game_rerender) { //da se rerendera tek kad se desi promjena, ne znam zasto se ne rendera kad prvi put udes unutra nakon sta si BACK button stisnuo, ako ne uspijes rjesit onda pusti bez ovog if-a pa ce bit malo manje responzivno --uspio
    1ece:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ed0:	88 23       	and	r24, r24
    1ed2:	89 f0       	breq	.+34     	; 0x1ef6 <main+0x668>
				drawBackButton();
    1ed4:	0e 94 3c 07 	call	0xe78	; 0xe78 <_Z14drawBackButtonv>
				drawNames(players); //zbog nekog razloga kad ude tu ponovo vrijednost od game_rerender je 0 ??? --uspio ali svejedno ne kuzim zasto se to desava ??
    1ed8:	ce 01       	movw	r24, r28
    1eda:	4d 96       	adiw	r24, 0x1d	; 29
    1edc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_Z9drawNamesP6Player>
				drawGrid();
    1ee0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z8drawGridv>
				checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	4d 96       	adiw	r24, 0x1d	; 29
    1ee8:	0e 94 1e 0b 	call	0x163c	; 0x163c <_Z13checkGameOverP6Player>
				drawTurn(players);
    1eec:	ce 01       	movw	r24, r28
    1eee:	4d 96       	adiw	r24, 0x1d	; 29
    1ef0:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z8drawTurnP6Player>
				game_rerender = 0;
    1ef4:	1c 8e       	std	Y+28, r1	; 0x1c
			}
			
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
    1ef6:	b0 99       	sbic	0x16, 0	; 22
    1ef8:	eb cc       	rjmp	.-1578   	; 0x18d0 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    1efa:	be 01       	movw	r22, r28
    1efc:	6d 5f       	subi	r22, 0xFD	; 253
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
    1f08:	8e eb       	ldi	r24, 0xBE	; 190
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	6a 96       	adiw	r28, 0x1a	; 26
    1f0e:	9f af       	std	Y+63, r25	; 0x3f
    1f10:	8e af       	std	Y+62, r24	; 0x3e
    1f12:	6a 97       	sbiw	r28, 0x1a	; 26
    1f14:	0e e6       	ldi	r16, 0x6E	; 110
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	61 2c       	mov	r6, r1
    1f1a:	71 2c       	mov	r7, r1
    1f1c:	a1 96       	adiw	r28, 0x21	; 33
    1f1e:	5f ae       	std	Y+63, r5	; 0x3f
    1f20:	4e ae       	std	Y+62, r4	; 0x3e
    1f22:	a1 97       	sbiw	r28, 0x21	; 33
    1f24:	6f 96       	adiw	r28, 0x1f	; 31
    1f26:	3f ae       	std	Y+63, r3	; 0x3f
    1f28:	6f 97       	sbiw	r28, 0x1f	; 31
    1f2a:	18 01       	movw	r2, r16
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
						if(check_touch(TP_X, TP_Y, GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE, GRID_BLOCK_SIZE, GRID_BLOCK_SIZE)) {
    1f2c:	6e 96       	adiw	r28, 0x1e	; 30
    1f2e:	7f ae       	std	Y+63, r7	; 0x3f
    1f30:	6e ae       	std	Y+62, r6	; 0x3e
    1f32:	6e 97       	sbiw	r28, 0x1e	; 30
    1f34:	eb 81       	ldd	r30, Y+3	; 0x03
    1f36:	fc 81       	ldd	r31, Y+4	; 0x04
    1f38:	66 96       	adiw	r28, 0x16	; 22
    1f3a:	ff af       	std	Y+63, r31	; 0x3f
    1f3c:	ee af       	std	Y+62, r30	; 0x3e
    1f3e:	66 97       	sbiw	r28, 0x16	; 22
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	68 96       	adiw	r28, 0x18	; 24
    1f46:	9f af       	std	Y+63, r25	; 0x3f
    1f48:	8e af       	std	Y+62, r24	; 0x3e
    1f4a:	68 97       	sbiw	r28, 0x18	; 24
    1f4c:	6a 96       	adiw	r28, 0x1a	; 26
    1f4e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f50:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f52:	6a 97       	sbiw	r28, 0x1a	; 26
    1f54:	0f 2e       	mov	r0, r31
    1f56:	fd e2       	ldi	r31, 0x2D	; 45
    1f58:	af 2e       	mov	r10, r31
    1f5a:	b1 2c       	mov	r11, r1
    1f5c:	f0 2d       	mov	r31, r0
    1f5e:	c1 2c       	mov	r12, r1
    1f60:	d1 2c       	mov	r13, r1
    1f62:	6c 96       	adiw	r28, 0x1c	; 28
    1f64:	7f ae       	std	Y+63, r7	; 0x3f
    1f66:	6e ae       	std	Y+62, r6	; 0x3e
    1f68:	6c 97       	sbiw	r28, 0x1c	; 28
    1f6a:	26 01       	movw	r4, r12
    1f6c:	0f 2e       	mov	r0, r31
    1f6e:	fe e3       	ldi	r31, 0x3E	; 62
    1f70:	ef 2e       	mov	r14, r31
    1f72:	f1 2c       	mov	r15, r1
    1f74:	f0 2d       	mov	r31, r0
    1f76:	0e e3       	ldi	r16, 0x3E	; 62
    1f78:	10 e0       	ldi	r17, 0x00	; 0
    1f7a:	91 01       	movw	r18, r2
    1f7c:	a5 01       	movw	r20, r10
    1f7e:	66 96       	adiw	r28, 0x16	; 22
    1f80:	6e ad       	ldd	r22, Y+62	; 0x3e
    1f82:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f84:	66 97       	sbiw	r28, 0x16	; 22
    1f86:	68 96       	adiw	r28, 0x18	; 24
    1f88:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f8c:	68 97       	sbiw	r28, 0x18	; 24
    1f8e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1f92:	88 23       	and	r24, r24
    1f94:	81 f1       	breq	.+96     	; 0x1ff6 <main+0x768>
							if(board[i][j] == EMPTY) { //ovo sa konstantama
    1f96:	f4 01       	movw	r30, r8
    1f98:	80 81       	ld	r24, Z
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	2c c0       	rjmp	.+88     	; 0x1ff6 <main+0x768>
    1f9e:	82 01       	movw	r16, r4
    1fa0:	6c 96       	adiw	r28, 0x1c	; 28
    1fa2:	6e ac       	ldd	r6, Y+62	; 0x3e
    1fa4:	7f ac       	ldd	r7, Y+63	; 0x3f
    1fa6:	6c 97       	sbiw	r28, 0x1c	; 28
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
    1fa8:	6e 96       	adiw	r28, 0x1e	; 30
    1faa:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fac:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fae:	6e 97       	sbiw	r28, 0x1e	; 30
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	6e 96       	adiw	r28, 0x1e	; 30
    1fb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fba:	6e 97       	sbiw	r28, 0x1e	; 30
    1fbc:	e8 0f       	add	r30, r24
    1fbe:	f9 1f       	adc	r31, r25
    1fc0:	e2 54       	subi	r30, 0x42	; 66
    1fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc4:	e0 0f       	add	r30, r16
    1fc6:	f1 1f       	adc	r31, r17
    1fc8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1fcc:	80 83       	st	Z, r24
								numberOfMoves++;
    1fce:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
    1fd4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
								currentPlayer = drawOnGrid(GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
    1fd8:	9e e3       	ldi	r25, 0x3E	; 62
    1fda:	c9 9e       	mul	r12, r25
    1fdc:	80 2d       	mov	r24, r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	62 2d       	mov	r22, r2
    1fe2:	83 5d       	subi	r24, 0xD3	; 211
    1fe4:	0e 94 00 0b 	call	0x1600	; 0x1600 <_Z10drawOnGridhh>
    1fe8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
								game_rerender = 1;
    1fec:	6f 96       	adiw	r28, 0x1f	; 31
    1fee:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ff0:	6f 97       	sbiw	r28, 0x1f	; 31
    1ff2:	ec 8f       	std	Y+28, r30	; 0x1c
								break;
    1ff4:	12 c0       	rjmp	.+36     	; 0x201a <main+0x78c>
    1ff6:	ff ef       	ldi	r31, 0xFF	; 255
    1ff8:	cf 1a       	sub	r12, r31
    1ffa:	df 0a       	sbc	r13, r31
    1ffc:	2e e3       	ldi	r18, 0x3E	; 62
    1ffe:	a2 0e       	add	r10, r18
    2000:	b1 1c       	adc	r11, r1
    2002:	4f ef       	ldi	r20, 0xFF	; 255
    2004:	84 1a       	sub	r8, r20
    2006:	94 0a       	sbc	r9, r20
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	c8 16       	cp	r12, r24
    200c:	d1 04       	cpc	r13, r1
    200e:	09 f0       	breq	.+2      	; 0x2012 <main+0x784>
    2010:	ac cf       	rjmp	.-168    	; 0x1f6a <main+0x6dc>
    2012:	6c 96       	adiw	r28, 0x1c	; 28
    2014:	6e ac       	ldd	r6, Y+62	; 0x3e
    2016:	7f ac       	ldd	r7, Y+63	; 0x3f
    2018:	6c 97       	sbiw	r28, 0x1c	; 28
    201a:	9f ef       	ldi	r25, 0xFF	; 255
    201c:	69 1a       	sub	r6, r25
    201e:	79 0a       	sbc	r7, r25
    2020:	6a 96       	adiw	r28, 0x1a	; 26
    2022:	ee ad       	ldd	r30, Y+62	; 0x3e
    2024:	ff ad       	ldd	r31, Y+63	; 0x3f
    2026:	6a 97       	sbiw	r28, 0x1a	; 26
    2028:	33 96       	adiw	r30, 0x03	; 3
    202a:	6a 96       	adiw	r28, 0x1a	; 26
    202c:	ff af       	std	Y+63, r31	; 0x3f
    202e:	ee af       	std	Y+62, r30	; 0x3e
    2030:	6a 97       	sbiw	r28, 0x1a	; 26
    2032:	fe e3       	ldi	r31, 0x3E	; 62
    2034:	2f 0e       	add	r2, r31
    2036:	31 1c       	adc	r3, r1
			
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
    2038:	23 e0       	ldi	r18, 0x03	; 3
    203a:	62 16       	cp	r6, r18
    203c:	71 04       	cpc	r7, r1
    203e:	09 f0       	breq	.+2      	; 0x2042 <main+0x7b4>
    2040:	75 cf       	rjmp	.-278    	; 0x1f2c <main+0x69e>
    2042:	a1 96       	adiw	r28, 0x21	; 33
    2044:	4e ac       	ldd	r4, Y+62	; 0x3e
    2046:	5f ac       	ldd	r5, Y+63	; 0x3f
    2048:	a1 97       	sbiw	r28, 0x21	; 33
    204a:	6f 96       	adiw	r28, 0x1f	; 31
    204c:	3f ac       	ldd	r3, Y+63	; 0x3f
    204e:	6f 97       	sbiw	r28, 0x1f	; 31
    2050:	3f cc       	rjmp	.-1922   	; 0x18d0 <main+0x42>
						//_delay_ms(500); //da ne napravi previse ocitanja
						np_rerender = 1;
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) { //delete button
    2052:	0f 2e       	mov	r0, r31
    2054:	fc e3       	ldi	r31, 0x3C	; 60
    2056:	ef 2e       	mov	r14, r31
    2058:	f1 2c       	mov	r15, r1
    205a:	f0 2d       	mov	r31, r0
    205c:	08 e2       	ldi	r16, 0x28	; 40
    205e:	10 e0       	ldi	r17, 0x00	; 0
    2060:	24 eb       	ldi	r18, 0xB4	; 180
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4e eb       	ldi	r20, 0xBE	; 190
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	b5 01       	movw	r22, r10
    206a:	c6 01       	movw	r24, r12
    206c:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    2070:	88 23       	and	r24, r24
    2072:	09 f4       	brne	.+2      	; 0x2076 <main+0x7e8>
    2074:	6d cd       	rjmp	.-1318   	; 0x1b50 <main+0x2c2>
    2076:	32 cd       	rjmp	.-1436   	; 0x1adc <main+0x24e>

00002078 <__umulhisi3>:
    2078:	a2 9f       	mul	r26, r18
    207a:	b0 01       	movw	r22, r0
    207c:	b3 9f       	mul	r27, r19
    207e:	c0 01       	movw	r24, r0
    2080:	a3 9f       	mul	r26, r19
    2082:	70 0d       	add	r23, r0
    2084:	81 1d       	adc	r24, r1
    2086:	11 24       	eor	r1, r1
    2088:	91 1d       	adc	r25, r1
    208a:	b2 9f       	mul	r27, r18
    208c:	70 0d       	add	r23, r0
    208e:	81 1d       	adc	r24, r1
    2090:	11 24       	eor	r1, r1
    2092:	91 1d       	adc	r25, r1
    2094:	08 95       	ret

00002096 <sprintf>:
    2096:	ae e0       	ldi	r26, 0x0E	; 14
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e1 e5       	ldi	r30, 0x51	; 81
    209c:	f0 e1       	ldi	r31, 0x10	; 16
    209e:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__prologue_saves__+0x1c>
    20a2:	0d 89       	ldd	r16, Y+21	; 0x15
    20a4:	1e 89       	ldd	r17, Y+22	; 0x16
    20a6:	86 e0       	ldi	r24, 0x06	; 6
    20a8:	8c 83       	std	Y+4, r24	; 0x04
    20aa:	1a 83       	std	Y+2, r17	; 0x02
    20ac:	09 83       	std	Y+1, r16	; 0x01
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	9f e7       	ldi	r25, 0x7F	; 127
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	ae 01       	movw	r20, r28
    20b8:	47 5e       	subi	r20, 0xE7	; 231
    20ba:	5f 4f       	sbci	r21, 0xFF	; 255
    20bc:	6f 89       	ldd	r22, Y+23	; 0x17
    20be:	78 8d       	ldd	r23, Y+24	; 0x18
    20c0:	ce 01       	movw	r24, r28
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	0e 94 6d 10 	call	0x20da	; 0x20da <vfprintf>
    20c8:	ef 81       	ldd	r30, Y+7	; 0x07
    20ca:	f8 85       	ldd	r31, Y+8	; 0x08
    20cc:	e0 0f       	add	r30, r16
    20ce:	f1 1f       	adc	r31, r17
    20d0:	10 82       	st	Z, r1
    20d2:	2e 96       	adiw	r28, 0x0e	; 14
    20d4:	e4 e0       	ldi	r30, 0x04	; 4
    20d6:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__epilogue_restores__+0x1c>

000020da <vfprintf>:
    20da:	ab e0       	ldi	r26, 0x0B	; 11
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e7       	ldi	r30, 0x73	; 115
    20e0:	f0 e1       	ldi	r31, 0x10	; 16
    20e2:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__>
    20e6:	6c 01       	movw	r12, r24
    20e8:	7b 01       	movw	r14, r22
    20ea:	8a 01       	movw	r16, r20
    20ec:	fc 01       	movw	r30, r24
    20ee:	17 82       	std	Z+7, r1	; 0x07
    20f0:	16 82       	std	Z+6, r1	; 0x06
    20f2:	83 81       	ldd	r24, Z+3	; 0x03
    20f4:	81 ff       	sbrs	r24, 1
    20f6:	cc c1       	rjmp	.+920    	; 0x2490 <vfprintf+0x3b6>
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	3c 01       	movw	r6, r24
    20fe:	f6 01       	movw	r30, r12
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	f7 01       	movw	r30, r14
    2104:	93 fd       	sbrc	r25, 3
    2106:	85 91       	lpm	r24, Z+
    2108:	93 ff       	sbrs	r25, 3
    210a:	81 91       	ld	r24, Z+
    210c:	7f 01       	movw	r14, r30
    210e:	88 23       	and	r24, r24
    2110:	09 f4       	brne	.+2      	; 0x2114 <vfprintf+0x3a>
    2112:	ba c1       	rjmp	.+884    	; 0x2488 <vfprintf+0x3ae>
    2114:	85 32       	cpi	r24, 0x25	; 37
    2116:	39 f4       	brne	.+14     	; 0x2126 <vfprintf+0x4c>
    2118:	93 fd       	sbrc	r25, 3
    211a:	85 91       	lpm	r24, Z+
    211c:	93 ff       	sbrs	r25, 3
    211e:	81 91       	ld	r24, Z+
    2120:	7f 01       	movw	r14, r30
    2122:	85 32       	cpi	r24, 0x25	; 37
    2124:	29 f4       	brne	.+10     	; 0x2130 <vfprintf+0x56>
    2126:	b6 01       	movw	r22, r12
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    212e:	e7 cf       	rjmp	.-50     	; 0x20fe <vfprintf+0x24>
    2130:	91 2c       	mov	r9, r1
    2132:	21 2c       	mov	r2, r1
    2134:	31 2c       	mov	r3, r1
    2136:	ff e1       	ldi	r31, 0x1F	; 31
    2138:	f3 15       	cp	r31, r3
    213a:	d8 f0       	brcs	.+54     	; 0x2172 <vfprintf+0x98>
    213c:	8b 32       	cpi	r24, 0x2B	; 43
    213e:	79 f0       	breq	.+30     	; 0x215e <vfprintf+0x84>
    2140:	38 f4       	brcc	.+14     	; 0x2150 <vfprintf+0x76>
    2142:	80 32       	cpi	r24, 0x20	; 32
    2144:	79 f0       	breq	.+30     	; 0x2164 <vfprintf+0x8a>
    2146:	83 32       	cpi	r24, 0x23	; 35
    2148:	a1 f4       	brne	.+40     	; 0x2172 <vfprintf+0x98>
    214a:	23 2d       	mov	r18, r3
    214c:	20 61       	ori	r18, 0x10	; 16
    214e:	1d c0       	rjmp	.+58     	; 0x218a <vfprintf+0xb0>
    2150:	8d 32       	cpi	r24, 0x2D	; 45
    2152:	61 f0       	breq	.+24     	; 0x216c <vfprintf+0x92>
    2154:	80 33       	cpi	r24, 0x30	; 48
    2156:	69 f4       	brne	.+26     	; 0x2172 <vfprintf+0x98>
    2158:	23 2d       	mov	r18, r3
    215a:	21 60       	ori	r18, 0x01	; 1
    215c:	16 c0       	rjmp	.+44     	; 0x218a <vfprintf+0xb0>
    215e:	83 2d       	mov	r24, r3
    2160:	82 60       	ori	r24, 0x02	; 2
    2162:	38 2e       	mov	r3, r24
    2164:	e3 2d       	mov	r30, r3
    2166:	e4 60       	ori	r30, 0x04	; 4
    2168:	3e 2e       	mov	r3, r30
    216a:	2a c0       	rjmp	.+84     	; 0x21c0 <vfprintf+0xe6>
    216c:	f3 2d       	mov	r31, r3
    216e:	f8 60       	ori	r31, 0x08	; 8
    2170:	1d c0       	rjmp	.+58     	; 0x21ac <vfprintf+0xd2>
    2172:	37 fc       	sbrc	r3, 7
    2174:	2d c0       	rjmp	.+90     	; 0x21d0 <vfprintf+0xf6>
    2176:	20 ed       	ldi	r18, 0xD0	; 208
    2178:	28 0f       	add	r18, r24
    217a:	2a 30       	cpi	r18, 0x0A	; 10
    217c:	40 f0       	brcs	.+16     	; 0x218e <vfprintf+0xb4>
    217e:	8e 32       	cpi	r24, 0x2E	; 46
    2180:	b9 f4       	brne	.+46     	; 0x21b0 <vfprintf+0xd6>
    2182:	36 fc       	sbrc	r3, 6
    2184:	81 c1       	rjmp	.+770    	; 0x2488 <vfprintf+0x3ae>
    2186:	23 2d       	mov	r18, r3
    2188:	20 64       	ori	r18, 0x40	; 64
    218a:	32 2e       	mov	r3, r18
    218c:	19 c0       	rjmp	.+50     	; 0x21c0 <vfprintf+0xe6>
    218e:	36 fe       	sbrs	r3, 6
    2190:	06 c0       	rjmp	.+12     	; 0x219e <vfprintf+0xc4>
    2192:	8a e0       	ldi	r24, 0x0A	; 10
    2194:	98 9e       	mul	r9, r24
    2196:	20 0d       	add	r18, r0
    2198:	11 24       	eor	r1, r1
    219a:	92 2e       	mov	r9, r18
    219c:	11 c0       	rjmp	.+34     	; 0x21c0 <vfprintf+0xe6>
    219e:	ea e0       	ldi	r30, 0x0A	; 10
    21a0:	2e 9e       	mul	r2, r30
    21a2:	20 0d       	add	r18, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	22 2e       	mov	r2, r18
    21a8:	f3 2d       	mov	r31, r3
    21aa:	f0 62       	ori	r31, 0x20	; 32
    21ac:	3f 2e       	mov	r3, r31
    21ae:	08 c0       	rjmp	.+16     	; 0x21c0 <vfprintf+0xe6>
    21b0:	8c 36       	cpi	r24, 0x6C	; 108
    21b2:	21 f4       	brne	.+8      	; 0x21bc <vfprintf+0xe2>
    21b4:	83 2d       	mov	r24, r3
    21b6:	80 68       	ori	r24, 0x80	; 128
    21b8:	38 2e       	mov	r3, r24
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <vfprintf+0xe6>
    21bc:	88 36       	cpi	r24, 0x68	; 104
    21be:	41 f4       	brne	.+16     	; 0x21d0 <vfprintf+0xf6>
    21c0:	f7 01       	movw	r30, r14
    21c2:	93 fd       	sbrc	r25, 3
    21c4:	85 91       	lpm	r24, Z+
    21c6:	93 ff       	sbrs	r25, 3
    21c8:	81 91       	ld	r24, Z+
    21ca:	7f 01       	movw	r14, r30
    21cc:	81 11       	cpse	r24, r1
    21ce:	b3 cf       	rjmp	.-154    	; 0x2136 <vfprintf+0x5c>
    21d0:	98 2f       	mov	r25, r24
    21d2:	9f 7d       	andi	r25, 0xDF	; 223
    21d4:	95 54       	subi	r25, 0x45	; 69
    21d6:	93 30       	cpi	r25, 0x03	; 3
    21d8:	28 f4       	brcc	.+10     	; 0x21e4 <vfprintf+0x10a>
    21da:	0c 5f       	subi	r16, 0xFC	; 252
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	9f e3       	ldi	r25, 0x3F	; 63
    21e0:	99 83       	std	Y+1, r25	; 0x01
    21e2:	0d c0       	rjmp	.+26     	; 0x21fe <vfprintf+0x124>
    21e4:	83 36       	cpi	r24, 0x63	; 99
    21e6:	31 f0       	breq	.+12     	; 0x21f4 <vfprintf+0x11a>
    21e8:	83 37       	cpi	r24, 0x73	; 115
    21ea:	71 f0       	breq	.+28     	; 0x2208 <vfprintf+0x12e>
    21ec:	83 35       	cpi	r24, 0x53	; 83
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <vfprintf+0x118>
    21f0:	59 c0       	rjmp	.+178    	; 0x22a4 <vfprintf+0x1ca>
    21f2:	21 c0       	rjmp	.+66     	; 0x2236 <vfprintf+0x15c>
    21f4:	f8 01       	movw	r30, r16
    21f6:	80 81       	ld	r24, Z
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	0e 5f       	subi	r16, 0xFE	; 254
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	88 24       	eor	r8, r8
    2200:	83 94       	inc	r8
    2202:	91 2c       	mov	r9, r1
    2204:	53 01       	movw	r10, r6
    2206:	13 c0       	rjmp	.+38     	; 0x222e <vfprintf+0x154>
    2208:	28 01       	movw	r4, r16
    220a:	f2 e0       	ldi	r31, 0x02	; 2
    220c:	4f 0e       	add	r4, r31
    220e:	51 1c       	adc	r5, r1
    2210:	f8 01       	movw	r30, r16
    2212:	a0 80       	ld	r10, Z
    2214:	b1 80       	ldd	r11, Z+1	; 0x01
    2216:	36 fe       	sbrs	r3, 6
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <vfprintf+0x146>
    221a:	69 2d       	mov	r22, r9
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <vfprintf+0x14a>
    2220:	6f ef       	ldi	r22, 0xFF	; 255
    2222:	7f ef       	ldi	r23, 0xFF	; 255
    2224:	c5 01       	movw	r24, r10
    2226:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strnlen>
    222a:	4c 01       	movw	r8, r24
    222c:	82 01       	movw	r16, r4
    222e:	f3 2d       	mov	r31, r3
    2230:	ff 77       	andi	r31, 0x7F	; 127
    2232:	3f 2e       	mov	r3, r31
    2234:	16 c0       	rjmp	.+44     	; 0x2262 <vfprintf+0x188>
    2236:	28 01       	movw	r4, r16
    2238:	22 e0       	ldi	r18, 0x02	; 2
    223a:	42 0e       	add	r4, r18
    223c:	51 1c       	adc	r5, r1
    223e:	f8 01       	movw	r30, r16
    2240:	a0 80       	ld	r10, Z
    2242:	b1 80       	ldd	r11, Z+1	; 0x01
    2244:	36 fe       	sbrs	r3, 6
    2246:	03 c0       	rjmp	.+6      	; 0x224e <vfprintf+0x174>
    2248:	69 2d       	mov	r22, r9
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <vfprintf+0x178>
    224e:	6f ef       	ldi	r22, 0xFF	; 255
    2250:	7f ef       	ldi	r23, 0xFF	; 255
    2252:	c5 01       	movw	r24, r10
    2254:	0e 94 4e 12 	call	0x249c	; 0x249c <strnlen_P>
    2258:	4c 01       	movw	r8, r24
    225a:	f3 2d       	mov	r31, r3
    225c:	f0 68       	ori	r31, 0x80	; 128
    225e:	3f 2e       	mov	r3, r31
    2260:	82 01       	movw	r16, r4
    2262:	33 fc       	sbrc	r3, 3
    2264:	1b c0       	rjmp	.+54     	; 0x229c <vfprintf+0x1c2>
    2266:	82 2d       	mov	r24, r2
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	88 16       	cp	r8, r24
    226c:	99 06       	cpc	r9, r25
    226e:	b0 f4       	brcc	.+44     	; 0x229c <vfprintf+0x1c2>
    2270:	b6 01       	movw	r22, r12
    2272:	80 e2       	ldi	r24, 0x20	; 32
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    227a:	2a 94       	dec	r2
    227c:	f4 cf       	rjmp	.-24     	; 0x2266 <vfprintf+0x18c>
    227e:	f5 01       	movw	r30, r10
    2280:	37 fc       	sbrc	r3, 7
    2282:	85 91       	lpm	r24, Z+
    2284:	37 fe       	sbrs	r3, 7
    2286:	81 91       	ld	r24, Z+
    2288:	5f 01       	movw	r10, r30
    228a:	b6 01       	movw	r22, r12
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    2292:	21 10       	cpse	r2, r1
    2294:	2a 94       	dec	r2
    2296:	21 e0       	ldi	r18, 0x01	; 1
    2298:	82 1a       	sub	r8, r18
    229a:	91 08       	sbc	r9, r1
    229c:	81 14       	cp	r8, r1
    229e:	91 04       	cpc	r9, r1
    22a0:	71 f7       	brne	.-36     	; 0x227e <vfprintf+0x1a4>
    22a2:	e8 c0       	rjmp	.+464    	; 0x2474 <vfprintf+0x39a>
    22a4:	84 36       	cpi	r24, 0x64	; 100
    22a6:	11 f0       	breq	.+4      	; 0x22ac <vfprintf+0x1d2>
    22a8:	89 36       	cpi	r24, 0x69	; 105
    22aa:	41 f5       	brne	.+80     	; 0x22fc <vfprintf+0x222>
    22ac:	f8 01       	movw	r30, r16
    22ae:	37 fe       	sbrs	r3, 7
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <vfprintf+0x1e6>
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	0c 5f       	subi	r16, 0xFC	; 252
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <vfprintf+0x1f6>
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	07 2e       	mov	r0, r23
    22c6:	00 0c       	add	r0, r0
    22c8:	88 0b       	sbc	r24, r24
    22ca:	99 0b       	sbc	r25, r25
    22cc:	0e 5f       	subi	r16, 0xFE	; 254
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	f3 2d       	mov	r31, r3
    22d2:	ff 76       	andi	r31, 0x6F	; 111
    22d4:	3f 2e       	mov	r3, r31
    22d6:	97 ff       	sbrs	r25, 7
    22d8:	09 c0       	rjmp	.+18     	; 0x22ec <vfprintf+0x212>
    22da:	90 95       	com	r25
    22dc:	80 95       	com	r24
    22de:	70 95       	com	r23
    22e0:	61 95       	neg	r22
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	f0 68       	ori	r31, 0x80	; 128
    22ea:	3f 2e       	mov	r3, r31
    22ec:	2a e0       	ldi	r18, 0x0A	; 10
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	a3 01       	movw	r20, r6
    22f2:	0e 94 a0 12 	call	0x2540	; 0x2540 <__ultoa_invert>
    22f6:	88 2e       	mov	r8, r24
    22f8:	86 18       	sub	r8, r6
    22fa:	45 c0       	rjmp	.+138    	; 0x2386 <vfprintf+0x2ac>
    22fc:	85 37       	cpi	r24, 0x75	; 117
    22fe:	31 f4       	brne	.+12     	; 0x230c <vfprintf+0x232>
    2300:	23 2d       	mov	r18, r3
    2302:	2f 7e       	andi	r18, 0xEF	; 239
    2304:	b2 2e       	mov	r11, r18
    2306:	2a e0       	ldi	r18, 0x0A	; 10
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	25 c0       	rjmp	.+74     	; 0x2356 <vfprintf+0x27c>
    230c:	93 2d       	mov	r25, r3
    230e:	99 7f       	andi	r25, 0xF9	; 249
    2310:	b9 2e       	mov	r11, r25
    2312:	8f 36       	cpi	r24, 0x6F	; 111
    2314:	c1 f0       	breq	.+48     	; 0x2346 <vfprintf+0x26c>
    2316:	18 f4       	brcc	.+6      	; 0x231e <vfprintf+0x244>
    2318:	88 35       	cpi	r24, 0x58	; 88
    231a:	79 f0       	breq	.+30     	; 0x233a <vfprintf+0x260>
    231c:	b5 c0       	rjmp	.+362    	; 0x2488 <vfprintf+0x3ae>
    231e:	80 37       	cpi	r24, 0x70	; 112
    2320:	19 f0       	breq	.+6      	; 0x2328 <vfprintf+0x24e>
    2322:	88 37       	cpi	r24, 0x78	; 120
    2324:	21 f0       	breq	.+8      	; 0x232e <vfprintf+0x254>
    2326:	b0 c0       	rjmp	.+352    	; 0x2488 <vfprintf+0x3ae>
    2328:	e9 2f       	mov	r30, r25
    232a:	e0 61       	ori	r30, 0x10	; 16
    232c:	be 2e       	mov	r11, r30
    232e:	b4 fe       	sbrs	r11, 4
    2330:	0d c0       	rjmp	.+26     	; 0x234c <vfprintf+0x272>
    2332:	fb 2d       	mov	r31, r11
    2334:	f4 60       	ori	r31, 0x04	; 4
    2336:	bf 2e       	mov	r11, r31
    2338:	09 c0       	rjmp	.+18     	; 0x234c <vfprintf+0x272>
    233a:	34 fe       	sbrs	r3, 4
    233c:	0a c0       	rjmp	.+20     	; 0x2352 <vfprintf+0x278>
    233e:	29 2f       	mov	r18, r25
    2340:	26 60       	ori	r18, 0x06	; 6
    2342:	b2 2e       	mov	r11, r18
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <vfprintf+0x278>
    2346:	28 e0       	ldi	r18, 0x08	; 8
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	05 c0       	rjmp	.+10     	; 0x2356 <vfprintf+0x27c>
    234c:	20 e1       	ldi	r18, 0x10	; 16
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <vfprintf+0x27c>
    2352:	20 e1       	ldi	r18, 0x10	; 16
    2354:	32 e0       	ldi	r19, 0x02	; 2
    2356:	f8 01       	movw	r30, r16
    2358:	b7 fe       	sbrs	r11, 7
    235a:	07 c0       	rjmp	.+14     	; 0x236a <vfprintf+0x290>
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	0c 5f       	subi	r16, 0xFC	; 252
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <vfprintf+0x29c>
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 5f       	subi	r16, 0xFE	; 254
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	a3 01       	movw	r20, r6
    2378:	0e 94 a0 12 	call	0x2540	; 0x2540 <__ultoa_invert>
    237c:	88 2e       	mov	r8, r24
    237e:	86 18       	sub	r8, r6
    2380:	fb 2d       	mov	r31, r11
    2382:	ff 77       	andi	r31, 0x7F	; 127
    2384:	3f 2e       	mov	r3, r31
    2386:	36 fe       	sbrs	r3, 6
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <vfprintf+0x2ca>
    238a:	23 2d       	mov	r18, r3
    238c:	2e 7f       	andi	r18, 0xFE	; 254
    238e:	a2 2e       	mov	r10, r18
    2390:	89 14       	cp	r8, r9
    2392:	58 f4       	brcc	.+22     	; 0x23aa <vfprintf+0x2d0>
    2394:	34 fe       	sbrs	r3, 4
    2396:	0b c0       	rjmp	.+22     	; 0x23ae <vfprintf+0x2d4>
    2398:	32 fc       	sbrc	r3, 2
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <vfprintf+0x2d4>
    239c:	83 2d       	mov	r24, r3
    239e:	8e 7e       	andi	r24, 0xEE	; 238
    23a0:	a8 2e       	mov	r10, r24
    23a2:	05 c0       	rjmp	.+10     	; 0x23ae <vfprintf+0x2d4>
    23a4:	b8 2c       	mov	r11, r8
    23a6:	a3 2c       	mov	r10, r3
    23a8:	03 c0       	rjmp	.+6      	; 0x23b0 <vfprintf+0x2d6>
    23aa:	b8 2c       	mov	r11, r8
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <vfprintf+0x2d6>
    23ae:	b9 2c       	mov	r11, r9
    23b0:	a4 fe       	sbrs	r10, 4
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <vfprintf+0x2f8>
    23b4:	fe 01       	movw	r30, r28
    23b6:	e8 0d       	add	r30, r8
    23b8:	f1 1d       	adc	r31, r1
    23ba:	80 81       	ld	r24, Z
    23bc:	80 33       	cpi	r24, 0x30	; 48
    23be:	21 f4       	brne	.+8      	; 0x23c8 <vfprintf+0x2ee>
    23c0:	9a 2d       	mov	r25, r10
    23c2:	99 7e       	andi	r25, 0xE9	; 233
    23c4:	a9 2e       	mov	r10, r25
    23c6:	09 c0       	rjmp	.+18     	; 0x23da <vfprintf+0x300>
    23c8:	a2 fe       	sbrs	r10, 2
    23ca:	06 c0       	rjmp	.+12     	; 0x23d8 <vfprintf+0x2fe>
    23cc:	b3 94       	inc	r11
    23ce:	b3 94       	inc	r11
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <vfprintf+0x300>
    23d2:	8a 2d       	mov	r24, r10
    23d4:	86 78       	andi	r24, 0x86	; 134
    23d6:	09 f0       	breq	.+2      	; 0x23da <vfprintf+0x300>
    23d8:	b3 94       	inc	r11
    23da:	a3 fc       	sbrc	r10, 3
    23dc:	11 c0       	rjmp	.+34     	; 0x2400 <vfprintf+0x326>
    23de:	a0 fe       	sbrs	r10, 0
    23e0:	06 c0       	rjmp	.+12     	; 0x23ee <vfprintf+0x314>
    23e2:	b2 14       	cp	r11, r2
    23e4:	88 f4       	brcc	.+34     	; 0x2408 <vfprintf+0x32e>
    23e6:	28 0c       	add	r2, r8
    23e8:	92 2c       	mov	r9, r2
    23ea:	9b 18       	sub	r9, r11
    23ec:	0e c0       	rjmp	.+28     	; 0x240a <vfprintf+0x330>
    23ee:	b2 14       	cp	r11, r2
    23f0:	60 f4       	brcc	.+24     	; 0x240a <vfprintf+0x330>
    23f2:	b6 01       	movw	r22, r12
    23f4:	80 e2       	ldi	r24, 0x20	; 32
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    23fc:	b3 94       	inc	r11
    23fe:	f7 cf       	rjmp	.-18     	; 0x23ee <vfprintf+0x314>
    2400:	b2 14       	cp	r11, r2
    2402:	18 f4       	brcc	.+6      	; 0x240a <vfprintf+0x330>
    2404:	2b 18       	sub	r2, r11
    2406:	02 c0       	rjmp	.+4      	; 0x240c <vfprintf+0x332>
    2408:	98 2c       	mov	r9, r8
    240a:	21 2c       	mov	r2, r1
    240c:	a4 fe       	sbrs	r10, 4
    240e:	10 c0       	rjmp	.+32     	; 0x2430 <vfprintf+0x356>
    2410:	b6 01       	movw	r22, r12
    2412:	80 e3       	ldi	r24, 0x30	; 48
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    241a:	a2 fe       	sbrs	r10, 2
    241c:	17 c0       	rjmp	.+46     	; 0x244c <vfprintf+0x372>
    241e:	a1 fc       	sbrc	r10, 1
    2420:	03 c0       	rjmp	.+6      	; 0x2428 <vfprintf+0x34e>
    2422:	88 e7       	ldi	r24, 0x78	; 120
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 c0       	rjmp	.+4      	; 0x242c <vfprintf+0x352>
    2428:	88 e5       	ldi	r24, 0x58	; 88
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	b6 01       	movw	r22, r12
    242e:	0c c0       	rjmp	.+24     	; 0x2448 <vfprintf+0x36e>
    2430:	8a 2d       	mov	r24, r10
    2432:	86 78       	andi	r24, 0x86	; 134
    2434:	59 f0       	breq	.+22     	; 0x244c <vfprintf+0x372>
    2436:	a1 fe       	sbrs	r10, 1
    2438:	02 c0       	rjmp	.+4      	; 0x243e <vfprintf+0x364>
    243a:	8b e2       	ldi	r24, 0x2B	; 43
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <vfprintf+0x366>
    243e:	80 e2       	ldi	r24, 0x20	; 32
    2440:	a7 fc       	sbrc	r10, 7
    2442:	8d e2       	ldi	r24, 0x2D	; 45
    2444:	b6 01       	movw	r22, r12
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    244c:	89 14       	cp	r8, r9
    244e:	38 f4       	brcc	.+14     	; 0x245e <vfprintf+0x384>
    2450:	b6 01       	movw	r22, r12
    2452:	80 e3       	ldi	r24, 0x30	; 48
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    245a:	9a 94       	dec	r9
    245c:	f7 cf       	rjmp	.-18     	; 0x244c <vfprintf+0x372>
    245e:	8a 94       	dec	r8
    2460:	f3 01       	movw	r30, r6
    2462:	e8 0d       	add	r30, r8
    2464:	f1 1d       	adc	r31, r1
    2466:	80 81       	ld	r24, Z
    2468:	b6 01       	movw	r22, r12
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    2470:	81 10       	cpse	r8, r1
    2472:	f5 cf       	rjmp	.-22     	; 0x245e <vfprintf+0x384>
    2474:	22 20       	and	r2, r2
    2476:	09 f4       	brne	.+2      	; 0x247a <vfprintf+0x3a0>
    2478:	42 ce       	rjmp	.-892    	; 0x20fe <vfprintf+0x24>
    247a:	b6 01       	movw	r22, r12
    247c:	80 e2       	ldi	r24, 0x20	; 32
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 64 12 	call	0x24c8	; 0x24c8 <fputc>
    2484:	2a 94       	dec	r2
    2486:	f6 cf       	rjmp	.-20     	; 0x2474 <vfprintf+0x39a>
    2488:	f6 01       	movw	r30, r12
    248a:	86 81       	ldd	r24, Z+6	; 0x06
    248c:	97 81       	ldd	r25, Z+7	; 0x07
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0x3ba>
    2490:	8f ef       	ldi	r24, 0xFF	; 255
    2492:	9f ef       	ldi	r25, 0xFF	; 255
    2494:	2b 96       	adiw	r28, 0x0b	; 11
    2496:	e2 e1       	ldi	r30, 0x12	; 18
    2498:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__>

0000249c <strnlen_P>:
    249c:	fc 01       	movw	r30, r24
    249e:	05 90       	lpm	r0, Z+
    24a0:	61 50       	subi	r22, 0x01	; 1
    24a2:	70 40       	sbci	r23, 0x00	; 0
    24a4:	01 10       	cpse	r0, r1
    24a6:	d8 f7       	brcc	.-10     	; 0x249e <strnlen_P+0x2>
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	8e 0f       	add	r24, r30
    24ae:	9f 1f       	adc	r25, r31
    24b0:	08 95       	ret

000024b2 <strnlen>:
    24b2:	fc 01       	movw	r30, r24
    24b4:	61 50       	subi	r22, 0x01	; 1
    24b6:	70 40       	sbci	r23, 0x00	; 0
    24b8:	01 90       	ld	r0, Z+
    24ba:	01 10       	cpse	r0, r1
    24bc:	d8 f7       	brcc	.-10     	; 0x24b4 <strnlen+0x2>
    24be:	80 95       	com	r24
    24c0:	90 95       	com	r25
    24c2:	8e 0f       	add	r24, r30
    24c4:	9f 1f       	adc	r25, r31
    24c6:	08 95       	ret

000024c8 <fputc>:
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	fb 01       	movw	r30, r22
    24d2:	23 81       	ldd	r18, Z+3	; 0x03
    24d4:	21 fd       	sbrc	r18, 1
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <fputc+0x16>
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	9f ef       	ldi	r25, 0xFF	; 255
    24dc:	2c c0       	rjmp	.+88     	; 0x2536 <fputc+0x6e>
    24de:	22 ff       	sbrs	r18, 2
    24e0:	16 c0       	rjmp	.+44     	; 0x250e <fputc+0x46>
    24e2:	46 81       	ldd	r20, Z+6	; 0x06
    24e4:	57 81       	ldd	r21, Z+7	; 0x07
    24e6:	24 81       	ldd	r18, Z+4	; 0x04
    24e8:	35 81       	ldd	r19, Z+5	; 0x05
    24ea:	42 17       	cp	r20, r18
    24ec:	53 07       	cpc	r21, r19
    24ee:	44 f4       	brge	.+16     	; 0x2500 <fputc+0x38>
    24f0:	a0 81       	ld	r26, Z
    24f2:	b1 81       	ldd	r27, Z+1	; 0x01
    24f4:	9d 01       	movw	r18, r26
    24f6:	2f 5f       	subi	r18, 0xFF	; 255
    24f8:	3f 4f       	sbci	r19, 0xFF	; 255
    24fa:	31 83       	std	Z+1, r19	; 0x01
    24fc:	20 83       	st	Z, r18
    24fe:	8c 93       	st	X, r24
    2500:	26 81       	ldd	r18, Z+6	; 0x06
    2502:	37 81       	ldd	r19, Z+7	; 0x07
    2504:	2f 5f       	subi	r18, 0xFF	; 255
    2506:	3f 4f       	sbci	r19, 0xFF	; 255
    2508:	37 83       	std	Z+7, r19	; 0x07
    250a:	26 83       	std	Z+6, r18	; 0x06
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <fputc+0x6e>
    250e:	8b 01       	movw	r16, r22
    2510:	ec 01       	movw	r28, r24
    2512:	fb 01       	movw	r30, r22
    2514:	00 84       	ldd	r0, Z+8	; 0x08
    2516:	f1 85       	ldd	r31, Z+9	; 0x09
    2518:	e0 2d       	mov	r30, r0
    251a:	09 95       	icall
    251c:	89 2b       	or	r24, r25
    251e:	e1 f6       	brne	.-72     	; 0x24d8 <fputc+0x10>
    2520:	d8 01       	movw	r26, r16
    2522:	16 96       	adiw	r26, 0x06	; 6
    2524:	8d 91       	ld	r24, X+
    2526:	9c 91       	ld	r25, X
    2528:	17 97       	sbiw	r26, 0x07	; 7
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	17 96       	adiw	r26, 0x07	; 7
    252e:	9c 93       	st	X, r25
    2530:	8e 93       	st	-X, r24
    2532:	16 97       	sbiw	r26, 0x06	; 6
    2534:	ce 01       	movw	r24, r28
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	08 95       	ret

00002540 <__ultoa_invert>:
    2540:	fa 01       	movw	r30, r20
    2542:	aa 27       	eor	r26, r26
    2544:	28 30       	cpi	r18, 0x08	; 8
    2546:	51 f1       	breq	.+84     	; 0x259c <__ultoa_invert+0x5c>
    2548:	20 31       	cpi	r18, 0x10	; 16
    254a:	81 f1       	breq	.+96     	; 0x25ac <__ultoa_invert+0x6c>
    254c:	e8 94       	clt
    254e:	6f 93       	push	r22
    2550:	6e 7f       	andi	r22, 0xFE	; 254
    2552:	6e 5f       	subi	r22, 0xFE	; 254
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	8f 4f       	sbci	r24, 0xFF	; 255
    2558:	9f 4f       	sbci	r25, 0xFF	; 255
    255a:	af 4f       	sbci	r26, 0xFF	; 255
    255c:	b1 e0       	ldi	r27, 0x01	; 1
    255e:	3e d0       	rcall	.+124    	; 0x25dc <__ultoa_invert+0x9c>
    2560:	b4 e0       	ldi	r27, 0x04	; 4
    2562:	3c d0       	rcall	.+120    	; 0x25dc <__ultoa_invert+0x9c>
    2564:	67 0f       	add	r22, r23
    2566:	78 1f       	adc	r23, r24
    2568:	89 1f       	adc	r24, r25
    256a:	9a 1f       	adc	r25, r26
    256c:	a1 1d       	adc	r26, r1
    256e:	68 0f       	add	r22, r24
    2570:	79 1f       	adc	r23, r25
    2572:	8a 1f       	adc	r24, r26
    2574:	91 1d       	adc	r25, r1
    2576:	a1 1d       	adc	r26, r1
    2578:	6a 0f       	add	r22, r26
    257a:	71 1d       	adc	r23, r1
    257c:	81 1d       	adc	r24, r1
    257e:	91 1d       	adc	r25, r1
    2580:	a1 1d       	adc	r26, r1
    2582:	20 d0       	rcall	.+64     	; 0x25c4 <__ultoa_invert+0x84>
    2584:	09 f4       	brne	.+2      	; 0x2588 <__ultoa_invert+0x48>
    2586:	68 94       	set
    2588:	3f 91       	pop	r19
    258a:	2a e0       	ldi	r18, 0x0A	; 10
    258c:	26 9f       	mul	r18, r22
    258e:	11 24       	eor	r1, r1
    2590:	30 19       	sub	r19, r0
    2592:	30 5d       	subi	r19, 0xD0	; 208
    2594:	31 93       	st	Z+, r19
    2596:	de f6       	brtc	.-74     	; 0x254e <__ultoa_invert+0xe>
    2598:	cf 01       	movw	r24, r30
    259a:	08 95       	ret
    259c:	46 2f       	mov	r20, r22
    259e:	47 70       	andi	r20, 0x07	; 7
    25a0:	40 5d       	subi	r20, 0xD0	; 208
    25a2:	41 93       	st	Z+, r20
    25a4:	b3 e0       	ldi	r27, 0x03	; 3
    25a6:	0f d0       	rcall	.+30     	; 0x25c6 <__ultoa_invert+0x86>
    25a8:	c9 f7       	brne	.-14     	; 0x259c <__ultoa_invert+0x5c>
    25aa:	f6 cf       	rjmp	.-20     	; 0x2598 <__ultoa_invert+0x58>
    25ac:	46 2f       	mov	r20, r22
    25ae:	4f 70       	andi	r20, 0x0F	; 15
    25b0:	40 5d       	subi	r20, 0xD0	; 208
    25b2:	4a 33       	cpi	r20, 0x3A	; 58
    25b4:	18 f0       	brcs	.+6      	; 0x25bc <__ultoa_invert+0x7c>
    25b6:	49 5d       	subi	r20, 0xD9	; 217
    25b8:	31 fd       	sbrc	r19, 1
    25ba:	40 52       	subi	r20, 0x20	; 32
    25bc:	41 93       	st	Z+, r20
    25be:	02 d0       	rcall	.+4      	; 0x25c4 <__ultoa_invert+0x84>
    25c0:	a9 f7       	brne	.-22     	; 0x25ac <__ultoa_invert+0x6c>
    25c2:	ea cf       	rjmp	.-44     	; 0x2598 <__ultoa_invert+0x58>
    25c4:	b4 e0       	ldi	r27, 0x04	; 4
    25c6:	a6 95       	lsr	r26
    25c8:	97 95       	ror	r25
    25ca:	87 95       	ror	r24
    25cc:	77 95       	ror	r23
    25ce:	67 95       	ror	r22
    25d0:	ba 95       	dec	r27
    25d2:	c9 f7       	brne	.-14     	; 0x25c6 <__ultoa_invert+0x86>
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	61 05       	cpc	r22, r1
    25d8:	71 05       	cpc	r23, r1
    25da:	08 95       	ret
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	0a 2e       	mov	r0, r26
    25e2:	06 94       	lsr	r0
    25e4:	57 95       	ror	r21
    25e6:	47 95       	ror	r20
    25e8:	37 95       	ror	r19
    25ea:	27 95       	ror	r18
    25ec:	ba 95       	dec	r27
    25ee:	c9 f7       	brne	.-14     	; 0x25e2 <__ultoa_invert+0xa2>
    25f0:	62 0f       	add	r22, r18
    25f2:	73 1f       	adc	r23, r19
    25f4:	84 1f       	adc	r24, r20
    25f6:	95 1f       	adc	r25, r21
    25f8:	a0 1d       	adc	r26, r0
    25fa:	08 95       	ret

000025fc <__prologue_saves__>:
    25fc:	2f 92       	push	r2
    25fe:	3f 92       	push	r3
    2600:	4f 92       	push	r4
    2602:	5f 92       	push	r5
    2604:	6f 92       	push	r6
    2606:	7f 92       	push	r7
    2608:	8f 92       	push	r8
    260a:	9f 92       	push	r9
    260c:	af 92       	push	r10
    260e:	bf 92       	push	r11
    2610:	cf 92       	push	r12
    2612:	df 92       	push	r13
    2614:	ef 92       	push	r14
    2616:	ff 92       	push	r15
    2618:	0f 93       	push	r16
    261a:	1f 93       	push	r17
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	ca 1b       	sub	r28, r26
    2626:	db 0b       	sbc	r29, r27
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	09 94       	ijmp

00002634 <__epilogue_restores__>:
    2634:	2a 88       	ldd	r2, Y+18	; 0x12
    2636:	39 88       	ldd	r3, Y+17	; 0x11
    2638:	48 88       	ldd	r4, Y+16	; 0x10
    263a:	5f 84       	ldd	r5, Y+15	; 0x0f
    263c:	6e 84       	ldd	r6, Y+14	; 0x0e
    263e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2640:	8c 84       	ldd	r8, Y+12	; 0x0c
    2642:	9b 84       	ldd	r9, Y+11	; 0x0b
    2644:	aa 84       	ldd	r10, Y+10	; 0x0a
    2646:	b9 84       	ldd	r11, Y+9	; 0x09
    2648:	c8 84       	ldd	r12, Y+8	; 0x08
    264a:	df 80       	ldd	r13, Y+7	; 0x07
    264c:	ee 80       	ldd	r14, Y+6	; 0x06
    264e:	fd 80       	ldd	r15, Y+5	; 0x05
    2650:	0c 81       	ldd	r16, Y+4	; 0x04
    2652:	1b 81       	ldd	r17, Y+3	; 0x03
    2654:	aa 81       	ldd	r26, Y+2	; 0x02
    2656:	b9 81       	ldd	r27, Y+1	; 0x01
    2658:	ce 0f       	add	r28, r30
    265a:	d1 1d       	adc	r29, r1
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	ed 01       	movw	r28, r26
    2668:	08 95       	ret

0000266a <_exit>:
    266a:	f8 94       	cli

0000266c <__stop_program>:
    266c:	ff cf       	rjmp	.-2      	; 0x266c <__stop_program>
