
urs_zavrsni_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  000024c6  0000255a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001ac  008001ac  000026a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f33  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  000067d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a0  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  000083c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a22  00000000  00000000  00008b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003114  00000000  00000000  0000957a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000c68e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <main>
      8a:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9TFT_startv>:
	return (reg >> offset) & 1;
}

// touch part starts working
void TFT_start() {
	TOUCH_PORT |= _BV(T_CS) | _BV(T_CLK) | _BV(T_DIN);
      92:	88 b3       	in	r24, 0x18	; 24
      94:	80 6b       	ori	r24, 0xB0	; 176
      96:	88 bb       	out	0x18, r24	; 24
      98:	08 95       	ret

0000009a <_Z15TFT_touch_writeh>:
}

// writes commands to touch
void TFT_touch_write(uint8_t num) {
	TOUCH_PORT &= ~_BV(T_CLK);
      9a:	c7 98       	cbi	0x18, 7	; 24
      9c:	97 e0       	ldi	r25, 0x07	; 7
	for (uint8_t i = 0; i < 8; i++) {
		if (get_bit(num, 7 - i)) {
      9e:	48 2f       	mov	r20, r24
      a0:	50 e0       	ldi	r21, 0x00	; 0
      a2:	9a 01       	movw	r18, r20
      a4:	09 2e       	mov	r0, r25
      a6:	02 c0       	rjmp	.+4      	; 0xac <_Z15TFT_touch_writeh+0x12>
      a8:	35 95       	asr	r19
      aa:	27 95       	ror	r18
      ac:	0a 94       	dec	r0
      ae:	e2 f7       	brpl	.-8      	; 0xa8 <_Z15TFT_touch_writeh+0xe>
      b0:	20 ff       	sbrs	r18, 0
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <_Z15TFT_touch_writeh+0x1e>
			TOUCH_PORT |= _BV(T_DIN);
      b4:	c5 9a       	sbi	0x18, 5	; 24
      b6:	01 c0       	rjmp	.+2      	; 0xba <_Z15TFT_touch_writeh+0x20>
			} else {
			TOUCH_PORT &= ~_BV(T_DIN);
      b8:	c5 98       	cbi	0x18, 5	; 24
		}
		TOUCH_PORT &= ~_BV(T_CLK);
      ba:	c7 98       	cbi	0x18, 7	; 24
		TOUCH_PORT |= _BV(T_CLK);
      bc:	c7 9a       	sbi	0x18, 7	; 24
      be:	91 50       	subi	r25, 0x01	; 1
      c0:	80 f7       	brcc	.-32     	; 0xa2 <_Z15TFT_touch_writeh+0x8>
	}
}
      c2:	08 95       	ret

000000c4 <_Z14TFT_touch_readv>:

// reads data from ADC on touch part of the screen (coordiates)
uint16_t TFT_touch_read() {
      c4:	2c e0       	ldi	r18, 0x0C	; 12
	uint16_t value = 0;
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < 12; i++) {
		value <<= 1;
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
		TOUCH_PORT |= _BV(T_CLK);            // high signal on T_CLK
      ce:	c7 9a       	sbi	0x18, 7	; 24
		TOUCH_PORT &= ~_BV(T_CLK);           // low signal on T_CLK, initialization of data transfer
      d0:	c7 98       	cbi	0x18, 7	; 24
		value += get_bit(PINB, T_DO);   // touch has 12-bit ADC, counting 0-12, taking one by one bit from T_DO,
      d2:	36 b3       	in	r19, 0x16	; 22
      d4:	36 fb       	bst	r19, 6
      d6:	44 27       	eor	r20, r20
      d8:	40 f9       	bld	r20, 0
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	84 0f       	add	r24, r20
      de:	95 1f       	adc	r25, r21
      e0:	21 50       	subi	r18, 0x01	; 1
}

// reads data from ADC on touch part of the screen (coordiates)
uint16_t TFT_touch_read() {
	uint16_t value = 0;
	for (uint8_t i = 0; i < 12; i++) {
      e2:	99 f7       	brne	.-26     	; 0xca <_Z14TFT_touch_readv+0x6>
		TOUCH_PORT &= ~_BV(T_CLK);           // low signal on T_CLK, initialization of data transfer
		value += get_bit(PINB, T_DO);   // touch has 12-bit ADC, counting 0-12, taking one by one bit from T_DO,
	}

	return value;
}
      e4:	08 95       	ret

000000e6 <_Z9TFT_writejh>:

// sending commands to screen
void TFT_write(uint16_t val, uint8_t rs) {
	if (rs) {                   // rs == 1 - data
      e6:	66 23       	and	r22, r22
      e8:	11 f0       	breq	.+4      	; 0xee <_Z9TFT_writejh+0x8>
		PORTC |= _BV(LCD_RS);
      ea:	a8 9a       	sbi	0x15, 0	; 21
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <_Z9TFT_writejh+0xa>
		} else {                    // rs == 0 - command
		PORTC &= ~_BV(LCD_RS);
      ee:	a8 98       	cbi	0x15, 0	; 21
	}
	PORTC &= ~_BV(LCD_CS);
      f0:	af 98       	cbi	0x15, 7	; 21
	LCD_DATA_H = val >> 8;
      f2:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_L = val;
      f4:	82 bb       	out	0x12, r24	; 18
	PORTC |= _BV(LCD_WR);
      f6:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~_BV(LCD_WR);
      f8:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= _BV(LCD_CS);
      fa:	af 9a       	sbi	0x15, 7	; 21
      fc:	08 95       	ret

000000fe <_Z14TFT_write_pairjj>:
}

// sending specified command and value to memory
void TFT_write_pair(uint16_t cmd, uint16_t data) {
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	eb 01       	movw	r28, r22
	TFT_write(cmd, CMD);
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
	TFT_write(data, DATA);
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	ce 01       	movw	r24, r28
     10e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <_Z15TFT_set_addressjjjj>:

// coordinates that define where elements will be drawn
void TFT_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8c 01       	movw	r16, r24
     126:	eb 01       	movw	r28, r22
     128:	79 01       	movw	r14, r18
	TFT_write_pair(0x0044, (x2 << 8) + x1);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	74 2f       	mov	r23, r20
     130:	68 0f       	add	r22, r24
     132:	79 1f       	adc	r23, r25
     134:	84 e4       	ldi	r24, 0x44	; 68
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write_pair(0x0045, y1);
     13c:	be 01       	movw	r22, r28
     13e:	85 e4       	ldi	r24, 0x45	; 69
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write_pair(0x0046, y2);
     146:	b7 01       	movw	r22, r14
     148:	86 e4       	ldi	r24, 0x46	; 70
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write_pair(0x004e, x1);
     150:	b8 01       	movw	r22, r16
     152:	8e e4       	ldi	r24, 0x4E	; 78
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write_pair(0x004f, y1);
     15a:	be 01       	movw	r22, r28
     15c:	8f e4       	ldi	r24, 0x4F	; 79
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write(0x0022, CMD);
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	82 e2       	ldi	r24, 0x22	; 34
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
}
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	08 95       	ret

0000017c <_Z8TFT_initv>:

void TFT_init(void) {
	DDRA = 0xff ;
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xff;
     180:	81 bb       	out	0x11, r24	; 17
	DDRC |= _BV(LCD_RS) | _BV(LCD_WR) | _BV(LCD_RD) | _BV(LCD_CS); //0xff;
     182:	84 b3       	in	r24, 0x14	; 20
     184:	83 6c       	ori	r24, 0xC3	; 195
     186:	84 bb       	out	0x14, r24	; 20
	DDRB = ~(_BV(T_DO) | _BV(T_IRQ)); // pins for receiving data
     188:	8e eb       	ldi	r24, 0xBE	; 190
     18a:	87 bb       	out	0x17, r24	; 23

	// initializing lcd configuration
	DDRB |= _BV(LCD_RESET) | _BV(PB2); //pb2 je LED (tj backlight)
     18c:	87 b3       	in	r24, 0x17	; 23
     18e:	86 60       	ori	r24, 0x06	; 6
     190:	87 bb       	out	0x17, r24	; 23
	PORTB |= _BV(LCD_RESET) | _BV(PB2);
     192:	88 b3       	in	r24, 0x18	; 24
     194:	86 60       	ori	r24, 0x06	; 6
     196:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	93 e2       	ldi	r25, 0x23	; 35
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <_Z8TFT_initv+0x20>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z8TFT_initv+0x26>
     1a2:	00 00       	nop
	_delay_ms(5);
	PORTB &= ~_BV(LCD_RESET);
     1a4:	c1 98       	cbi	0x18, 1	; 24
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	97 e4       	ldi	r25, 0x47	; 71
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z8TFT_initv+0x2e>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z8TFT_initv+0x34>
     1b0:	00 00       	nop
	_delay_ms(10);
	PORTB |= _BV(LCD_RESET);
     1b2:	c1 9a       	sbi	0x18, 1	; 24
	PORTC |= _BV(LCD_CS);
     1b4:	af 9a       	sbi	0x15, 7	; 21
	PORTC |= _BV(LCD_RD);
     1b6:	ae 9a       	sbi	0x15, 6	; 21
	PORTC &= ~_BV(LCD_WR);
     1b8:	a9 98       	cbi	0x15, 1	; 21
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	9f e8       	ldi	r25, 0x8F	; 143
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z8TFT_initv+0x42>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z8TFT_initv+0x48>
     1c4:	00 00       	nop
	_delay_ms(20);

	TFT_write_pair(0x0000, 0x0001); _delay_ms(1);
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1d2:	83 e3       	ldi	r24, 0x33	; 51
     1d4:	97 e0       	ldi	r25, 0x07	; 7
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_Z8TFT_initv+0x5a>
	TFT_write_pair(0x0003, 0xA8A4); _delay_ms(1);
     1da:	64 ea       	ldi	r22, 0xA4	; 164
     1dc:	78 ea       	ldi	r23, 0xA8	; 168
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1e6:	83 e3       	ldi	r24, 0x33	; 51
     1e8:	97 e0       	ldi	r25, 0x07	; 7
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <_Z8TFT_initv+0x6e>
	TFT_write_pair(0x000C, 0x0000); _delay_ms(1);
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8c e0       	ldi	r24, 0x0C	; 12
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1fa:	83 e3       	ldi	r24, 0x33	; 51
     1fc:	97 e0       	ldi	r25, 0x07	; 7
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z8TFT_initv+0x82>
	TFT_write_pair(0x000D, 0x080C); _delay_ms(1);
     202:	6c e0       	ldi	r22, 0x0C	; 12
     204:	78 e0       	ldi	r23, 0x08	; 8
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     20e:	83 e3       	ldi	r24, 0x33	; 51
     210:	97 e0       	ldi	r25, 0x07	; 7
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z8TFT_initv+0x96>
	TFT_write_pair(0x000E, 0x2B00); _delay_ms(1);
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	7b e2       	ldi	r23, 0x2B	; 43
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     222:	83 e3       	ldi	r24, 0x33	; 51
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z8TFT_initv+0xaa>
	TFT_write_pair(0x001E, 0x00B0); _delay_ms(1);
     22a:	60 eb       	ldi	r22, 0xB0	; 176
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     236:	83 e3       	ldi	r24, 0x33	; 51
     238:	97 e0       	ldi	r25, 0x07	; 7
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z8TFT_initv+0xbe>
	TFT_write_pair(0x0001, 0x2B3F); _delay_ms(1);
     23e:	6f e3       	ldi	r22, 0x3F	; 63
     240:	7b e2       	ldi	r23, 0x2B	; 43
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     24a:	83 e3       	ldi	r24, 0x33	; 51
     24c:	97 e0       	ldi	r25, 0x07	; 7
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <_Z8TFT_initv+0xd2>
	TFT_write_pair(0x0002, 0x0600); _delay_ms(1);
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	76 e0       	ldi	r23, 0x06	; 6
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     25e:	83 e3       	ldi	r24, 0x33	; 51
     260:	97 e0       	ldi	r25, 0x07	; 7
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <_Z8TFT_initv+0xe6>
	TFT_write_pair(0x0010, 0x0000); _delay_ms(1);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     272:	83 e3       	ldi	r24, 0x33	; 51
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <_Z8TFT_initv+0xfa>
	TFT_write_pair(0x0011, 0x6070); _delay_ms(1);
     27a:	60 e7       	ldi	r22, 0x70	; 112
     27c:	70 e6       	ldi	r23, 0x60	; 96
     27e:	81 e1       	ldi	r24, 0x11	; 17
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     286:	83 e3       	ldi	r24, 0x33	; 51
     288:	97 e0       	ldi	r25, 0x07	; 7
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_Z8TFT_initv+0x10e>
	TFT_write_pair(0x0005, 0x0000); _delay_ms(1);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     29a:	83 e3       	ldi	r24, 0x33	; 51
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <_Z8TFT_initv+0x122>
	TFT_write_pair(0x0006, 0x0000); _delay_ms(1);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ae:	83 e3       	ldi	r24, 0x33	; 51
     2b0:	97 e0       	ldi	r25, 0x07	; 7
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <_Z8TFT_initv+0x136>
	TFT_write_pair(0x0016, 0xEF1C); _delay_ms(1);
     2b6:	6c e1       	ldi	r22, 0x1C	; 28
     2b8:	7f ee       	ldi	r23, 0xEF	; 239
     2ba:	86 e1       	ldi	r24, 0x16	; 22
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z8TFT_initv+0x14a>
	TFT_write_pair(0x0017, 0x0003); _delay_ms(1);
     2ca:	63 e0       	ldi	r22, 0x03	; 3
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e1       	ldi	r24, 0x17	; 23
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2d6:	83 e3       	ldi	r24, 0x33	; 51
     2d8:	97 e0       	ldi	r25, 0x07	; 7
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <_Z8TFT_initv+0x15e>
	TFT_write_pair(0x0007, 0x0233); _delay_ms(1);
     2de:	63 e3       	ldi	r22, 0x33	; 51
     2e0:	72 e0       	ldi	r23, 0x02	; 2
     2e2:	87 e0       	ldi	r24, 0x07	; 7
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ea:	83 e3       	ldi	r24, 0x33	; 51
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <_Z8TFT_initv+0x172>
	TFT_write_pair(0x000B, 0x0000); _delay_ms(1);
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8b e0       	ldi	r24, 0x0B	; 11
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2fe:	83 e3       	ldi	r24, 0x33	; 51
     300:	97 e0       	ldi	r25, 0x07	; 7
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <_Z8TFT_initv+0x186>
	TFT_write_pair(0x000F, 0x0000); _delay_ms(1);
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     312:	83 e3       	ldi	r24, 0x33	; 51
     314:	97 e0       	ldi	r25, 0x07	; 7
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <_Z8TFT_initv+0x19a>
	TFT_write_pair(0x0041, 0x0000); _delay_ms(1);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	81 e4       	ldi	r24, 0x41	; 65
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     326:	83 e3       	ldi	r24, 0x33	; 51
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_Z8TFT_initv+0x1ae>
	TFT_write_pair(0x0042, 0x0000); _delay_ms(1);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <_Z8TFT_initv+0x1c2>
	TFT_write_pair(0x0048, 0x0000); _delay_ms(1);
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	88 e4       	ldi	r24, 0x48	; 72
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	97 e0       	ldi	r25, 0x07	; 7
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <_Z8TFT_initv+0x1d6>
	TFT_write_pair(0x0049, 0x013F); _delay_ms(1);
     356:	6f e3       	ldi	r22, 0x3F	; 63
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	89 e4       	ldi	r24, 0x49	; 73
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     362:	83 e3       	ldi	r24, 0x33	; 51
     364:	97 e0       	ldi	r25, 0x07	; 7
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <_Z8TFT_initv+0x1ea>
	TFT_write_pair(0x004A, 0x0000); _delay_ms(1);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	8a e4       	ldi	r24, 0x4A	; 74
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     376:	83 e3       	ldi	r24, 0x33	; 51
     378:	97 e0       	ldi	r25, 0x07	; 7
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <_Z8TFT_initv+0x1fe>
	TFT_write_pair(0x004B, 0x0000); _delay_ms(1);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8b e4       	ldi	r24, 0x4B	; 75
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     38a:	83 e3       	ldi	r24, 0x33	; 51
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_Z8TFT_initv+0x212>
	TFT_write_pair(0x0044, 0xEF00); _delay_ms(1);
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	7f ee       	ldi	r23, 0xEF	; 239
     396:	84 e4       	ldi	r24, 0x44	; 68
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     39e:	83 e3       	ldi	r24, 0x33	; 51
     3a0:	97 e0       	ldi	r25, 0x07	; 7
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <_Z8TFT_initv+0x226>
	TFT_write_pair(0x0045, 0x0000); _delay_ms(1);
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	85 e4       	ldi	r24, 0x45	; 69
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3b2:	83 e3       	ldi	r24, 0x33	; 51
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_Z8TFT_initv+0x23a>
	TFT_write_pair(0x0046, 0x013F); _delay_ms(1);
     3ba:	6f e3       	ldi	r22, 0x3F	; 63
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	86 e4       	ldi	r24, 0x46	; 70
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3c6:	83 e3       	ldi	r24, 0x33	; 51
     3c8:	97 e0       	ldi	r25, 0x07	; 7
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <_Z8TFT_initv+0x24e>
	TFT_write_pair(0x0030, 0x0707); _delay_ms(1);
     3ce:	67 e0       	ldi	r22, 0x07	; 7
     3d0:	77 e0       	ldi	r23, 0x07	; 7
     3d2:	80 e3       	ldi	r24, 0x30	; 48
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3da:	83 e3       	ldi	r24, 0x33	; 51
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <_Z8TFT_initv+0x262>
	TFT_write_pair(0x0031, 0x0204); _delay_ms(1);
     3e2:	64 e0       	ldi	r22, 0x04	; 4
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	81 e3       	ldi	r24, 0x31	; 49
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3ee:	83 e3       	ldi	r24, 0x33	; 51
     3f0:	97 e0       	ldi	r25, 0x07	; 7
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_Z8TFT_initv+0x276>
	TFT_write_pair(0x0032, 0x0204); _delay_ms(1);
     3f6:	64 e0       	ldi	r22, 0x04	; 4
     3f8:	72 e0       	ldi	r23, 0x02	; 2
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     402:	83 e3       	ldi	r24, 0x33	; 51
     404:	97 e0       	ldi	r25, 0x07	; 7
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	TFT_write_pair(0x0033, 0x0502); _delay_ms(1);
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	75 e0       	ldi	r23, 0x05	; 5
     40e:	83 e3       	ldi	r24, 0x33	; 51
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     416:	83 e3       	ldi	r24, 0x33	; 51
     418:	97 e0       	ldi	r25, 0x07	; 7
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	TFT_write_pair(0x0034, 0x0507); _delay_ms(1);
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	75 e0       	ldi	r23, 0x05	; 5
     422:	84 e3       	ldi	r24, 0x34	; 52
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     42a:	83 e3       	ldi	r24, 0x33	; 51
     42c:	97 e0       	ldi	r25, 0x07	; 7
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	TFT_write_pair(0x0035, 0x0204); _delay_ms(1);
     432:	64 e0       	ldi	r22, 0x04	; 4
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	85 e3       	ldi	r24, 0x35	; 53
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     43e:	83 e3       	ldi	r24, 0x33	; 51
     440:	97 e0       	ldi	r25, 0x07	; 7
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	TFT_write_pair(0x0036, 0x0204); _delay_ms(1);
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	72 e0       	ldi	r23, 0x02	; 2
     44a:	86 e3       	ldi	r24, 0x36	; 54
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     452:	83 e3       	ldi	r24, 0x33	; 51
     454:	97 e0       	ldi	r25, 0x07	; 7
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	TFT_write_pair(0x0037, 0x0502); _delay_ms(1);
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	75 e0       	ldi	r23, 0x05	; 5
     45e:	87 e3       	ldi	r24, 0x37	; 55
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     466:	83 e3       	ldi	r24, 0x33	; 51
     468:	97 e0       	ldi	r25, 0x07	; 7
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	TFT_write_pair(0x003A, 0x0302); _delay_ms(1);
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	73 e0       	ldi	r23, 0x03	; 3
     472:	8a e3       	ldi	r24, 0x3A	; 58
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     47a:	83 e3       	ldi	r24, 0x33	; 51
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	TFT_write_pair(0x003B, 0x0302); _delay_ms(1);
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	73 e0       	ldi	r23, 0x03	; 3
     486:	8b e3       	ldi	r24, 0x3B	; 59
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     48e:	83 e3       	ldi	r24, 0x33	; 51
     490:	97 e0       	ldi	r25, 0x07	; 7
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
	TFT_write_pair(0x0023, 0x0000); _delay_ms(1);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e2       	ldi	r24, 0x23	; 35
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4a2:	83 e3       	ldi	r24, 0x33	; 51
     4a4:	97 e0       	ldi	r25, 0x07	; 7
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	TFT_write_pair(0x0024, 0x0000); _delay_ms(1);
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	84 e2       	ldi	r24, 0x24	; 36
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	97 e0       	ldi	r25, 0x07	; 7
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>

	TFT_write_pair(0x004f, 0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8f e4       	ldi	r24, 0x4F	; 79
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write_pair(0x004e, 0);
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	8e e4       	ldi	r24, 0x4E	; 78
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write(0x0022, CMD);
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	82 e2       	ldi	r24, 0x22	; 34
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     4e0:	08 95       	ret

000004e2 <_Z14TFT_set_cursorjj>:
}

// setting cursor to a specific position
void TFT_set_cursor(uint16_t x, uint16_t y) {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	eb 01       	movw	r28, r22
	TFT_write_pair(0x004E, x);
     4e8:	bc 01       	movw	r22, r24
     4ea:	8e e4       	ldi	r24, 0x4E	; 78
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write_pair(0x004F, MAX_Y - y);
     4f2:	60 e4       	ldi	r22, 0x40	; 64
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	6c 1b       	sub	r22, r28
     4f8:	7d 0b       	sbc	r23, r29
     4fa:	8f e4       	ldi	r24, 0x4F	; 79
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
	TFT_write(0x0022, CMD);
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <_Z17read_touch_coordsPjS_>:

// reading x and y coordinates from touch part of screen
void read_touch_coords(uint16_t *TP_X, uint16_t *TP_Y) {
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	8b 01       	movw	r16, r22
     51e:	83 e3       	ldi	r24, 0x33	; 51
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z17read_touch_coordsPjS_+0x10>
	_delay_ms(1);

	TOUCH_PORT &= ~_BV(T_CS);
     526:	c4 98       	cbi	0x18, 4	; 24

	TFT_touch_write(0x90); // sending command to touch part of screen to write y coordinate
     528:	80 e9       	ldi	r24, 0x90	; 144
     52a:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     52e:	e3 e3       	ldi	r30, 0x33	; 51
     530:	f7 e0       	ldi	r31, 0x07	; 7
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <_Z17read_touch_coordsPjS_+0x20>

	_delay_ms(1);
	TOUCH_PORT |= _BV(T_CLK);  _NOP(); _NOP(); _NOP(); _NOP();
     536:	c7 9a       	sbi	0x18, 7	; 24
	...
	TOUCH_PORT &= ~_BV(T_CLK); _NOP(); _NOP(); _NOP(); _NOP();
     540:	c7 98       	cbi	0x18, 7	; 24
	...
	*TP_Y = (TFT_touch_read() - 80) / 6;
     54a:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     54e:	9c 01       	movw	r18, r24
     550:	20 55       	subi	r18, 0x50	; 80
     552:	31 09       	sbc	r19, r1
     554:	ab ea       	ldi	r26, 0xAB	; 171
     556:	ba ea       	ldi	r27, 0xAA	; 170
     558:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__umulhisi3>
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	f8 01       	movw	r30, r16
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24

	TFT_touch_write(0xD0); // sendng command to touch part of screen to write x coordinate
     56a:	80 ed       	ldi	r24, 0xD0	; 208
     56c:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
	TOUCH_PORT |= _BV(T_CLK);  _NOP(); _NOP(); _NOP(); _NOP();
     570:	c7 9a       	sbi	0x18, 7	; 24
	...
	TOUCH_PORT &= ~_BV(T_CLK); _NOP(); _NOP(); _NOP(); _NOP();
     57a:	c7 98       	cbi	0x18, 7	; 24
	...
	*TP_X = (TFT_touch_read() - 80) / 8;
     584:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     588:	80 55       	subi	r24, 0x50	; 80
     58a:	91 09       	sbc	r25, r1
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	99 83       	std	Y+1, r25	; 0x01
     59a:	88 83       	st	Y, r24

	TOUCH_PORT |= _BV(T_CS);
     59c:	c4 9a       	sbi	0x18, 4	; 24
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <_Z20set_background_colorj>:

// fill the screen with the specied color
void set_background_color(uint16_t color) {
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	8c 01       	movw	r16, r24
	TFT_set_address(0, 0, 239, 319);
     5b4:	2f e3       	ldi	r18, 0x3F	; 63
     5b6:	31 e0       	ldi	r19, 0x01	; 1
     5b8:	4f ee       	ldi	r20, 0xEF	; 239
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 8c 00 	call	0x118	; 0x118 <_Z15TFT_set_addressjjjj>
     5c8:	68 94       	set
     5ca:	ee 24       	eor	r14, r14
     5cc:	e6 f8       	bld	r14, 6
     5ce:	ff 24       	eor	r15, r15
     5d0:	f3 94       	inc	r15
     5d2:	c0 ef       	ldi	r28, 0xF0	; 240

	for (uint16_t i = 0; i < 320; i++) {
		for (uint8_t j = 0; j < 240; j++) {
			TFT_write(color, DATA);
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     5dc:	c1 50       	subi	r28, 0x01	; 1
// fill the screen with the specied color
void set_background_color(uint16_t color) {
	TFT_set_address(0, 0, 239, 319);

	for (uint16_t i = 0; i < 320; i++) {
		for (uint8_t j = 0; j < 240; j++) {
     5de:	d1 f7       	brne	.-12     	; 0x5d4 <_Z20set_background_colorj+0x2c>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	e8 1a       	sub	r14, r24
     5e4:	f1 08       	sbc	r15, r1

// fill the screen with the specied color
void set_background_color(uint16_t color) {
	TFT_set_address(0, 0, 239, 319);

	for (uint16_t i = 0; i < 320; i++) {
     5e6:	a9 f7       	brne	.-22     	; 0x5d2 <_Z20set_background_colorj+0x2a>
		for (uint8_t j = 0; j < 240; j++) {
			TFT_write(color, DATA);
		}
	}
}
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <_Z10draw_pixeljjj>:

// setting a color of a pixel at the specified position
void draw_pixel(uint16_t x, uint16_t y, uint16_t color) {
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ea 01       	movw	r28, r20
	PORTC &= ~_BV(LCD_CS);
     5fa:	af 98       	cbi	0x15, 7	; 21
	TFT_set_cursor(x, y);
     5fc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z14TFT_set_cursorjj>
	TFT_write(color, DATA);
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	ce 01       	movw	r24, r28
     604:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
	PORTC |= _BV(LCD_CS);
     608:	af 9a       	sbi	0x15, 7	; 21
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_Z15draw_font_pixeljjjh>:

// setting a color of a pixel at the specified position for a letter
void draw_font_pixel(uint16_t x, uint16_t y, uint16_t color, uint8_t pixel_size) {
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
	for(uint8_t i = 0; i < pixel_size; i++) {
     628:	22 23       	and	r18, r18
     62a:	e9 f0       	breq	.+58     	; 0x666 <_Z15draw_font_pixeljjjh+0x56>
     62c:	a2 2e       	mov	r10, r18
     62e:	6a 01       	movw	r12, r20
     630:	4b 01       	movw	r8, r22
     632:	08 2f       	mov	r16, r24
     634:	19 2f       	mov	r17, r25
     636:	b1 2c       	mov	r11, r1
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	82 0f       	add	r24, r18
     63c:	7b 01       	movw	r14, r22
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	e9 1a       	sub	r14, r25
     642:	f9 0a       	sbc	r15, r25
     644:	e8 0e       	add	r14, r24
     646:	f1 1c       	adc	r15, r1
     648:	e4 01       	movw	r28, r8
		for(uint8_t j = 0; j < pixel_size; j++) {
			draw_pixel(x + i, y + j, color);
     64a:	a6 01       	movw	r20, r12
     64c:	be 01       	movw	r22, r28
     64e:	c8 01       	movw	r24, r16
     650:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     654:	21 96       	adiw	r28, 0x01	; 1
}

// setting a color of a pixel at the specified position for a letter
void draw_font_pixel(uint16_t x, uint16_t y, uint16_t color, uint8_t pixel_size) {
	for(uint8_t i = 0; i < pixel_size; i++) {
		for(uint8_t j = 0; j < pixel_size; j++) {
     656:	ce 15       	cp	r28, r14
     658:	df 05       	cpc	r29, r15
     65a:	b9 f7       	brne	.-18     	; 0x64a <_Z15draw_font_pixeljjjh+0x3a>
	PORTC |= _BV(LCD_CS);
}

// setting a color of a pixel at the specified position for a letter
void draw_font_pixel(uint16_t x, uint16_t y, uint16_t color, uint8_t pixel_size) {
	for(uint8_t i = 0; i < pixel_size; i++) {
     65c:	b3 94       	inc	r11
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	ab 10       	cpse	r10, r11
     664:	f1 cf       	rjmp	.-30     	; 0x648 <_Z15draw_font_pixeljjjh+0x38>
		for(uint8_t j = 0; j < pixel_size; j++) {
			draw_pixel(x + i, y + j, color);
		}
	}
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <_Z10print_charjjhjjh>:

// setting a color to the pixels needed to write the specified character
void print_char(uint16_t x, uint16_t y, uint8_t font_size, uint16_t color, uint16_t back_color, uint8_t val) {
     680:	2f 92       	push	r2
     682:	3f 92       	push	r3
     684:	4f 92       	push	r4
     686:	5f 92       	push	r5
     688:	6f 92       	push	r6
     68a:	7f 92       	push	r7
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <_Z10print_charjjhjjh+0x26>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <_Z10print_charjjhjjh+0x28>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	6b 01       	movw	r12, r22
     6b2:	54 2e       	mov	r5, r20
     6b4:	39 01       	movw	r6, r18
     6b6:	18 01       	movw	r2, r16
     6b8:	f1 2c       	mov	r15, r1
     6ba:	47 01       	movw	r8, r14
     6bc:	88 0c       	add	r8, r8
     6be:	99 1c       	adc	r9, r9
     6c0:	88 0c       	add	r8, r8
     6c2:	99 1c       	adc	r9, r9
     6c4:	c4 01       	movw	r24, r8
     6c6:	8e 0d       	add	r24, r14
     6c8:	9f 1d       	adc	r25, r15
     6ca:	9c 01       	movw	r18, r24
     6cc:	23 51       	subi	r18, 0x13	; 19
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	49 01       	movw	r8, r18
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f5 e0       	ldi	r31, 0x05	; 5
     6d6:	4f 2e       	mov	r4, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	a4 2e       	mov	r10, r20
     6dc:	b1 2c       	mov	r11, r1
	for (uint8_t i = 0x00; i < 0x05; i++) {
		uint8_t value = font[val][i];
     6de:	f4 01       	movw	r30, r8
     6e0:	e1 90       	ld	r14, Z+
     6e2:	4f 01       	movw	r8, r30
     6e4:	09 81       	ldd	r16, Y+1	; 0x01
     6e6:	1a 81       	ldd	r17, Y+2	; 0x02
     6e8:	1c 82       	std	Y+4, r1	; 0x04
     6ea:	1b 82       	std	Y+3, r1	; 0x03
		for (uint8_t j = 0x00; j < 0x08; j++) {
			if ((value >> j) & 0x01) {
     6ec:	f1 2c       	mov	r15, r1
     6ee:	c7 01       	movw	r24, r14
     6f0:	0b 80       	ldd	r0, Y+3	; 0x03
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_Z10print_charjjhjjh+0x78>
     6f4:	95 95       	asr	r25
     6f6:	87 95       	ror	r24
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <_Z10print_charjjhjjh+0x74>
     6fc:	80 ff       	sbrs	r24, 0
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <_Z10print_charjjhjjh+0x8e>
				draw_font_pixel(x + j * font_size, y, color, font_size);
     700:	25 2d       	mov	r18, r5
     702:	a3 01       	movw	r20, r6
     704:	b6 01       	movw	r22, r12
     706:	c8 01       	movw	r24, r16
     708:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     70c:	06 c0       	rjmp	.+12     	; 0x71a <_Z10print_charjjhjjh+0x9a>
				} else {
				draw_font_pixel(x + j * font_size, y, back_color, font_size);
     70e:	25 2d       	mov	r18, r5
     710:	a1 01       	movw	r20, r2
     712:	b6 01       	movw	r22, r12
     714:	c8 01       	movw	r24, r16
     716:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     71a:	2b 81       	ldd	r18, Y+3	; 0x03
     71c:	3c 81       	ldd	r19, Y+4	; 0x04
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	3c 83       	std	Y+4, r19	; 0x04
     724:	2b 83       	std	Y+3, r18	; 0x03
     726:	0a 0d       	add	r16, r10
     728:	1b 1d       	adc	r17, r11

// setting a color to the pixels needed to write the specified character
void print_char(uint16_t x, uint16_t y, uint8_t font_size, uint16_t color, uint16_t back_color, uint8_t val) {
	for (uint8_t i = 0x00; i < 0x05; i++) {
		uint8_t value = font[val][i];
		for (uint8_t j = 0x00; j < 0x08; j++) {
     72a:	28 30       	cpi	r18, 0x08	; 8
     72c:	31 05       	cpc	r19, r1
     72e:	f9 f6       	brne	.-66     	; 0x6ee <_Z10print_charjjhjjh+0x6e>
     730:	ca 0c       	add	r12, r10
     732:	db 1c       	adc	r13, r11
     734:	4a 94       	dec	r4
	}
}

// setting a color to the pixels needed to write the specified character
void print_char(uint16_t x, uint16_t y, uint8_t font_size, uint16_t color, uint16_t back_color, uint8_t val) {
	for (uint8_t i = 0x00; i < 0x05; i++) {
     736:	41 10       	cpse	r4, r1
     738:	d2 cf       	rjmp	.-92     	; 0x6de <_Z10print_charjjhjjh+0x5e>
				draw_font_pixel(x + j * font_size, y, back_color, font_size);
			}
		}
		y += font_size;
	}
}
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	bf 90       	pop	r11
     754:	af 90       	pop	r10
     756:	9f 90       	pop	r9
     758:	8f 90       	pop	r8
     75a:	7f 90       	pop	r7
     75c:	6f 90       	pop	r6
     75e:	5f 90       	pop	r5
     760:	4f 90       	pop	r4
     762:	3f 90       	pop	r3
     764:	2f 90       	pop	r2
     766:	08 95       	ret

00000768 <_Z12print_stringjjhjjPKc>:

// setting a color to the pixels needed to write the specified string
void print_string(uint16_t x, uint16_t y, uint8_t font_size, uint16_t color, uint16_t back_color, const char *ch) {
     768:	3f 92       	push	r3
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
     78c:	34 2e       	mov	r3, r20
     78e:	49 01       	movw	r8, r18
     790:	28 01       	movw	r4, r16
     792:	67 01       	movw	r12, r14
     794:	a4 2e       	mov	r10, r20
     796:	b1 2c       	mov	r11, r1
     798:	95 01       	movw	r18, r10
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	a2 0e       	add	r10, r18
     7a4:	b3 1e       	adc	r11, r19
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	a2 1a       	sub	r10, r18
     7aa:	b2 0a       	sbc	r11, r18
	uint8_t cnt = 0;
     7ac:	f1 2c       	mov	r15, r1
		} else if (ch[cnt] == '9') {
			print_char(x + font_size, y, font_size, color, back_color, 36);
		} else if (ch[cnt] == ':') {
			print_char(x + font_size, y, font_size, color, back_color, 37);
		} else {
			print_char(x + font_size, y, font_size, color, back_color, ch[cnt] - 'A');
     7ae:	3c 01       	movw	r6, r24
     7b0:	64 0e       	add	r6, r20
     7b2:	71 1c       	adc	r7, r1
// setting a color to the pixels needed to write the specified string
void print_string(uint16_t x, uint16_t y, uint8_t font_size, uint16_t color, uint16_t back_color, const char *ch) {
	uint8_t cnt = 0;

	do {
		if (ch[cnt] == ' ') {
     7b4:	f6 01       	movw	r30, r12
     7b6:	ef 0d       	add	r30, r15
     7b8:	f1 1d       	adc	r31, r1
     7ba:	80 81       	ld	r24, Z
     7bc:	80 32       	cpi	r24, 0x20	; 32
     7be:	61 f4       	brne	.+24     	; 0x7d8 <_Z12print_stringjjhjjPKc+0x70>
			print_char(x + font_size, y, font_size, color, back_color, 26);
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fa e1       	ldi	r31, 0x1A	; 26
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	82 01       	movw	r16, r4
     7ca:	94 01       	movw	r18, r8
     7cc:	43 2d       	mov	r20, r3
     7ce:	be 01       	movw	r22, r28
     7d0:	c3 01       	movw	r24, r6
     7d2:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7d6:	a5 c0       	rjmp	.+330    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '0') {
     7d8:	80 33       	cpi	r24, 0x30	; 48
     7da:	61 f4       	brne	.+24     	; 0x7f4 <_Z12print_stringjjhjjPKc+0x8c>
			print_char(x + font_size, y, font_size, color, back_color, 27);
     7dc:	0f 2e       	mov	r0, r31
     7de:	fb e1       	ldi	r31, 0x1B	; 27
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	82 01       	movw	r16, r4
     7e6:	94 01       	movw	r18, r8
     7e8:	43 2d       	mov	r20, r3
     7ea:	be 01       	movw	r22, r28
     7ec:	c3 01       	movw	r24, r6
     7ee:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7f2:	97 c0       	rjmp	.+302    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '1') {
     7f4:	81 33       	cpi	r24, 0x31	; 49
     7f6:	61 f4       	brne	.+24     	; 0x810 <_Z12print_stringjjhjjPKc+0xa8>
			print_char(x + font_size, y, font_size, color, back_color, 28);
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fc e1       	ldi	r31, 0x1C	; 28
     7fc:	ef 2e       	mov	r14, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	82 01       	movw	r16, r4
     802:	94 01       	movw	r18, r8
     804:	43 2d       	mov	r20, r3
     806:	be 01       	movw	r22, r28
     808:	c3 01       	movw	r24, r6
     80a:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     80e:	89 c0       	rjmp	.+274    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '2') {
     810:	82 33       	cpi	r24, 0x32	; 50
     812:	61 f4       	brne	.+24     	; 0x82c <_Z12print_stringjjhjjPKc+0xc4>
			print_char(x + font_size, y, font_size, color, back_color, 29);
     814:	0f 2e       	mov	r0, r31
     816:	fd e1       	ldi	r31, 0x1D	; 29
     818:	ef 2e       	mov	r14, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	82 01       	movw	r16, r4
     81e:	94 01       	movw	r18, r8
     820:	43 2d       	mov	r20, r3
     822:	be 01       	movw	r22, r28
     824:	c3 01       	movw	r24, r6
     826:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     82a:	7b c0       	rjmp	.+246    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '3') {
     82c:	83 33       	cpi	r24, 0x33	; 51
     82e:	61 f4       	brne	.+24     	; 0x848 <_Z12print_stringjjhjjPKc+0xe0>
			print_char(x + font_size, y, font_size, color, back_color, 30);
     830:	0f 2e       	mov	r0, r31
     832:	fe e1       	ldi	r31, 0x1E	; 30
     834:	ef 2e       	mov	r14, r31
     836:	f0 2d       	mov	r31, r0
     838:	82 01       	movw	r16, r4
     83a:	94 01       	movw	r18, r8
     83c:	43 2d       	mov	r20, r3
     83e:	be 01       	movw	r22, r28
     840:	c3 01       	movw	r24, r6
     842:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     846:	6d c0       	rjmp	.+218    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '4') {
     848:	84 33       	cpi	r24, 0x34	; 52
     84a:	61 f4       	brne	.+24     	; 0x864 <__stack+0x5>
			print_char(x + font_size, y, font_size, color, back_color, 31);
     84c:	0f 2e       	mov	r0, r31
     84e:	ff e1       	ldi	r31, 0x1F	; 31
     850:	ef 2e       	mov	r14, r31
     852:	f0 2d       	mov	r31, r0
     854:	82 01       	movw	r16, r4
     856:	94 01       	movw	r18, r8
     858:	43 2d       	mov	r20, r3
     85a:	be 01       	movw	r22, r28
     85c:	c3 01       	movw	r24, r6
     85e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     862:	5f c0       	rjmp	.+190    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '5') {
     864:	85 33       	cpi	r24, 0x35	; 53
     866:	59 f4       	brne	.+22     	; 0x87e <__stack+0x1f>
			print_char(x + font_size, y, font_size, color, back_color, 32);
     868:	68 94       	set
     86a:	ee 24       	eor	r14, r14
     86c:	e5 f8       	bld	r14, 5
     86e:	82 01       	movw	r16, r4
     870:	94 01       	movw	r18, r8
     872:	43 2d       	mov	r20, r3
     874:	be 01       	movw	r22, r28
     876:	c3 01       	movw	r24, r6
     878:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     87c:	52 c0       	rjmp	.+164    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '6') {
     87e:	86 33       	cpi	r24, 0x36	; 54
     880:	61 f4       	brne	.+24     	; 0x89a <__stack+0x3b>
			print_char(x + font_size, y, font_size, color, back_color, 33);
     882:	0f 2e       	mov	r0, r31
     884:	f1 e2       	ldi	r31, 0x21	; 33
     886:	ef 2e       	mov	r14, r31
     888:	f0 2d       	mov	r31, r0
     88a:	82 01       	movw	r16, r4
     88c:	94 01       	movw	r18, r8
     88e:	43 2d       	mov	r20, r3
     890:	be 01       	movw	r22, r28
     892:	c3 01       	movw	r24, r6
     894:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     898:	44 c0       	rjmp	.+136    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '7') {
     89a:	87 33       	cpi	r24, 0x37	; 55
     89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x57>
			print_char(x + font_size, y, font_size, color, back_color, 34);
     89e:	0f 2e       	mov	r0, r31
     8a0:	f2 e2       	ldi	r31, 0x22	; 34
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	82 01       	movw	r16, r4
     8a8:	94 01       	movw	r18, r8
     8aa:	43 2d       	mov	r20, r3
     8ac:	be 01       	movw	r22, r28
     8ae:	c3 01       	movw	r24, r6
     8b0:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8b4:	36 c0       	rjmp	.+108    	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '8') {
     8b6:	88 33       	cpi	r24, 0x38	; 56
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <__stack+0x73>
			print_char(x + font_size, y, font_size, color, back_color, 35);
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f3 e2       	ldi	r31, 0x23	; 35
     8be:	ef 2e       	mov	r14, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	82 01       	movw	r16, r4
     8c4:	94 01       	movw	r18, r8
     8c6:	43 2d       	mov	r20, r3
     8c8:	be 01       	movw	r22, r28
     8ca:	c3 01       	movw	r24, r6
     8cc:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8d0:	28 c0       	rjmp	.+80     	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == '9') {
     8d2:	89 33       	cpi	r24, 0x39	; 57
     8d4:	61 f4       	brne	.+24     	; 0x8ee <__stack+0x8f>
			print_char(x + font_size, y, font_size, color, back_color, 36);
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f4 e2       	ldi	r31, 0x24	; 36
     8da:	ef 2e       	mov	r14, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	82 01       	movw	r16, r4
     8e0:	94 01       	movw	r18, r8
     8e2:	43 2d       	mov	r20, r3
     8e4:	be 01       	movw	r22, r28
     8e6:	c3 01       	movw	r24, r6
     8e8:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8ec:	1a c0       	rjmp	.+52     	; 0x922 <__stack+0xc3>
		} else if (ch[cnt] == ':') {
     8ee:	8a 33       	cpi	r24, 0x3A	; 58
     8f0:	61 f4       	brne	.+24     	; 0x90a <__stack+0xab>
			print_char(x + font_size, y, font_size, color, back_color, 37);
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f5 e2       	ldi	r31, 0x25	; 37
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	82 01       	movw	r16, r4
     8fc:	94 01       	movw	r18, r8
     8fe:	43 2d       	mov	r20, r3
     900:	be 01       	movw	r22, r28
     902:	c3 01       	movw	r24, r6
     904:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0xc3>
		} else {
			print_char(x + font_size, y, font_size, color, back_color, ch[cnt] - 'A');
     90a:	0f 2e       	mov	r0, r31
     90c:	ff eb       	ldi	r31, 0xBF	; 191
     90e:	ef 2e       	mov	r14, r31
     910:	f0 2d       	mov	r31, r0
     912:	e8 0e       	add	r14, r24
     914:	82 01       	movw	r16, r4
     916:	94 01       	movw	r18, r8
     918:	43 2d       	mov	r20, r3
     91a:	be 01       	movw	r22, r28
     91c:	c3 01       	movw	r24, r6
     91e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
		}
		cnt++;
     922:	f3 94       	inc	r15
		y += 0x05 * font_size + 0x01;
     924:	ca 0d       	add	r28, r10
     926:	db 1d       	adc	r29, r11
	} while(ch[cnt] != '\0');
     928:	f6 01       	movw	r30, r12
     92a:	ef 0d       	add	r30, r15
     92c:	f1 1d       	adc	r31, r1
     92e:	80 81       	ld	r24, Z
     930:	81 11       	cpse	r24, r1
     932:	40 cf       	rjmp	.-384    	; 0x7b4 <_Z12print_stringjjhjjPKc+0x4c>
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	3f 90       	pop	r3
     956:	08 95       	ret

00000958 <_Z11draw_h_linejjjj>:

// setting a color to the pixels in a horizontal line
void draw_h_line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color) { //zapravo y1, x1, x2
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	6c 01       	movw	r12, r24
     96a:	eb 01       	movw	r28, r22
     96c:	8a 01       	movw	r16, r20
     96e:	79 01       	movw	r14, r18
	for (; y1 < y2; y1++) {
     970:	64 17       	cp	r22, r20
     972:	75 07       	cpc	r23, r21
     974:	48 f4       	brcc	.+18     	; 0x988 <_Z11draw_h_linejjjj+0x30>
		draw_pixel(x1, y1, color);
     976:	a7 01       	movw	r20, r14
     978:	be 01       	movw	r22, r28
     97a:	c6 01       	movw	r24, r12
     97c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	} while(ch[cnt] != '\0');
}

// setting a color to the pixels in a horizontal line
void draw_h_line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color) { //zapravo y1, x1, x2
	for (; y1 < y2; y1++) {
     980:	21 96       	adiw	r28, 0x01	; 1
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	b8 f3       	brcs	.-18     	; 0x976 <_Z11draw_h_linejjjj+0x1e>
		draw_pixel(x1, y1, color);
	}
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	08 95       	ret

0000099a <_Z11draw_v_linejjjj>:

// setting a color to the pixels in a vetical line
void draw_v_line(uint16_t y1, uint16_t x1, uint16_t x2, uint16_t color) { //zapravo x1, y1, y2
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	6c 01       	movw	r12, r24
     9ac:	eb 01       	movw	r28, r22
     9ae:	8a 01       	movw	r16, r20
     9b0:	79 01       	movw	r14, r18
	for (; x1 < x2; x1++) {
     9b2:	64 17       	cp	r22, r20
     9b4:	75 07       	cpc	r23, r21
     9b6:	48 f4       	brcc	.+18     	; 0x9ca <_Z11draw_v_linejjjj+0x30>
		draw_pixel(x1, y1, color);
     9b8:	a7 01       	movw	r20, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	}
}

// setting a color to the pixels in a vetical line
void draw_v_line(uint16_t y1, uint16_t x1, uint16_t x2, uint16_t color) { //zapravo x1, y1, y2
	for (; x1 < x2; x1++) {
     9c2:	21 96       	adiw	r28, 0x01	; 1
     9c4:	c0 17       	cp	r28, r16
     9c6:	d1 07       	cpc	r29, r17
     9c8:	b8 f3       	brcs	.-18     	; 0x9b8 <_Z11draw_v_linejjjj+0x1e>
		draw_pixel(x1, y1, color);
	}
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <_Z10draw_crossjjjj>:

// setting a color to the pixels in two diagonal lines
void draw_cross(uint16_t x, uint16_t y, uint16_t d, uint16_t color) {
     9dc:	5f 92       	push	r5
     9de:	6f 92       	push	r6
     9e0:	7f 92       	push	r7
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
	for (uint8_t i = 0; i < d; i++) {
     9fa:	41 15       	cp	r20, r1
     9fc:	51 05       	cpc	r21, r1
     9fe:	09 f1       	breq	.+66     	; 0xa42 <_Z10draw_crossjjjj+0x66>
     a00:	49 01       	movw	r8, r18
     a02:	8a 01       	movw	r16, r20
     a04:	7b 01       	movw	r14, r22
     a06:	6c 01       	movw	r12, r24
     a08:	61 2c       	mov	r6, r1
     a0a:	71 2c       	mov	r7, r1
     a0c:	51 2c       	mov	r5, r1
		draw_pixel(x + i, y + i, color);
		draw_pixel(x + i, d - i + y, color);
     a0e:	5a 01       	movw	r10, r20
     a10:	a6 0e       	add	r10, r22
     a12:	b7 1e       	adc	r11, r23
}

// setting a color to the pixels in two diagonal lines
void draw_cross(uint16_t x, uint16_t y, uint16_t d, uint16_t color) {
	for (uint8_t i = 0; i < d; i++) {
		draw_pixel(x + i, y + i, color);
     a14:	e6 01       	movw	r28, r12
     a16:	c6 0d       	add	r28, r6
     a18:	d7 1d       	adc	r29, r7
     a1a:	b7 01       	movw	r22, r14
     a1c:	66 0d       	add	r22, r6
     a1e:	77 1d       	adc	r23, r7
     a20:	a4 01       	movw	r20, r8
     a22:	ce 01       	movw	r24, r28
     a24:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x + i, d - i + y, color);
     a28:	b5 01       	movw	r22, r10
     a2a:	66 19       	sub	r22, r6
     a2c:	77 09       	sbc	r23, r7
     a2e:	a4 01       	movw	r20, r8
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	}
}

// setting a color to the pixels in two diagonal lines
void draw_cross(uint16_t x, uint16_t y, uint16_t d, uint16_t color) {
	for (uint8_t i = 0; i < d; i++) {
     a36:	53 94       	inc	r5
     a38:	65 2c       	mov	r6, r5
     a3a:	71 2c       	mov	r7, r1
     a3c:	60 16       	cp	r6, r16
     a3e:	71 06       	cpc	r7, r17
     a40:	48 f3       	brcs	.-46     	; 0xa14 <_Z10draw_crossjjjj+0x38>
		draw_pixel(x + i, y + i, color);
		draw_pixel(x + i, d - i + y, color);
	}
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	6f 90       	pop	r6
     a5e:	5f 90       	pop	r5
     a60:	08 95       	ret

00000a62 <_Z11draw_circlejjjj>:

// setting a color to the pixels in circle
void draw_circle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
     a62:	2f 92       	push	r2
     a64:	3f 92       	push	r3
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	19 01       	movw	r2, r18
	x0 += r;
     a88:	3c 01       	movw	r6, r24
     a8a:	64 0e       	add	r6, r20
     a8c:	75 1e       	adc	r7, r21
	y0 += r;
     a8e:	2a 01       	movw	r4, r20
     a90:	46 0e       	add	r4, r22
     a92:	57 1e       	adc	r5, r23

	int16_t x = -r, y = 0, err = 2 - 2 * r, e2;
     a94:	cc 27       	eor	r28, r28
     a96:	dd 27       	eor	r29, r29
     a98:	c4 1b       	sub	r28, r20
     a9a:	d5 0b       	sbc	r29, r21
     a9c:	4e 01       	movw	r8, r28
     a9e:	88 0c       	add	r8, r8
     aa0:	99 1c       	adc	r9, r9
     aa2:	22 e0       	ldi	r18, 0x02	; 2
     aa4:	82 0e       	add	r8, r18
     aa6:	91 1c       	adc	r9, r1
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	10 e0       	ldi	r17, 0x00	; 0
	do {
		draw_pixel(x0 - x, y0 + y, color);
     aac:	a1 01       	movw	r20, r2
     aae:	62 01       	movw	r12, r4
     ab0:	c0 0e       	add	r12, r16
     ab2:	d1 1e       	adc	r13, r17
     ab4:	b6 01       	movw	r22, r12
     ab6:	73 01       	movw	r14, r6
     ab8:	ec 1a       	sub	r14, r28
     aba:	fd 0a       	sbc	r15, r29
     abc:	c7 01       	movw	r24, r14
     abe:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 + x, y0 + y, color);
     ac2:	a1 01       	movw	r20, r2
     ac4:	b6 01       	movw	r22, r12
     ac6:	53 01       	movw	r10, r6
     ac8:	ac 0e       	add	r10, r28
     aca:	bd 1e       	adc	r11, r29
     acc:	c5 01       	movw	r24, r10
     ace:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 + x, y0 - y, color);
     ad2:	a1 01       	movw	r20, r2
     ad4:	62 01       	movw	r12, r4
     ad6:	c0 1a       	sub	r12, r16
     ad8:	d1 0a       	sbc	r13, r17
     ada:	b6 01       	movw	r22, r12
     adc:	c5 01       	movw	r24, r10
     ade:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - x, y0 - y, color);
     ae2:	a1 01       	movw	r20, r2
     ae4:	b6 01       	movw	r22, r12
     ae6:	c7 01       	movw	r24, r14
     ae8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>

		e2 = err;
		if (e2 <= y) {
     aec:	08 15       	cp	r16, r8
     aee:	19 05       	cpc	r17, r9
     af0:	ac f0       	brlt	.+42     	; 0xb1c <_Z11draw_circlejjjj+0xba>
			err += ++y * 2 + 1;
     af2:	0f 5f       	subi	r16, 0xFF	; 255
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	c8 01       	movw	r24, r16
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	88 0d       	add	r24, r8
     b00:	99 1d       	adc	r25, r9
			if (-x == y && e2 <= x)
     b02:	22 27       	eor	r18, r18
     b04:	33 27       	eor	r19, r19
     b06:	2c 1b       	sub	r18, r28
     b08:	3d 0b       	sbc	r19, r29
     b0a:	02 17       	cp	r16, r18
     b0c:	13 07       	cpc	r17, r19
     b0e:	39 f4       	brne	.+14     	; 0xb1e <_Z11draw_circlejjjj+0xbc>
     b10:	c8 15       	cp	r28, r8
     b12:	d9 05       	cpc	r29, r9
     b14:	3c f0       	brlt	.+14     	; 0xb24 <_Z11draw_circlejjjj+0xc2>
			e2 = 0;
     b16:	81 2c       	mov	r8, r1
     b18:	91 2c       	mov	r9, r1
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <_Z11draw_circlejjjj+0xbc>
     b1c:	c4 01       	movw	r24, r8
		}
		if (e2 > x) {
     b1e:	c8 15       	cp	r28, r8
     b20:	d9 05       	cpc	r29, r9
     b22:	54 f4       	brge	.+20     	; 0xb38 <_Z11draw_circlejjjj+0xd6>
			err += ++x * 2 + 1;
     b24:	21 96       	adiw	r28, 0x01	; 1
     b26:	4e 01       	movw	r8, r28
     b28:	88 0c       	add	r8, r8
     b2a:	99 1c       	adc	r9, r9
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	82 1a       	sub	r8, r18
     b30:	92 0a       	sbc	r9, r18
     b32:	88 0e       	add	r8, r24
     b34:	99 1e       	adc	r9, r25
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <_Z11draw_circlejjjj+0xd8>
     b38:	4c 01       	movw	r8, r24
		}
	} while (x <= 0);
     b3a:	1c 16       	cp	r1, r28
     b3c:	1d 06       	cpc	r1, r29
     b3e:	0c f0       	brlt	.+2      	; 0xb42 <_Z11draw_circlejjjj+0xe0>
     b40:	b5 cf       	rjmp	.-150    	; 0xaac <_Z11draw_circlejjjj+0x4a>
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	5f 90       	pop	r5
     b60:	4f 90       	pop	r4
     b62:	3f 90       	pop	r3
     b64:	2f 90       	pop	r2
     b66:	08 95       	ret

00000b68 <_Z14draw_rectanglejjjjj>:

// setting a color to the pixels of a rectangle
void draw_rectangle(uint16_t x, uint16_t y, uint16_t dx, uint16_t dy, uint16_t color) {
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	6c 01       	movw	r12, r24
     b7e:	5b 01       	movw	r10, r22
     b80:	7a 01       	movw	r14, r20
	draw_h_line(x, y, y + dy, color);
     b82:	eb 01       	movw	r28, r22
     b84:	c2 0f       	add	r28, r18
     b86:	d3 1f       	adc	r29, r19
     b88:	98 01       	movw	r18, r16
     b8a:	ae 01       	movw	r20, r28
     b8c:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(x + dx, y, y + dy, color);
     b90:	ec 0c       	add	r14, r12
     b92:	fd 1c       	adc	r15, r13
     b94:	98 01       	movw	r18, r16
     b96:	ae 01       	movw	r20, r28
     b98:	b5 01       	movw	r22, r10
     b9a:	c7 01       	movw	r24, r14
     b9c:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_v_line(y, x, x + dx, color);
     ba0:	98 01       	movw	r18, r16
     ba2:	a7 01       	movw	r20, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	c5 01       	movw	r24, r10
     ba8:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(y + dy, x, x + dx, color);
     bac:	98 01       	movw	r18, r16
     bae:	a7 01       	movw	r20, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	ce 01       	movw	r24, r28
     bb4:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	08 95       	ret

00000bce <_Z11check_touchjjjjjj>:

// check if the screen is being touched
uint8_t check_touch(uint16_t TP_X, uint16_t TP_Y, uint16_t x, uint16_t y, uint16_t dx, uint16_t dy) {
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	fc 01       	movw	r30, r24
	return TP_Y >= y && TP_Y <= y + dy && TP_X >= x && TP_X <= x + dx;
     bd8:	62 17       	cp	r22, r18
     bda:	73 07       	cpc	r23, r19
     bdc:	80 f0       	brcs	.+32     	; 0xbfe <_Z11check_touchjjjjjj+0x30>
     bde:	e2 0e       	add	r14, r18
     be0:	f3 1e       	adc	r15, r19
     be2:	e6 16       	cp	r14, r22
     be4:	f7 06       	cpc	r15, r23
     be6:	68 f0       	brcs	.+26     	; 0xc02 <_Z11check_touchjjjjjj+0x34>
     be8:	84 17       	cp	r24, r20
     bea:	95 07       	cpc	r25, r21
     bec:	60 f0       	brcs	.+24     	; 0xc06 <_Z11check_touchjjjjjj+0x38>
     bee:	04 0f       	add	r16, r20
     bf0:	15 1f       	adc	r17, r21
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 17       	cp	r16, r30
     bf6:	1f 07       	cpc	r17, r31
     bf8:	38 f4       	brcc	.+14     	; 0xc08 <_Z11check_touchjjjjjj+0x3a>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <_Z11check_touchjjjjjj+0x3a>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	03 c0       	rjmp	.+6      	; 0xc08 <_Z11check_touchjjjjjj+0x3a>
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <_Z11check_touchjjjjjj+0x3a>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	08 95       	ret

00000c12 <_Z14print_keyboardPc>:
uint8_t currentPlayer = CROSS;	
uint8_t gameOver = 0;
uint8_t numberOfMoves = 0;	
	

void print_keyboard(char str[]) {
     c12:	3f 92       	push	r3
     c14:	4f 92       	push	r4
     c16:	5f 92       	push	r5
     c18:	6f 92       	push	r6
     c1a:	7f 92       	push	r7
     c1c:	8f 92       	push	r8
     c1e:	9f 92       	push	r9
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <_Z14print_keyboardPc+0x24>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	3c 01       	movw	r6, r24
	//char *str = "ABCDEFGHIJKLMNJOPRSTUVZ";
	//char str[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej
     c3c:	51 2c       	mov	r5, r1
		sprintf(tmp, "%c\0", str[i]);
     c3e:	0f 2e       	mov	r0, r31
     c40:	fb e6       	ldi	r31, 0x6B	; 107
     c42:	8f 2e       	mov	r8, r31
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	9f 2e       	mov	r9, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	5c 01       	movw	r10, r24
		draw_rectangle(KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     c50:	0f 2e       	mov	r0, r31
     c52:	f9 e3       	ldi	r31, 0x39	; 57
     c54:	3f 2e       	mov	r3, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	0f 2e       	mov	r0, r31
     c5a:	f3 e2       	ldi	r31, 0x23	; 35
     c5c:	4f 2e       	mov	r4, r31
     c5e:	f0 2d       	mov	r31, r0
	//char str[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej
		sprintf(tmp, "%c\0", str[i]);
     c60:	f3 01       	movw	r30, r6
     c62:	81 91       	ld	r24, Z+
     c64:	3f 01       	movw	r6, r30
     c66:	1f 92       	push	r1
     c68:	8f 93       	push	r24
     c6a:	9f 92       	push	r9
     c6c:	8f 92       	push	r8
     c6e:	bf 92       	push	r11
     c70:	af 92       	push	r10
     c72:	0e 94 77 0f 	call	0x1eee	; 0x1eee <sprintf>
		draw_rectangle(KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     c76:	53 9c       	mul	r5, r3
     c78:	c1 2c       	mov	r12, r1
     c7a:	11 24       	eor	r1, r1
     c7c:	c6 94       	lsr	r12
     c7e:	8c 2d       	mov	r24, r12
     c80:	88 0f       	add	r24, r24
     c82:	88 0f       	add	r24, r24
     c84:	88 0f       	add	r24, r24
     c86:	8c 0d       	add	r24, r12
     c88:	e5 2c       	mov	r14, r5
     c8a:	e8 1a       	sub	r14, r24
     c8c:	4e 9c       	mul	r4, r14
     c8e:	70 01       	movw	r14, r0
     c90:	11 24       	eor	r1, r1
     c92:	4c 9c       	mul	r4, r12
     c94:	60 01       	movw	r12, r0
     c96:	11 24       	eor	r1, r1
     c98:	b7 01       	movw	r22, r14
     c9a:	66 5f       	subi	r22, 0xF6	; 246
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	0f ef       	ldi	r16, 0xFF	; 255
     ca0:	1f ef       	ldi	r17, 0xFF	; 255
     ca2:	2e e1       	ldi	r18, 0x1E	; 30
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	4e e1       	ldi	r20, 0x1E	; 30
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	c6 01       	movw	r24, r12
     cac:	8a 5b       	subi	r24, 0xBA	; 186
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
		print_string(KEY_Y + offset_y + i/9 * (KEY_H + BLANK_SPACE / 2), KEY_X + i%9*(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
     cb4:	b7 01       	movw	r22, r14
     cb6:	6f 5e       	subi	r22, 0xEF	; 239
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	75 01       	movw	r14, r10
     cbc:	0e ea       	ldi	r16, 0xAE	; 174
     cbe:	1a e1       	ldi	r17, 0x1A	; 26
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	43 e0       	ldi	r20, 0x03	; 3
     cc6:	c6 01       	movw	r24, r12
     cc8:	87 5b       	subi	r24, 0xB7	; 183
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	//char *str = "ABCDEFGHIJKLMNJOPRSTUVZ";
	//char str[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej
     cd0:	53 94       	inc	r5
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	f6 e1       	ldi	r31, 0x16	; 22
     ce0:	5f 12       	cpse	r5, r31
     ce2:	be cf       	rjmp	.-132    	; 0xc60 <_Z14print_keyboardPc+0x4e>
		sprintf(tmp, "%c\0", str[i]);
		draw_rectangle(KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
		print_string(KEY_Y + offset_y + i/9 * (KEY_H + BLANK_SPACE / 2), KEY_X + i%9*(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
	}
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	7f 90       	pop	r7
     d02:	6f 90       	pop	r6
     d04:	5f 90       	pop	r5
     d06:	4f 90       	pop	r4
     d08:	3f 90       	pop	r3
     d0a:	08 95       	ret

00000d0c <_Z14drawHomeScreenv>:


void drawHomeScreen() {
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (HS_W - strlen("NEW PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(HS_S_Y, HS_S_X, HS_H, HS_W, WHITE);
     d14:	0f ef       	ldi	r16, 0xFF	; 255
     d16:	1f ef       	ldi	r17, 0xFF	; 255
     d18:	28 e1       	ldi	r18, 0x18	; 24
     d1a:	31 e0       	ldi	r19, 0x01	; 1
     d1c:	4c e3       	ldi	r20, 0x3C	; 60
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	64 e1       	ldi	r22, 0x14	; 20
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	8a e0       	ldi	r24, 0x0A	; 10
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(HS_S_Y + offset_y, HS_S_X + offset_x, 3, WHITE, CYAN, "NEW PLAYER\0");
     d2c:	0f 2e       	mov	r0, r31
     d2e:	ff e6       	ldi	r31, 0x6F	; 111
     d30:	ef 2e       	mov	r14, r31
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	ff 2e       	mov	r15, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	0e ea       	ldi	r16, 0xAE	; 174
     d3a:	1a e1       	ldi	r17, 0x1A	; 26
     d3c:	2f ef       	ldi	r18, 0xFF	; 255
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	43 e0       	ldi	r20, 0x03	; 3
     d42:	65 e5       	ldi	r22, 0x55	; 85
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	8c e1       	ldi	r24, 0x1C	; 28
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("CHOOSE PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(CP_Y, CP_X, CP_H, CP_W, WHITE);
     d4e:	0f ef       	ldi	r16, 0xFF	; 255
     d50:	1f ef       	ldi	r17, 0xFF	; 255
     d52:	28 e1       	ldi	r18, 0x18	; 24
     d54:	31 e0       	ldi	r19, 0x01	; 1
     d56:	4c e3       	ldi	r20, 0x3C	; 60
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	64 e1       	ldi	r22, 0x14	; 20
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	80 e5       	ldi	r24, 0x50	; 80
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(CP_Y + offset_y, CP_X + offset_x, 3, WHITE, CYAN, "CHOOSE PLAYER\0");
     d66:	0f 2e       	mov	r0, r31
     d68:	fb e7       	ldi	r31, 0x7B	; 123
     d6a:	ef 2e       	mov	r14, r31
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	ff 2e       	mov	r15, r31
     d70:	f0 2d       	mov	r31, r0
     d72:	0e ea       	ldi	r16, 0xAE	; 174
     d74:	1a e1       	ldi	r17, 0x1A	; 26
     d76:	2f ef       	ldi	r18, 0xFF	; 255
     d78:	3f ef       	ldi	r19, 0xFF	; 255
     d7a:	43 e0       	ldi	r20, 0x03	; 3
     d7c:	6e e3       	ldi	r22, 0x3E	; 62
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	82 e6       	ldi	r24, 0x62	; 98
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("LEADERBOARDS") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(LB_Y, LB_X, LB_H, LB_W, WHITE);
     d88:	0f ef       	ldi	r16, 0xFF	; 255
     d8a:	1f ef       	ldi	r17, 0xFF	; 255
     d8c:	28 e1       	ldi	r18, 0x18	; 24
     d8e:	31 e0       	ldi	r19, 0x01	; 1
     d90:	4c e3       	ldi	r20, 0x3C	; 60
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	64 e1       	ldi	r22, 0x14	; 20
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	86 e9       	ldi	r24, 0x96	; 150
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(LB_Y + offset_y, LB_X + offset_x, 3, WHITE, CYAN, "LEADERBOARDS\0");
     da0:	0f 2e       	mov	r0, r31
     da2:	fa e8       	ldi	r31, 0x8A	; 138
     da4:	ef 2e       	mov	r14, r31
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	ff 2e       	mov	r15, r31
     daa:	f0 2d       	mov	r31, r0
     dac:	0e ea       	ldi	r16, 0xAE	; 174
     dae:	1a e1       	ldi	r17, 0x1A	; 26
     db0:	2f ef       	ldi	r18, 0xFF	; 255
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	43 e0       	ldi	r20, 0x03	; 3
     db6:	66 e4       	ldi	r22, 0x46	; 70
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	88 ea       	ldi	r24, 0xA8	; 168
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <_Z14drawBackButtonv>:

void drawBackButton() {
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (BCK_BTN_W - strlen("BACK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (BCK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W, WHITE);
     dd4:	0f ef       	ldi	r16, 0xFF	; 255
     dd6:	1f ef       	ldi	r17, 0xFF	; 255
     dd8:	20 e5       	ldi	r18, 0x50	; 80
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	48 e2       	ldi	r20, 0x28	; 40
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	6a e0       	ldi	r22, 0x0A	; 10
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(BCK_BTN_Y + offset_y, BCK_BTN_X + offset_x, 3, WHITE, CYAN, "BACK\0");
     dec:	0f 2e       	mov	r0, r31
     dee:	f8 e9       	ldi	r31, 0x98	; 152
     df0:	ef 2e       	mov	r14, r31
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	ff 2e       	mov	r15, r31
     df6:	f0 2d       	mov	r31, r0
     df8:	0e ea       	ldi	r16, 0xAE	; 174
     dfa:	1a e1       	ldi	r17, 0x1A	; 26
     dfc:	2f ef       	ldi	r18, 0xFF	; 255
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	43 e0       	ldi	r20, 0x03	; 3
     e02:	64 e1       	ldi	r22, 0x14	; 20
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	82 e1       	ldi	r24, 0x12	; 18
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	08 95       	ret

00000e18 <_Z6clrScrv>:

void clrScr() {
	set_background_color(CYAN);
     e18:	8e ea       	ldi	r24, 0xAE	; 174
     e1a:	9a e1       	ldi	r25, 0x1A	; 26
     e1c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
     e20:	08 95       	ret

00000e22 <_Z18resetNewPlayerNamev>:
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	a4 e6       	ldi	r26, 0x64	; 100
     e26:	b0 e0       	ldi	r27, 0x00	; 0
		newPlayerName[i] = ' ';
     e28:	90 e2       	ldi	r25, 0x20	; 32
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     e2a:	fd 01       	movw	r30, r26
     e2c:	01 90       	ld	r0, Z+
     e2e:	00 20       	and	r0, r0
     e30:	e9 f7       	brne	.-6      	; 0xe2c <_Z18resetNewPlayerNamev+0xa>
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	e4 56       	subi	r30, 0x64	; 100
     e36:	f0 40       	sbci	r31, 0x00	; 0
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	2e 17       	cp	r18, r30
     e3e:	3f 07       	cpc	r19, r31
     e40:	30 f4       	brcc	.+12     	; 0xe4e <_Z18resetNewPlayerNamev+0x2c>
		newPlayerName[i] = ' ';
     e42:	f9 01       	movw	r30, r18
     e44:	ec 59       	subi	r30, 0x9C	; 156
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	90 83       	st	Z, r25
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	ee cf       	rjmp	.-36     	; 0xe2a <_Z18resetNewPlayerNamev+0x8>
		newPlayerName[i] = ' ';
	}
	newPlayerNameIndex = 0;
     e4e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <newPlayerNameIndex>
     e52:	08 95       	ret

00000e54 <_Z18resetPlayersColorsP6Player>:
}

void resetPlayersColors(Player *players) { //andClicks,, mozda bolje nazvat funkciju
	for(uint8_t i = 0; i < players_size; i++) {
     e54:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <players_size>
     e58:	22 23       	and	r18, r18
     e5a:	61 f0       	breq	.+24     	; 0xe74 <_Z18resetPlayersColorsP6Player+0x20>
     e5c:	e8 2f       	mov	r30, r24
     e5e:	f9 2f       	mov	r31, r25
     e60:	80 e0       	ldi	r24, 0x00	; 0
		players[i].color = WHITE;
     e62:	4f ef       	ldi	r20, 0xFF	; 255
     e64:	5f ef       	ldi	r21, 0xFF	; 255
     e66:	52 83       	std	Z+2, r21	; 0x02
     e68:	41 83       	std	Z+1, r20	; 0x01
		players[i].clicked = 0;
     e6a:	13 82       	std	Z+3, r1	; 0x03
	}
	newPlayerNameIndex = 0;
}

void resetPlayersColors(Player *players) { //andClicks,, mozda bolje nazvat funkciju
	for(uint8_t i = 0; i < players_size; i++) {
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	3b 96       	adiw	r30, 0x0b	; 11
     e70:	82 13       	cpse	r24, r18
     e72:	f9 cf       	rjmp	.-14     	; 0xe66 <_Z18resetPlayersColorsP6Player+0x12>
		players[i].color = WHITE;
		players[i].clicked = 0;
	}
	cross_chosen = 5;
     e74:	85 e0       	ldi	r24, 0x05	; 5
     e76:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cross_chosen>
	nought_chosen = 5;
     e7a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <nought_chosen>
     e7e:	08 95       	ret

00000e80 <_Z9resetGamev>:
}
void resetGame() {
	memset(board, 0, sizeof(board)); //reset board, mozda za ovo bolje napravit funkciju kao resetGame()
     e80:	89 e0       	ldi	r24, 0x09	; 9
     e82:	ee ea       	ldi	r30, 0xAE	; 174
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	df 01       	movw	r26, r30
     e88:	1d 92       	st	X+, r1
     e8a:	8a 95       	dec	r24
     e8c:	e9 f7       	brne	.-6      	; 0xe88 <_Z9resetGamev+0x8>
	currentPlayer = CROSS; //reset player
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	gameOver = 0;
     e94:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameOver>
	numberOfMoves = 0;
     e98:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
     e9c:	08 95       	ret

00000e9e <_Z22checkBackButtonPressedPjS_PhP6Player>:
}
void checkBackButtonPressed(uint16_t *TP_X, uint16_t *TP_Y, uint8_t *currentPage, Player *players) {
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
	if(get_bit(PINB, T_IRQ) == 0) {
     eb6:	b0 99       	sbic	0x16, 0	; 22
     eb8:	2c c0       	rjmp	.+88     	; 0xf12 <_Z22checkBackButtonPressedPjS_PhP6Player+0x74>
     eba:	59 01       	movw	r10, r18
     ebc:	6a 01       	movw	r12, r20
     ebe:	eb 01       	movw	r28, r22
     ec0:	4c 01       	movw	r8, r24
		read_touch_coords(TP_X, TP_Y);
     ec2:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
		if(check_touch(*TP_X, *TP_Y, BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W)) { //BACK button, ovo bolje napravit preko define-a --jesam
     ec6:	68 81       	ld	r22, Y
     ec8:	79 81       	ldd	r23, Y+1	; 0x01
     eca:	0f 2e       	mov	r0, r31
     ecc:	f0 e5       	ldi	r31, 0x50	; 80
     ece:	ef 2e       	mov	r14, r31
     ed0:	f1 2c       	mov	r15, r1
     ed2:	f0 2d       	mov	r31, r0
     ed4:	08 e2       	ldi	r16, 0x28	; 40
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	2a e0       	ldi	r18, 0x0A	; 10
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	4a e0       	ldi	r20, 0x0A	; 10
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	f4 01       	movw	r30, r8
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
     eea:	88 23       	and	r24, r24
     eec:	91 f0       	breq	.+36     	; 0xf12 <_Z22checkBackButtonPressedPjS_PhP6Player+0x74>
			//clrScr();
			//_delay_ms(10);
			if(*currentPage == NEW_PLAYER) { //ako je bio u NEW PLAYER da cleara
     eee:	f6 01       	movw	r30, r12
     ef0:	80 81       	ld	r24, Z
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	19 f4       	brne	.+6      	; 0xefc <_Z22checkBackButtonPressedPjS_PhP6Player+0x5e>
				resetNewPlayerName();
     ef6:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z18resetNewPlayerNamev>
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <_Z22checkBackButtonPressedPjS_PhP6Player+0x70>
			}else if(*currentPage == CHOOSE_PLAYER || *currentPage == GAME) { //ako je bio u CHOOSE PLAYER ili u GAME
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	11 f0       	breq	.+4      	; 0xf04 <_Z22checkBackButtonPressedPjS_PhP6Player+0x66>
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	29 f4       	brne	.+10     	; 0xf0e <_Z22checkBackButtonPressedPjS_PhP6Player+0x70>
				resetPlayersColors(players);
     f04:	c5 01       	movw	r24, r10
     f06:	0e 94 2a 07 	call	0xe54	; 0xe54 <_Z18resetPlayersColorsP6Player>
				resetGame();
     f0a:	0e 94 40 07 	call	0xe80	; 0xe80 <_Z9resetGamev>
			}
			*currentPage = HOMESCREEN;
     f0e:	f6 01       	movw	r30, r12
     f10:	10 82       	st	Z, r1
			//clrScr();
		}
	}
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	9f 90       	pop	r9
     f28:	8f 90       	pop	r8
     f2a:	08 95       	ret

00000f2c <_Z12sortByPointsP6Player>:
void sortByPoints(Player *players) {
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	2b 97       	sbiw	r28, 0x0b	; 11
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
	for(uint8_t i = 0; i < players_size - 1; i++) {
     f48:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <players_size>
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	21 50       	subi	r18, 0x01	; 1
     f50:	31 09       	sbc	r19, r1
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	0c f0       	brlt	.+2      	; 0xf5a <_Z12sortByPointsP6Player+0x2e>
     f58:	55 c0       	rjmp	.+170    	; 0x1004 <_Z12sortByPointsP6Player+0xd8>
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	f1 2c       	mov	r15, r1
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
			if(players[j].points < players[j+1].points) {
     f60:	7b e0       	ldi	r23, 0x0B	; 11
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
     f62:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <players_size>
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	24 1b       	sub	r18, r20
     f6a:	35 0b       	sbc	r19, r21
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	31 09       	sbc	r19, r1
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	dc f5       	brge	.+118    	; 0xfec <_Z12sortByPointsP6Player+0xc0>
     f76:	60 e0       	ldi	r22, 0x00	; 0
			if(players[j].points < players[j+1].points) {
     f78:	76 9f       	mul	r23, r22
     f7a:	90 01       	movw	r18, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	8c 01       	movw	r16, r24
     f80:	02 0f       	add	r16, r18
     f82:	13 1f       	adc	r17, r19
     f84:	25 5f       	subi	r18, 0xF5	; 245
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	28 0f       	add	r18, r24
     f8a:	39 1f       	adc	r19, r25
     f8c:	d8 01       	movw	r26, r16
     f8e:	fc 91       	ld	r31, X
     f90:	d9 01       	movw	r26, r18
     f92:	ec 91       	ld	r30, X
     f94:	fe 17       	cp	r31, r30
     f96:	e8 f4       	brcc	.+58     	; 0xfd2 <_Z12sortByPointsP6Player+0xa6>
				Player tmp = players[j];
     f98:	0f 2e       	mov	r0, r31
     f9a:	fb e0       	ldi	r31, 0x0B	; 11
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f0 2d       	mov	r31, r0
     fa0:	f8 01       	movw	r30, r16
     fa2:	de 01       	movw	r26, r28
     fa4:	11 96       	adiw	r26, 0x01	; 1
     fa6:	01 90       	ld	r0, Z+
     fa8:	0d 92       	st	X+, r0
     faa:	ea 94       	dec	r14
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <_Z12sortByPointsP6Player+0x7a>
				players[j] = players[j+1];
     fae:	0f 2e       	mov	r0, r31
     fb0:	fb e0       	ldi	r31, 0x0B	; 11
     fb2:	ef 2e       	mov	r14, r31
     fb4:	f0 2d       	mov	r31, r0
     fb6:	f9 01       	movw	r30, r18
     fb8:	d8 01       	movw	r26, r16
     fba:	01 90       	ld	r0, Z+
     fbc:	0d 92       	st	X+, r0
     fbe:	ea 94       	dec	r14
     fc0:	e1 f7       	brne	.-8      	; 0xfba <_Z12sortByPointsP6Player+0x8e>
				players[j+1] = tmp;
     fc2:	1b e0       	ldi	r17, 0x0B	; 11
     fc4:	fe 01       	movw	r30, r28
     fc6:	31 96       	adiw	r30, 0x01	; 1
     fc8:	d9 01       	movw	r26, r18
     fca:	01 90       	ld	r0, Z+
     fcc:	0d 92       	st	X+, r0
     fce:	1a 95       	dec	r17
     fd0:	e1 f7       	brne	.-8      	; 0xfca <_Z12sortByPointsP6Player+0x9e>
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	e6 2f       	mov	r30, r22
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <players_size>
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	24 1b       	sub	r18, r20
     fe0:	35 0b       	sbc	r19, r21
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	31 09       	sbc	r19, r1
     fe6:	e2 17       	cp	r30, r18
     fe8:	f3 07       	cpc	r31, r19
     fea:	34 f2       	brlt	.-116    	; 0xf78 <_Z12sortByPointsP6Player+0x4c>
			//clrScr();
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
     fec:	f3 94       	inc	r15
     fee:	4f 2d       	mov	r20, r15
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <players_size>
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	21 50       	subi	r18, 0x01	; 1
     ffa:	31 09       	sbc	r19, r1
     ffc:	42 17       	cp	r20, r18
     ffe:	53 07       	cpc	r21, r19
    1000:	0c f4       	brge	.+2      	; 0x1004 <_Z12sortByPointsP6Player+0xd8>
    1002:	af cf       	rjmp	.-162    	; 0xf62 <_Z12sortByPointsP6Player+0x36>
				players[j] = players[j+1];
				players[j+1] = tmp;
			}
		}
	}
}
    1004:	2b 96       	adiw	r28, 0x0b	; 11
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	08 95       	ret

0000101e <_Z17printLeaderboardsP6Playerh>:

void printLeaderboards(Player *players, uint8_t players_size) {
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <_Z17printLeaderboardsP6Playerh+0x1a>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	a8 2e       	mov	r10, r24
    103e:	b9 2e       	mov	r11, r25
    1040:	86 2e       	mov	r8, r22
	sortByPoints(players);
    1042:	0e 94 96 07 	call	0xf2c	; 0xf2c <_Z12sortByPointsP6Player>
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
    1046:	0f 2e       	mov	r0, r31
    1048:	fe e9       	ldi	r31, 0x9E	; 158
    104a:	ef 2e       	mov	r14, r31
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ff 2e       	mov	r15, r31
    1050:	f0 2d       	mov	r31, r0
    1052:	0e ea       	ldi	r16, 0xAE	; 174
    1054:	1a e1       	ldi	r17, 0x1A	; 26
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	43 e0       	ldi	r20, 0x03	; 3
    105c:	64 e6       	ldi	r22, 0x64	; 100
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	89 e1       	ldi	r24, 0x19	; 25
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
    1068:	0f 2e       	mov	r0, r31
    106a:	f4 ea       	ldi	r31, 0xA4	; 164
    106c:	ef 2e       	mov	r14, r31
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ff 2e       	mov	r15, r31
    1072:	f0 2d       	mov	r31, r0
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	3f ef       	ldi	r19, 0xFF	; 255
    1078:	43 e0       	ldi	r20, 0x03	; 3
    107a:	68 ec       	ldi	r22, 0xC8	; 200
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	char tmp[2];
	tmp[1] = '\0';
    1086:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8_t i = 0; i < players_size; i++) {
    1088:	88 20       	and	r8, r8
    108a:	71 f1       	breq	.+92     	; 0x10e8 <_Z17printLeaderboardsP6Playerh+0xca>
    108c:	ca 2c       	mov	r12, r10
    108e:	db 2c       	mov	r13, r11
    1090:	0f 2e       	mov	r0, r31
    1092:	f0 e5       	ldi	r31, 0x50	; 80
    1094:	af 2e       	mov	r10, r31
    1096:	b1 2c       	mov	r11, r1
    1098:	f0 2d       	mov	r31, r0
    109a:	91 2c       	mov	r9, r1
		tmp[0] = players[i].points + '0';
    109c:	f6 01       	movw	r30, r12
    109e:	80 81       	ld	r24, Z
    10a0:	80 5d       	subi	r24, 0xD0	; 208
    10a2:	89 83       	std	Y+1, r24	; 0x01
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
    10a4:	76 01       	movw	r14, r12
    10a6:	f4 e0       	ldi	r31, 0x04	; 4
    10a8:	ef 0e       	add	r14, r31
    10aa:	f1 1c       	adc	r15, r1
    10ac:	0e ea       	ldi	r16, 0xAE	; 174
    10ae:	1a e1       	ldi	r17, 0x1A	; 26
    10b0:	2f ef       	ldi	r18, 0xFF	; 255
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	43 e0       	ldi	r20, 0x03	; 3
    10b6:	64 e6       	ldi	r22, 0x64	; 100
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	c5 01       	movw	r24, r10
    10bc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	7c 01       	movw	r14, r24
    10c6:	2f ef       	ldi	r18, 0xFF	; 255
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	43 e0       	ldi	r20, 0x03	; 3
    10cc:	6a ef       	ldi	r22, 0xFA	; 250
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	c5 01       	movw	r24, r10
    10d2:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	sortByPoints(players);
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
	char tmp[2];
	tmp[1] = '\0';
	for(uint8_t i = 0; i < players_size; i++) {
    10d6:	93 94       	inc	r9
    10d8:	9b e0       	ldi	r25, 0x0B	; 11
    10da:	c9 0e       	add	r12, r25
    10dc:	d1 1c       	adc	r13, r1
    10de:	e8 e2       	ldi	r30, 0x28	; 40
    10e0:	ae 0e       	add	r10, r30
    10e2:	b1 1c       	adc	r11, r1
    10e4:	89 10       	cpse	r8, r9
    10e6:	da cf       	rjmp	.-76     	; 0x109c <_Z17printLeaderboardsP6Playerh+0x7e>
		tmp[0] = players[i].points + '0';
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
	}
}
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	bf 90       	pop	r11
    10fe:	af 90       	pop	r10
    1100:	9f 90       	pop	r9
    1102:	8f 90       	pop	r8
    1104:	08 95       	ret

00001106 <_Z11showPlayersP6Playerh>:

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
    1106:	2f 92       	push	r2
    1108:	3f 92       	push	r3
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    112a:	66 23       	and	r22, r22
    112c:	09 f4       	brne	.+2      	; 0x1130 <_Z11showPlayersP6Playerh+0x2a>
    112e:	5a c0       	rjmp	.+180    	; 0x11e4 <_Z11showPlayersP6Playerh+0xde>
    1130:	26 2e       	mov	r2, r22
    1132:	c8 2e       	mov	r12, r24
    1134:	d9 2e       	mov	r13, r25
    1136:	51 2c       	mov	r5, r1
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    1138:	80 e0       	ldi	r24, 0x00	; 0
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    113a:	0f 2e       	mov	r0, r31
    113c:	f2 e8       	ldi	r31, 0x82	; 130
    113e:	4f 2e       	mov	r4, r31
    1140:	f0 2d       	mov	r31, r0
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    1142:	0f 2e       	mov	r0, r31
    1144:	ff e0       	ldi	r31, 0x0F	; 15
    1146:	3f 2e       	mov	r3, r31
    1148:	f0 2d       	mov	r31, r0
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <_Z11showPlayersP6Playerh+0x52>
}

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	85 15       	cp	r24, r5
    1150:	10 f0       	brcs	.+4      	; 0x1156 <_Z11showPlayersP6Playerh+0x50>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <_Z11showPlayersP6Playerh+0x52>
    1156:	82 e3       	ldi	r24, 0x32	; 50
    1158:	76 01       	movw	r14, r12
    115a:	94 e0       	ldi	r25, 0x04	; 4
    115c:	e9 0e       	add	r14, r25
    115e:	f1 1c       	adc	r15, r1
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
    1160:	e7 01       	movw	r28, r14
    1162:	09 90       	ld	r0, Y+
    1164:	00 20       	and	r0, r0
    1166:	e9 f7       	brne	.-6      	; 0x1162 <_Z11showPlayersP6Playerh+0x5c>
    1168:	21 97       	sbiw	r28, 0x01	; 1
    116a:	ce 19       	sub	r28, r14
    116c:	df 09       	sbc	r29, r15
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    116e:	50 fa       	bst	r5, 0
    1170:	66 24       	eor	r6, r6
    1172:	60 f8       	bld	r6, 0
    1174:	71 2c       	mov	r7, r1
    1176:	46 9c       	mul	r4, r6
    1178:	40 01       	movw	r8, r0
    117a:	47 9c       	mul	r4, r7
    117c:	90 0c       	add	r9, r0
    117e:	11 24       	eor	r1, r1
    1180:	a8 2e       	mov	r10, r24
    1182:	b1 2c       	mov	r11, r1
    1184:	f6 01       	movw	r30, r12
    1186:	01 81       	ldd	r16, Z+1	; 0x01
    1188:	12 81       	ldd	r17, Z+2	; 0x02
    118a:	b4 01       	movw	r22, r8
    118c:	6c 5e       	subi	r22, 0xEC	; 236
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	28 e7       	ldi	r18, 0x78	; 120
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	48 e2       	ldi	r20, 0x28	; 40
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	c5 01       	movw	r24, r10
    119a:	8a 5b       	subi	r24, 0xBA	; 186
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    11a2:	f6 01       	movw	r30, r12
    11a4:	21 81       	ldd	r18, Z+1	; 0x01
    11a6:	32 81       	ldd	r19, Z+2	; 0x02
    11a8:	3c 9e       	mul	r3, r28
    11aa:	c0 01       	movw	r24, r0
    11ac:	3d 9e       	mul	r3, r29
    11ae:	90 0d       	add	r25, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	68 e7       	ldi	r22, 0x78	; 120
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	68 1b       	sub	r22, r24
    11b8:	79 0b       	sbc	r23, r25
    11ba:	76 95       	lsr	r23
    11bc:	67 95       	ror	r22
    11be:	77 27       	eor	r23, r23
    11c0:	6c 5e       	subi	r22, 0xEC	; 236
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	68 0d       	add	r22, r8
    11c6:	79 1d       	adc	r23, r9
    11c8:	0e ea       	ldi	r16, 0xAE	; 174
    11ca:	1a e1       	ldi	r17, 0x1A	; 26
    11cc:	43 e0       	ldi	r20, 0x03	; 3
    11ce:	c5 01       	movw	r24, r10
    11d0:	82 5b       	subi	r24, 0xB2	; 178
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}

void showPlayers(Player *players, uint8_t players_size) { //dodat da se imena ispisu u sredini i kad kliknes na neko ime ako je bijelo neka postane crveno ako opet kliknes na isto da postane opet bijelo, kad kliknes na neko drugo (a jedno je vec crveno) to drugo postane zeleno itd..--jesam
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    11d8:	53 94       	inc	r5
    11da:	fb e0       	ldi	r31, 0x0B	; 11
    11dc:	cf 0e       	add	r12, r31
    11de:	d1 1c       	adc	r13, r1
    11e0:	25 10       	cpse	r2, r5
    11e2:	b4 cf       	rjmp	.-152    	; 0x114c <_Z11showPlayersP6Playerh+0x46>
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
	}
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	7f 90       	pop	r7
    11fe:	6f 90       	pop	r6
    1200:	5f 90       	pop	r5
    1202:	4f 90       	pop	r4
    1204:	3f 90       	pop	r3
    1206:	2f 90       	pop	r2
    1208:	08 95       	ret

0000120a <_Z12drawOKButtonv>:

void drawOKButton() {
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (OK_BTN_W - strlen("OK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (OK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W, WHITE);
    1212:	0f ef       	ldi	r16, 0xFF	; 255
    1214:	1f ef       	ldi	r17, 0xFF	; 255
    1216:	2c e3       	ldi	r18, 0x3C	; 60
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	48 e2       	ldi	r20, 0x28	; 40
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	6a ef       	ldi	r22, 0xFA	; 250
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	8e eb       	ldi	r24, 0xBE	; 190
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(OK_BTN_Y + offset_y, OK_BTN_X + offset_x, 3, WHITE, CYAN, "OK\0");
    122a:	0f 2e       	mov	r0, r31
    122c:	fc ea       	ldi	r31, 0xAC	; 172
    122e:	ef 2e       	mov	r14, r31
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	ff 2e       	mov	r15, r31
    1234:	f0 2d       	mov	r31, r0
    1236:	0e ea       	ldi	r16, 0xAE	; 174
    1238:	1a e1       	ldi	r17, 0x1A	; 26
    123a:	2f ef       	ldi	r18, 0xFF	; 255
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	43 e0       	ldi	r20, 0x03	; 3
    1240:	69 e0       	ldi	r22, 0x09	; 9
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	86 ec       	ldi	r24, 0xC6	; 198
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	08 95       	ret

00001256 <_Z16drawDeleteButtonv>:

void drawDeleteButton() {
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (DEL_BTN_W - strlen("DEL") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (DEL_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W, WHITE);
    125e:	0f ef       	ldi	r16, 0xFF	; 255
    1260:	1f ef       	ldi	r17, 0xFF	; 255
    1262:	2c e3       	ldi	r18, 0x3C	; 60
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	48 e2       	ldi	r20, 0x28	; 40
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	64 eb       	ldi	r22, 0xB4	; 180
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	8e eb       	ldi	r24, 0xBE	; 190
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(DEL_BTN_Y + offset_y, DEL_BTN_X + offset_x, 3, WHITE, CYAN, "DEL\0");
    1276:	0f 2e       	mov	r0, r31
    1278:	f0 eb       	ldi	r31, 0xB0	; 176
    127a:	ef 2e       	mov	r14, r31
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ff 2e       	mov	r15, r31
    1280:	f0 2d       	mov	r31, r0
    1282:	0e ea       	ldi	r16, 0xAE	; 174
    1284:	1a e1       	ldi	r17, 0x1A	; 26
    1286:	2f ef       	ldi	r18, 0xFF	; 255
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	43 e0       	ldi	r20, 0x03	; 3
    128c:	6b eb       	ldi	r22, 0xBB	; 187
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	86 ec       	ldi	r24, 0xC6	; 198
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	08 95       	ret

000012a2 <_Z15drawStartButtonv>:

void drawStartButton() {
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
	uint8_t offset_x = (START_BTN_W - strlen("START") * CHAR_W * FONT_SIZE) / 2;
	uint8_t offset_y = (START_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W, WHITE);
    12aa:	0f ef       	ldi	r16, 0xFF	; 255
    12ac:	1f ef       	ldi	r17, 0xFF	; 255
    12ae:	2a e5       	ldi	r18, 0x5A	; 90
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	48 e2       	ldi	r20, 0x28	; 40
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	6c ed       	ldi	r22, 0xDC	; 220
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	8e eb       	ldi	r24, 0xBE	; 190
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 b4 05 	call	0xb68	; 0xb68 <_Z14draw_rectanglejjjjj>
	print_string(START_BTN_Y + offset_y, START_BTN_X + offset_x , 3, WHITE, CYAN, "START\0");
    12c2:	0f 2e       	mov	r0, r31
    12c4:	f5 eb       	ldi	r31, 0xB5	; 181
    12c6:	ef 2e       	mov	r14, r31
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	ff 2e       	mov	r15, r31
    12cc:	f0 2d       	mov	r31, r0
    12ce:	0e ea       	ldi	r16, 0xAE	; 174
    12d0:	1a e1       	ldi	r17, 0x1A	; 26
    12d2:	2f ef       	ldi	r18, 0xFF	; 255
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	43 e0       	ldi	r20, 0x03	; 3
    12d8:	63 ee       	ldi	r22, 0xE3	; 227
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	86 ec       	ldi	r24, 0xC6	; 198
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	08 95       	ret

000012ee <_Z9drawNamesP6Player>:

void drawNames(Player *players) {
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	62 97       	sbiw	r28, 0x12	; 18
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	char tmp[7+1+2+1+7]; //max first name, space, vs, space, max 2nd name //mozda 6 umjesto 7 al dobrop
	sprintf(tmp, "%s VS %s", players[cross_chosen].name, players[nought_chosen].name);
    130a:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <nought_chosen>
    130e:	4b e0       	ldi	r20, 0x0B	; 11
    1310:	bc 01       	movw	r22, r24
    1312:	42 9f       	mul	r20, r18
    1314:	60 0d       	add	r22, r0
    1316:	71 1d       	adc	r23, r1
    1318:	11 24       	eor	r1, r1
    131a:	9b 01       	movw	r18, r22
    131c:	2c 5f       	subi	r18, 0xFC	; 252
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	3f 93       	push	r19
    1322:	2f 93       	push	r18
    1324:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <cross_chosen>
    1328:	42 9f       	mul	r20, r18
    132a:	80 0d       	add	r24, r0
    132c:	91 1d       	adc	r25, r1
    132e:	11 24       	eor	r1, r1
    1330:	04 96       	adiw	r24, 0x04	; 4
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	84 ee       	ldi	r24, 0xE4	; 228
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9f 93       	push	r25
    133c:	8f 93       	push	r24
    133e:	ce 01       	movw	r24, r28
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	7c 01       	movw	r14, r24
    1344:	9f 93       	push	r25
    1346:	8f 93       	push	r24
    1348:	0e 94 77 0f 	call	0x1eee	; 0x1eee <sprintf>
	uint8_t offset_x = (MAX_Y - BLANK_SPACE - (BCK_BTN_X + BCK_BTN_W) - strlen(tmp) * CHAR_W * 2) / 2; //2 je FONT_SIZE, 220 -> sirina od kraja BCK_BTN do 310
    134c:	f7 01       	movw	r30, r14
    134e:	01 90       	ld	r0, Z+
    1350:	00 20       	and	r0, r0
    1352:	e9 f7       	brne	.-6      	; 0x134e <_Z9drawNamesP6Player+0x60>
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	ee 19       	sub	r30, r14
    1358:	ff 09       	sbc	r31, r15
	print_string(BLANK_SPACE, (BCK_BTN_X + BCK_BTN_W) + offset_x, 2, WHITE, CYAN, tmp); //90 je kraj od bck btn,, mozda da je ime svako u svojoj boji ili kako oces
    135a:	cf 01       	movw	r24, r30
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	e8 0f       	add	r30, r24
    136e:	f9 1f       	adc	r31, r25
    1370:	6c ed       	ldi	r22, 0xDC	; 220
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	6e 1b       	sub	r22, r30
    1376:	7f 0b       	sbc	r23, r31
    1378:	76 95       	lsr	r23
    137a:	67 95       	ror	r22
    137c:	77 27       	eor	r23, r23
    137e:	66 5a       	subi	r22, 0xA6	; 166
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	0e ea       	ldi	r16, 0xAE	; 174
    1384:	1a e1       	ldi	r17, 0x1A	; 26
    1386:	2f ef       	ldi	r18, 0xFF	; 255
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	42 e0       	ldi	r20, 0x02	; 2
    138c:	8a e0       	ldi	r24, 0x0A	; 10
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	62 96       	adiw	r28, 0x12	; 18
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	08 95       	ret

000013b8 <_Z8drawGridv>:

void drawGrid() {
	//draw_rectangle(10+40-5, 110, 185, 185, WHITE);
	
	draw_v_line(GRID_STARTING_X + GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE); //62=185/3
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	46 ee       	ldi	r20, 0xE6	; 230
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	6d e2       	ldi	r22, 0x2D	; 45
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	8c ea       	ldi	r24, 0xAC	; 172
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(GRID_STARTING_X + 2*GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE);
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	46 ee       	ldi	r20, 0xE6	; 230
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	6d e2       	ldi	r22, 0x2D	; 45
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	8a ee       	ldi	r24, 0xEA	; 234
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	
	draw_h_line(GRID_STARTING_Y + GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    13e0:	2f ef       	ldi	r18, 0xFF	; 255
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	47 e2       	ldi	r20, 0x27	; 39
    13e6:	51 e0       	ldi	r21, 0x01	; 1
    13e8:	6e e6       	ldi	r22, 0x6E	; 110
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	8b e6       	ldi	r24, 0x6B	; 107
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(GRID_STARTING_Y + 2*GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    13f4:	2f ef       	ldi	r18, 0xFF	; 255
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	47 e2       	ldi	r20, 0x27	; 39
    13fa:	51 e0       	ldi	r21, 0x01	; 1
    13fc:	6e e6       	ldi	r22, 0x6E	; 110
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	89 ea       	ldi	r24, 0xA9	; 169
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
    1408:	08 95       	ret

0000140a <_Z8drawTurnP6Player>:
	
}

void drawTurn(Player *players) {
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	ec 01       	movw	r28, r24
	print_string(BCK_BTN_Y + BCK_BTN_H + 4*BLANK_SPACE, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
    1418:	0f 2e       	mov	r0, r31
    141a:	fc eb       	ldi	r31, 0xBC	; 188
    141c:	ef 2e       	mov	r14, r31
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	ff 2e       	mov	r15, r31
    1422:	f0 2d       	mov	r31, r0
    1424:	0e ea       	ldi	r16, 0xAE	; 174
    1426:	1a e1       	ldi	r17, 0x1A	; 26
    1428:	2f ef       	ldi	r18, 0xFF	; 255
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	43 e0       	ldi	r20, 0x03	; 3
    142e:	6a e0       	ldi	r22, 0x0A	; 10
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	8a e5       	ldi	r24, 0x5A	; 90
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	if(currentPlayer == CROSS) {
    143a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	b1 f4       	brne	.+44     	; 0x146e <_Z8drawTurnP6Player+0x64>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name); //napravit da se ispise ime onog koji je na redu, mozes to s nekom pomocnom varijablom
    1442:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cross_chosen>
    1446:	fe 01       	movw	r30, r28
    1448:	9b e0       	ldi	r25, 0x0B	; 11
    144a:	89 9f       	mul	r24, r25
    144c:	e0 0d       	add	r30, r0
    144e:	f1 1d       	adc	r31, r1
    1450:	11 24       	eor	r1, r1
    1452:	7f 01       	movw	r14, r30
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	e8 0e       	add	r14, r24
    1458:	f1 1c       	adc	r15, r1
    145a:	21 81       	ldd	r18, Z+1	; 0x01
    145c:	32 81       	ldd	r19, Z+2	; 0x02
    145e:	42 e0       	ldi	r20, 0x02	; 2
    1460:	6a e0       	ldi	r22, 0x0A	; 10
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	88 e7       	ldi	r24, 0x78	; 120
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    146c:	17 c0       	rjmp	.+46     	; 0x149c <_Z8drawTurnP6Player+0x92>
	}else{
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    146e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <nought_chosen>
    1472:	fe 01       	movw	r30, r28
    1474:	9b e0       	ldi	r25, 0x0B	; 11
    1476:	89 9f       	mul	r24, r25
    1478:	e0 0d       	add	r30, r0
    147a:	f1 1d       	adc	r31, r1
    147c:	11 24       	eor	r1, r1
    147e:	7f 01       	movw	r14, r30
    1480:	84 e0       	ldi	r24, 0x04	; 4
    1482:	e8 0e       	add	r14, r24
    1484:	f1 1c       	adc	r15, r1
    1486:	21 81       	ldd	r18, Z+1	; 0x01
    1488:	32 81       	ldd	r19, Z+2	; 0x02
    148a:	0e ea       	ldi	r16, 0xAE	; 174
    148c:	1a e1       	ldi	r17, 0x1A	; 26
    148e:	42 e0       	ldi	r20, 0x02	; 2
    1490:	6a e0       	ldi	r22, 0x0A	; 10
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	88 e7       	ldi	r24, 0x78	; 120
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	08 95       	ret

000014aa <_Z10drawOnGridhh>:

uint8_t drawOnGrid(uint8_t y, uint8_t x) { //skuzi kako ovo centrirat i napravi preko define-ova
	if(currentPlayer == CROSS) { //nesto sa players[cross_chosen]
    14aa:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    14ae:	91 30       	cpi	r25, 0x01	; 1
    14b0:	69 f4       	brne	.+26     	; 0x14cc <_Z10drawOnGridhh+0x22>
		//print_string(y + 10, x + 10, 2, WHITE, CYAN, "X\0");
		//draw_cross(y-5,x,62, WHITE); //bilo 62, 88 = sqrt(62**2 + 62**2) //treba podignut za 5 da bi bio tocno na sredini nez tocno zas
		//draw_cross(y + y/20 - 5,x + x/20, 62-62/3, WHITE);
		draw_cross(y + 11 - 5,x + 11 - 3, 62-62/3, RED); //skuzi malo kako ovo centrirat
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	68 5f       	subi	r22, 0xF8	; 248
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	29 e6       	ldi	r18, 0x69	; 105
    14bc:	33 ed       	ldi	r19, 0xD3	; 211
    14be:	4a e2       	ldi	r20, 0x2A	; 42
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	06 96       	adiw	r24, 0x06	; 6
    14c4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z10draw_crossjjjj>
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40 + 50, BCK_BTN_X, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name);
		return NOUGHT;
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	08 95       	ret
	}else {
		//print_string(y + 10, x + 10, 2, WHITE, CYAN, "O\0");
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
		//print_string(BCK_BTN_Y + BCK_BTN_H + 40 + 50, BCK_BTN_X, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
		draw_circle(y + 11 - 5 - 3, x + 11 - 3, 23, GREEN); //62/3   //skuzi malo kako ovo centrirat
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	68 5f       	subi	r22, 0xF8	; 248
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	2b e2       	ldi	r18, 0x2B	; 43
    14d6:	37 ec       	ldi	r19, 0xC7	; 199
    14d8:	47 e1       	ldi	r20, 0x17	; 23
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	03 96       	adiw	r24, 0x03	; 3
    14de:	0e 94 31 05 	call	0xa62	; 0xa62 <_Z11draw_circlejjjj>
		return CROSS;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    14e4:	08 95       	ret

000014e6 <_Z13checkGameOverP6Player>:

void checkGameOver(Player *players) {
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	5c 01       	movw	r10, r24
    14fa:	ee ea       	ldi	r30, 0xAE	; 174
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	21 eb       	ldi	r18, 0xB1	; 177
    1500:	31 e0       	ldi	r19, 0x01	; 1
    1502:	df 01       	movw	r26, r30
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
		if (board[i][0] != EMPTY && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
    1504:	80 81       	ld	r24, Z
    1506:	88 23       	and	r24, r24
    1508:	51 f0       	breq	.+20     	; 0x151e <_Z13checkGameOverP6Player+0x38>
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	89 13       	cpse	r24, r25
    150e:	07 c0       	rjmp	.+14     	; 0x151e <_Z13checkGameOverP6Player+0x38>
    1510:	d2 80       	ldd	r13, Z+2	; 0x02
    1512:	8d 11       	cpse	r24, r13
    1514:	04 c0       	rjmp	.+8      	; 0x151e <_Z13checkGameOverP6Player+0x38>
			gameOver = 1; // 3 same in a row
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <gameOver>
			winner = board[i][0];
			break;
    151c:	a7 c0       	rjmp	.+334    	; 0x166c <_Z13checkGameOverP6Player+0x186>
		}
		if (board[0][i] != EMPTY && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
    151e:	8d 91       	ld	r24, X+
    1520:	88 23       	and	r24, r24
    1522:	71 f0       	breq	.+28     	; 0x1540 <_Z13checkGameOverP6Player+0x5a>
    1524:	12 96       	adiw	r26, 0x02	; 2
    1526:	9c 91       	ld	r25, X
    1528:	12 97       	sbiw	r26, 0x02	; 2
    152a:	89 13       	cpse	r24, r25
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <_Z13checkGameOverP6Player+0x5a>
    152e:	15 96       	adiw	r26, 0x05	; 5
    1530:	dc 90       	ld	r13, X
    1532:	15 97       	sbiw	r26, 0x05	; 5
    1534:	8d 11       	cpse	r24, r13
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <_Z13checkGameOverP6Player+0x5a>
			gameOver = 1; // 3 same in a column
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <gameOver>
			winner = board[0][i];
			break;
    153e:	96 c0       	rjmp	.+300    	; 0x166c <_Z13checkGameOverP6Player+0x186>
    1540:	33 96       	adiw	r30, 0x03	; 3
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
    1542:	a2 17       	cp	r26, r18
    1544:	b3 07       	cpc	r27, r19
    1546:	f1 f6       	brne	.-68     	; 0x1504 <_Z13checkGameOverP6Player+0x1e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    1548:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <board+0x4>
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <_Z13checkGameOverP6Player+0x6c>
    1550:	a5 c0       	rjmp	.+330    	; 0x169c <_Z13checkGameOverP6Player+0x1b6>
		return CROSS;
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
    1552:	d1 2c       	mov	r13, r1
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    1554:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <board>
    1558:	98 13       	cpse	r25, r24
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <_Z13checkGameOverP6Player+0x7e>
    155c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <board+0x8>
    1560:	92 17       	cp	r25, r18
    1562:	41 f0       	breq	.+16     	; 0x1574 <_Z13checkGameOverP6Player+0x8e>
    1564:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <board+0x2>
    1568:	98 13       	cpse	r25, r24
    156a:	09 c0       	rjmp	.+18     	; 0x157e <_Z13checkGameOverP6Player+0x98>
    156c:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <board+0x6>
    1570:	92 13       	cpse	r25, r18
    1572:	05 c0       	rjmp	.+10     	; 0x157e <_Z13checkGameOverP6Player+0x98>
		gameOver = 1; // 3 same in a diagonal
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <gameOver>
    157a:	d8 2e       	mov	r13, r24
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <_Z13checkGameOverP6Player+0xa2>
		winner = board[1][1];
	}
	
	if(gameOver) { //ovo preko define-ova
    157e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameOver>
    1582:	88 23       	and	r24, r24
    1584:	09 f4       	brne	.+2      	; 0x1588 <_Z13checkGameOverP6Player+0xa2>
    1586:	5c c0       	rjmp	.+184    	; 0x1640 <_Z13checkGameOverP6Player+0x15a>
		print_string(MAX_X-20-30-20, 10, 3, WHITE, CYAN, "WON:\0");
    1588:	0f 2e       	mov	r0, r31
    158a:	f3 ec       	ldi	r31, 0xC3	; 195
    158c:	ef 2e       	mov	r14, r31
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	ff 2e       	mov	r15, r31
    1592:	f0 2d       	mov	r31, r0
    1594:	0e ea       	ldi	r16, 0xAE	; 174
    1596:	1a e1       	ldi	r17, 0x1A	; 26
    1598:	2f ef       	ldi	r18, 0xFF	; 255
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	43 e0       	ldi	r20, 0x03	; 3
    159e:	6a e0       	ldi	r22, 0x0A	; 10
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	8a ea       	ldi	r24, 0xAA	; 170
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? print_string(MAX_X - 4*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 4*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	d8 12       	cpse	r13, r24
    15ae:	23 c0       	rjmp	.+70     	; 0x15f6 <_Z13checkGameOverP6Player+0x110>
    15b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cross_chosen>
    15b4:	0f 2e       	mov	r0, r31
    15b6:	fb e0       	ldi	r31, 0x0B	; 11
    15b8:	df 2e       	mov	r13, r31
    15ba:	f0 2d       	mov	r31, r0
    15bc:	f5 01       	movw	r30, r10
    15be:	d8 9e       	mul	r13, r24
    15c0:	e0 0d       	add	r30, r0
    15c2:	f1 1d       	adc	r31, r1
    15c4:	11 24       	eor	r1, r1
    15c6:	7f 01       	movw	r14, r30
    15c8:	c4 e0       	ldi	r28, 0x04	; 4
    15ca:	ec 0e       	add	r14, r28
    15cc:	f1 1c       	adc	r15, r1
    15ce:	21 81       	ldd	r18, Z+1	; 0x01
    15d0:	32 81       	ldd	r19, Z+2	; 0x02
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	6a e0       	ldi	r22, 0x0A	; 10
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	88 ec       	ldi	r24, 0xC8	; 200
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    15e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cross_chosen>
    15e4:	e5 01       	movw	r28, r10
    15e6:	d8 9e       	mul	r13, r24
    15e8:	c0 0d       	add	r28, r0
    15ea:	d1 1d       	adc	r29, r1
    15ec:	11 24       	eor	r1, r1
    15ee:	88 81       	ld	r24, Y
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	88 83       	st	Y, r24
    15f4:	58 c0       	rjmp	.+176    	; 0x16a6 <_Z13checkGameOverP6Player+0x1c0>
		winner = board[1][1];
	}
	
	if(gameOver) { //ovo preko define-ova
		print_string(MAX_X-20-30-20, 10, 3, WHITE, CYAN, "WON:\0");
		winner == CROSS ? print_string(MAX_X - 4*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 4*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    15f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <nought_chosen>
    15fa:	0f 2e       	mov	r0, r31
    15fc:	fb e0       	ldi	r31, 0x0B	; 11
    15fe:	df 2e       	mov	r13, r31
    1600:	f0 2d       	mov	r31, r0
    1602:	f5 01       	movw	r30, r10
    1604:	d8 9e       	mul	r13, r24
    1606:	e0 0d       	add	r30, r0
    1608:	f1 1d       	adc	r31, r1
    160a:	11 24       	eor	r1, r1
    160c:	7f 01       	movw	r14, r30
    160e:	d4 e0       	ldi	r29, 0x04	; 4
    1610:	ed 0e       	add	r14, r29
    1612:	f1 1c       	adc	r15, r1
    1614:	21 81       	ldd	r18, Z+1	; 0x01
    1616:	32 81       	ldd	r19, Z+2	; 0x02
    1618:	0e ea       	ldi	r16, 0xAE	; 174
    161a:	1a e1       	ldi	r17, 0x1A	; 26
    161c:	42 e0       	ldi	r20, 0x02	; 2
    161e:	6a e0       	ldi	r22, 0x0A	; 10
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	88 ec       	ldi	r24, 0xC8	; 200
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    162a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <nought_chosen>
    162e:	e5 01       	movw	r28, r10
    1630:	d8 9e       	mul	r13, r24
    1632:	c0 0d       	add	r28, r0
    1634:	d1 1d       	adc	r29, r1
    1636:	11 24       	eor	r1, r1
    1638:	88 81       	ld	r24, Y
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	88 83       	st	Y, r24
    163e:	33 c0       	rjmp	.+102    	; 0x16a6 <_Z13checkGameOverP6Player+0x1c0>
			//players[cross_chosen].points = 99;
			//players[cross_chosen].name[0] = ':';
			//change(&players[cross_chosen]);
			//print_string(200, 200, 3, WHITE, CYAN, "DA NE");
		//}
	}else if(numberOfMoves == 9) {
    1640:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    1644:	89 30       	cpi	r24, 0x09	; 9
    1646:	79 f5       	brne	.+94     	; 0x16a6 <_Z13checkGameOverP6Player+0x1c0>
		//tie
		print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "TIE\0");
    1648:	0f 2e       	mov	r0, r31
    164a:	f9 ec       	ldi	r31, 0xC9	; 201
    164c:	ef 2e       	mov	r14, r31
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	ff 2e       	mov	r15, r31
    1652:	f0 2d       	mov	r31, r0
    1654:	0e ea       	ldi	r16, 0xAE	; 174
    1656:	1a e1       	ldi	r17, 0x1A	; 26
    1658:	2f ef       	ldi	r18, 0xFF	; 255
    165a:	3f ef       	ldi	r19, 0xFF	; 255
    165c:	43 e0       	ldi	r20, 0x03	; 3
    165e:	6a e0       	ldi	r22, 0x0A	; 10
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	8a ea       	ldi	r24, 0xAA	; 170
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
	
}
    166a:	1d c0       	rjmp	.+58     	; 0x16a6 <_Z13checkGameOverP6Player+0x1c0>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    166c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <board+0x4>
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <_Z13checkGameOverP6Player+0x190>
    1674:	89 cf       	rjmp	.-238    	; 0x1588 <_Z13checkGameOverP6Player+0xa2>
    1676:	6e cf       	rjmp	.-292    	; 0x1554 <_Z13checkGameOverP6Player+0x6e>
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) { //ovo preko define-ova
		print_string(MAX_X-20-30-20, 10, 3, WHITE, CYAN, "WON:\0");
    1678:	0f 2e       	mov	r0, r31
    167a:	f3 ec       	ldi	r31, 0xC3	; 195
    167c:	ef 2e       	mov	r14, r31
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	ff 2e       	mov	r15, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	0e ea       	ldi	r16, 0xAE	; 174
    1686:	1a e1       	ldi	r17, 0x1A	; 26
    1688:	2f ef       	ldi	r18, 0xFF	; 255
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	43 e0       	ldi	r20, 0x03	; 3
    168e:	6a e0       	ldi	r22, 0x0A	; 10
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	8a ea       	ldi	r24, 0xAA	; 170
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    169a:	ad cf       	rjmp	.-166    	; 0x15f6 <_Z13checkGameOverP6Player+0x110>
	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) { //ovo preko define-ova
    169c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameOver>
    16a0:	88 23       	and	r24, r24
    16a2:	71 f2       	breq	.-100    	; 0x1640 <_Z13checkGameOverP6Player+0x15a>
    16a4:	e9 cf       	rjmp	.-46     	; 0x1678 <_Z13checkGameOverP6Player+0x192>
	}else if(numberOfMoves == 9) {
		//tie
		print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "TIE\0");
	}
	
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	bf 90       	pop	r11
    16b6:	af 90       	pop	r10
    16b8:	08 95       	ret

000016ba <main>:

int main() {
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	c0 58       	subi	r28, 0x80	; 128
    16c4:	d1 09       	sbc	r29, r1
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
	TFT_init();
    16d0:	0e 94 be 00 	call	0x17c	; 0x17c <_Z8TFT_initv>

	//initialize_menu();

	TFT_start();
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <_Z9TFT_startv>
	
	//uint8_t board[3][3] = {0};            // grid
	uint16_t TP_X;                  // received coordiates rom tuch part of screen
	uint16_t TP_Y;                  // received coordiates rom tuch part of screen
	set_background_color(CYAN); //kao neki clearscr
    16d8:	8e ea       	ldi	r24, 0xAE	; 174
    16da:	9a e1       	ldi	r25, 0x1A	; 26
    16dc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
	//uint8_t i = 0;
	uint8_t currentPage = HOMESCREEN; //0 - homescreen //vratit na HOMESCREEN
    16e0:	1d 82       	std	Y+5, r1	; 0x05
	char str[22] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
    16e2:	86 e1       	ldi	r24, 0x16	; 22
    16e4:	ee ec       	ldi	r30, 0xCE	; 206
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	de 01       	movw	r26, r28
    16ea:	16 96       	adiw	r26, 0x06	; 6
    16ec:	01 90       	ld	r0, Z+
    16ee:	0d 92       	st	X+, r0
    16f0:	8a 95       	dec	r24
    16f2:	e1 f7       	brne	.-8      	; 0x16ec <main+0x32>
    16f4:	e8 e4       	ldi	r30, 0x48	; 72
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	ec 0f       	add	r30, r28
    16fa:	fd 1f       	adc	r31, r29
    16fc:	34 96       	adiw	r30, 0x04	; 4
    16fe:	88 e4       	ldi	r24, 0x48	; 72
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	8c 0f       	add	r24, r28
    1704:	9d 1f       	adc	r25, r29
    1706:	0b 96       	adiw	r24, 0x0b	; 11
	Player players[MAX_PLAYERS];
	
	Player p1; //ovo dinamicki radi
	p1.points = 0;
	for(uint8_t j = 0; j < 7; j++) {
		p1.name[j] = 'A';
    1708:	21 e4       	ldi	r18, 0x41	; 65
    170a:	21 93       	st	Z+, r18
	
	Player players[MAX_PLAYERS];
	
	Player p1; //ovo dinamicki radi
	p1.points = 0;
	for(uint8_t j = 0; j < 7; j++) {
    170c:	8e 17       	cp	r24, r30
    170e:	9f 07       	cpc	r25, r31
    1710:	e1 f7       	brne	.-8      	; 0x170a <main+0x50>
		p1.name[j] = 'A';
	}
	p1.name[6] = '\0';
    1712:	63 96       	adiw	r28, 0x13	; 19
    1714:	1f ae       	std	Y+63, r1	; 0x3f
    1716:	63 97       	sbiw	r28, 0x13	; 19
    1718:	e3 e5       	ldi	r30, 0x53	; 83
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	ec 0f       	add	r30, r28
    171e:	fd 1f       	adc	r31, r29
    1720:	34 96       	adiw	r30, 0x04	; 4
    1722:	83 e5       	ldi	r24, 0x53	; 83
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	8c 0f       	add	r24, r28
    1728:	9d 1f       	adc	r25, r29
    172a:	0b 96       	adiw	r24, 0x0b	; 11
	p1.color = WHITE;
	
	Player p2;
	p2.points = 2;
	for(uint8_t j = 0; j < 7; j++) {
		p2.name[j] = 'B';
    172c:	22 e4       	ldi	r18, 0x42	; 66
    172e:	21 93       	st	Z+, r18
	p1.clicked = 0;
	p1.color = WHITE;
	
	Player p2;
	p2.points = 2;
	for(uint8_t j = 0; j < 7; j++) {
    1730:	8e 17       	cp	r24, r30
    1732:	9f 07       	cpc	r25, r31
    1734:	e1 f7       	brne	.-8      	; 0x172e <main+0x74>
		p2.name[j] = 'B';
	}
	p2.name[6] = '\0';
    1736:	6e 96       	adiw	r28, 0x1e	; 30
    1738:	1f ae       	std	Y+63, r1	; 0x3f
    173a:	6e 97       	sbiw	r28, 0x1e	; 30
    173c:	ee e5       	ldi	r30, 0x5E	; 94
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	ec 0f       	add	r30, r28
    1742:	fd 1f       	adc	r31, r29
    1744:	34 96       	adiw	r30, 0x04	; 4
    1746:	8e e5       	ldi	r24, 0x5E	; 94
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	8c 0f       	add	r24, r28
    174c:	9d 1f       	adc	r25, r29
    174e:	0b 96       	adiw	r24, 0x0b	; 11
	p2.color = WHITE;
	
	Player p3;
	p3.points = 7;
	for(uint8_t j = 0; j < 7; j++) {
		p3.name[j] = 'C';
    1750:	23 e4       	ldi	r18, 0x43	; 67
    1752:	21 93       	st	Z+, r18
	p2.clicked = 1;
	p2.color = WHITE;
	
	Player p3;
	p3.points = 7;
	for(uint8_t j = 0; j < 7; j++) {
    1754:	e8 17       	cp	r30, r24
    1756:	f9 07       	cpc	r31, r25
    1758:	e1 f7       	brne	.-8      	; 0x1752 <main+0x98>
		p3.name[j] = 'C';
	}
	p3.name[6] = '\0';
    175a:	a9 96       	adiw	r28, 0x29	; 41
    175c:	1f ae       	std	Y+63, r1	; 0x3f
    175e:	a9 97       	sbiw	r28, 0x29	; 41
    1760:	e9 e6       	ldi	r30, 0x69	; 105
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	ec 0f       	add	r30, r28
    1766:	fd 1f       	adc	r31, r29
    1768:	34 96       	adiw	r30, 0x04	; 4
    176a:	89 e6       	ldi	r24, 0x69	; 105
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	8c 0f       	add	r24, r28
    1770:	9d 1f       	adc	r25, r29
    1772:	0b 96       	adiw	r24, 0x0b	; 11
	p3.color = WHITE;
	
	Player p4;
	p4.points = 4;
	for(uint8_t j = 0; j < 7; j++) {
		p4.name[j] = 'D';
    1774:	24 e4       	ldi	r18, 0x44	; 68
    1776:	21 93       	st	Z+, r18
	p3.clicked = 0;
	p3.color = WHITE;
	
	Player p4;
	p4.points = 4;
	for(uint8_t j = 0; j < 7; j++) {
    1778:	e8 17       	cp	r30, r24
    177a:	f9 07       	cpc	r31, r25
    177c:	e1 f7       	brne	.-8      	; 0x1776 <main+0xbc>
		p4.name[j] = 'D';
	}
	p4.name[6] = '\0';
    177e:	e4 96       	adiw	r28, 0x34	; 52
    1780:	1f ae       	std	Y+63, r1	; 0x3f
    1782:	e4 97       	sbiw	r28, 0x34	; 52
	p4.clicked = 0;
	p4.color = WHITE;
	
	players[0] = p1;
    1784:	29 96       	adiw	r28, 0x09	; 9
    1786:	1f ae       	std	Y+63, r1	; 0x3f
    1788:	29 97       	sbiw	r28, 0x09	; 9
    178a:	8f ef       	ldi	r24, 0xFF	; 255
    178c:	9f ef       	ldi	r25, 0xFF	; 255
    178e:	2b 96       	adiw	r28, 0x0b	; 11
    1790:	9f af       	std	Y+63, r25	; 0x3f
    1792:	8e af       	std	Y+62, r24	; 0x3e
    1794:	2b 97       	sbiw	r28, 0x0b	; 11
    1796:	2c 96       	adiw	r28, 0x0c	; 12
    1798:	1f ae       	std	Y+63, r1	; 0x3f
    179a:	2c 97       	sbiw	r28, 0x0c	; 12
    179c:	2b e0       	ldi	r18, 0x0B	; 11
    179e:	fe 01       	movw	r30, r28
    17a0:	e8 5b       	subi	r30, 0xB8	; 184
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	de 01       	movw	r26, r28
    17a6:	5c 96       	adiw	r26, 0x1c	; 28
    17a8:	01 90       	ld	r0, Z+
    17aa:	0d 92       	st	X+, r0
    17ac:	2a 95       	dec	r18
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <main+0xee>
	players[1] = p2;
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	64 96       	adiw	r28, 0x14	; 20
    17b4:	2f af       	std	Y+63, r18	; 0x3f
    17b6:	64 97       	sbiw	r28, 0x14	; 20
    17b8:	66 96       	adiw	r28, 0x16	; 22
    17ba:	9f af       	std	Y+63, r25	; 0x3f
    17bc:	8e af       	std	Y+62, r24	; 0x3e
    17be:	66 97       	sbiw	r28, 0x16	; 22
    17c0:	21 e0       	ldi	r18, 0x01	; 1
    17c2:	67 96       	adiw	r28, 0x17	; 23
    17c4:	2f af       	std	Y+63, r18	; 0x3f
    17c6:	67 97       	sbiw	r28, 0x17	; 23
    17c8:	2b e0       	ldi	r18, 0x0B	; 11
    17ca:	fe 01       	movw	r30, r28
    17cc:	ed 5a       	subi	r30, 0xAD	; 173
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	de 01       	movw	r26, r28
    17d2:	97 96       	adiw	r26, 0x27	; 39
    17d4:	01 90       	ld	r0, Z+
    17d6:	0d 92       	st	X+, r0
    17d8:	2a 95       	dec	r18
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <main+0x11a>
	players[2] = p3;
    17dc:	27 e0       	ldi	r18, 0x07	; 7
    17de:	6f 96       	adiw	r28, 0x1f	; 31
    17e0:	2f af       	std	Y+63, r18	; 0x3f
    17e2:	6f 97       	sbiw	r28, 0x1f	; 31
    17e4:	a1 96       	adiw	r28, 0x21	; 33
    17e6:	9f af       	std	Y+63, r25	; 0x3f
    17e8:	8e af       	std	Y+62, r24	; 0x3e
    17ea:	a1 97       	sbiw	r28, 0x21	; 33
    17ec:	a2 96       	adiw	r28, 0x22	; 34
    17ee:	1f ae       	std	Y+63, r1	; 0x3f
    17f0:	a2 97       	sbiw	r28, 0x22	; 34
    17f2:	2b e0       	ldi	r18, 0x0B	; 11
    17f4:	fe 01       	movw	r30, r28
    17f6:	e2 5a       	subi	r30, 0xA2	; 162
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	de 01       	movw	r26, r28
    17fc:	d2 96       	adiw	r26, 0x32	; 50
    17fe:	01 90       	ld	r0, Z+
    1800:	0d 92       	st	X+, r0
    1802:	2a 95       	dec	r18
    1804:	e1 f7       	brne	.-8      	; 0x17fe <main+0x144>
	players[3] = p4;
    1806:	24 e0       	ldi	r18, 0x04	; 4
    1808:	aa 96       	adiw	r28, 0x2a	; 42
    180a:	2f af       	std	Y+63, r18	; 0x3f
    180c:	aa 97       	sbiw	r28, 0x2a	; 42
    180e:	ac 96       	adiw	r28, 0x2c	; 44
    1810:	9f af       	std	Y+63, r25	; 0x3f
    1812:	8e af       	std	Y+62, r24	; 0x3e
    1814:	ac 97       	sbiw	r28, 0x2c	; 44
    1816:	ad 96       	adiw	r28, 0x2d	; 45
    1818:	1f ae       	std	Y+63, r1	; 0x3f
    181a:	ad 97       	sbiw	r28, 0x2d	; 45
    181c:	8b e0       	ldi	r24, 0x0B	; 11
    181e:	fe 01       	movw	r30, r28
    1820:	e7 59       	subi	r30, 0x97	; 151
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	de 01       	movw	r26, r28
    1826:	dd 96       	adiw	r26, 0x3d	; 61
    1828:	01 90       	ld	r0, Z+
    182a:	0d 92       	st	X+, r0
    182c:	8a 95       	dec	r24
    182e:	e1 f7       	brne	.-8      	; 0x1828 <main+0x16e>
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1830:	21 2c       	mov	r2, r1
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1832:	0f 2e       	mov	r0, r31
    1834:	f2 e8       	ldi	r31, 0x82	; 130
    1836:	3f 2e       	mov	r3, r31
    1838:	f0 2d       	mov	r31, r0
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    183a:	c1 58       	subi	r28, 0x81	; 129
    183c:	df 4f       	sbci	r29, 0xFF	; 255
    183e:	28 82       	st	Y, r2
    1840:	cf 57       	subi	r28, 0x7F	; 127
    1842:	d0 40       	sbci	r29, 0x00	; 0
	players[2] = p3;
	players[3] = p4;
	
	while (1) {
		// if screen is touched
		if(currentPage == HOMESCREEN) {
    1844:	8d 81       	ldd	r24, Y+5	; 0x05
    1846:	81 11       	cpse	r24, r1
    1848:	65 c0       	rjmp	.+202    	; 0x1914 <main+0x25a>
			//clrScr();
			if(hs_first_enter) { //bez ovoga ostanu stvari od proslog page-a nez zas iako sam gore u back buttonu stavio clrScr()
    184a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <hs_first_enter>
    184e:	88 23       	and	r24, r24
    1850:	21 f0       	breq	.+8      	; 0x185a <main+0x1a0>
				clrScr();
    1852:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
				hs_first_enter = 0;
    1856:	20 92 b7 01 	sts	0x01B7, r2	; 0x8001b7 <hs_first_enter>
			}
			drawHomeScreen();
    185a:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z14drawHomeScreenv>
			if(get_bit(PINB, T_IRQ) == 0) {
    185e:	b0 99       	sbic	0x16, 0	; 22
    1860:	f1 cf       	rjmp	.-30     	; 0x1844 <main+0x18a>
				read_touch_coords(&TP_X, &TP_Y);
    1862:	be 01       	movw	r22, r28
    1864:	6d 5f       	subi	r22, 0xFD	; 253
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	ce 01       	movw	r24, r28
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				if(check_touch(TP_X, TP_Y, HS_S_Y, HS_S_X, HS_H, HS_W)) { //NEW_PLAYER
    1870:	6b 81       	ldd	r22, Y+3	; 0x03
    1872:	7c 81       	ldd	r23, Y+4	; 0x04
    1874:	0f 2e       	mov	r0, r31
    1876:	f8 e1       	ldi	r31, 0x18	; 24
    1878:	ef 2e       	mov	r14, r31
    187a:	ff 24       	eor	r15, r15
    187c:	f3 94       	inc	r15
    187e:	f0 2d       	mov	r31, r0
    1880:	0c e3       	ldi	r16, 0x3C	; 60
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	24 e1       	ldi	r18, 0x14	; 20
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a e0       	ldi	r20, 0x0A	; 10
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1894:	88 23       	and	r24, r24
    1896:	31 f0       	breq	.+12     	; 0x18a4 <main+0x1ea>
					clrScr();
    1898:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
					hs_first_enter = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <hs_first_enter>
					currentPage = NEW_PLAYER;
    18a2:	8d 83       	std	Y+5, r24	; 0x05
				}
				if(check_touch(TP_X, TP_Y, CP_Y, CP_X, CP_H, CP_W)) { //CHOOSE_PLAYER
    18a4:	6b 81       	ldd	r22, Y+3	; 0x03
    18a6:	7c 81       	ldd	r23, Y+4	; 0x04
    18a8:	0f 2e       	mov	r0, r31
    18aa:	f8 e1       	ldi	r31, 0x18	; 24
    18ac:	ef 2e       	mov	r14, r31
    18ae:	ff 24       	eor	r15, r15
    18b0:	f3 94       	inc	r15
    18b2:	f0 2d       	mov	r31, r0
    18b4:	0c e3       	ldi	r16, 0x3C	; 60
    18b6:	10 e0       	ldi	r17, 0x00	; 0
    18b8:	24 e1       	ldi	r18, 0x14	; 20
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e5       	ldi	r20, 0x50	; 80
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    18c8:	88 23       	and	r24, r24
    18ca:	39 f0       	breq	.+14     	; 0x18da <main+0x220>
					clrScr();
    18cc:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
					hs_first_enter = 1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <hs_first_enter>
					currentPage = CHOOSE_PLAYER;
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	8d 83       	std	Y+5, r24	; 0x05
				}
				if(check_touch(TP_X, TP_Y, LB_Y, LB_X, LB_H, LB_W)) { //LEADERBOARDS
    18da:	6b 81       	ldd	r22, Y+3	; 0x03
    18dc:	7c 81       	ldd	r23, Y+4	; 0x04
    18de:	0f 2e       	mov	r0, r31
    18e0:	f8 e1       	ldi	r31, 0x18	; 24
    18e2:	ef 2e       	mov	r14, r31
    18e4:	ff 24       	eor	r15, r15
    18e6:	f3 94       	inc	r15
    18e8:	f0 2d       	mov	r31, r0
    18ea:	0c e3       	ldi	r16, 0x3C	; 60
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	24 e1       	ldi	r18, 0x14	; 20
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	46 e9       	ldi	r20, 0x96	; 150
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    18fe:	88 23       	and	r24, r24
    1900:	09 f4       	brne	.+2      	; 0x1904 <main+0x24a>
    1902:	a0 cf       	rjmp	.-192    	; 0x1844 <main+0x18a>
					clrScr(); //tu da se clear-a da se stalno ne re-cleara
    1904:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
					hs_first_enter = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <hs_first_enter>
					currentPage = LEADERBOARDS;
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	98 cf       	rjmp	.-208    	; 0x1844 <main+0x18a>
				}
			}
		}else if(currentPage == NEW_PLAYER) {
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	09 f0       	breq	.+2      	; 0x191a <main+0x260>
    1918:	36 c1       	rjmp	.+620    	; 0x1b86 <main+0x4cc>
			drawBackButton();
    191a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_Z14drawBackButtonv>
			print_keyboard(str);
    191e:	ce 01       	movw	r24, r28
    1920:	06 96       	adiw	r24, 0x06	; 6
    1922:	0e 94 09 06 	call	0xc12	; 0xc12 <_Z14print_keyboardPc>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players);
    1926:	9e 01       	movw	r18, r28
    1928:	24 5e       	subi	r18, 0xE4	; 228
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	ae 01       	movw	r20, r28
    192e:	4b 5f       	subi	r20, 0xFB	; 251
    1930:	5f 4f       	sbci	r21, 0xFF	; 255
    1932:	be 01       	movw	r22, r28
    1934:	6d 5f       	subi	r22, 0xFD	; 253
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	ce 01       	movw	r24, r28
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z22checkBackButtonPressedPjS_PhP6Player>
			drawDeleteButton();
    1940:	0e 94 2b 09 	call	0x1256	; 0x1256 <_Z16drawDeleteButtonv>
			drawOKButton();
    1944:	0e 94 05 09 	call	0x120a	; 0x120a <_Z12drawOKButtonv>
				
			if(get_bit(PINB, T_IRQ) == 0) {
    1948:	b0 99       	sbic	0x16, 0	; 22
    194a:	7c cf       	rjmp	.-264    	; 0x1844 <main+0x18a>
				read_touch_coords(&TP_X, &TP_Y);
    194c:	be 01       	movw	r22, r28
    194e:	6d 5f       	subi	r22, 0xFD	; 253
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
					if(check_touch(TP_X, TP_Y, KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    195a:	8b 80       	ldd	r8, Y+3	; 0x03
    195c:	9c 80       	ldd	r9, Y+4	; 0x04
    195e:	a9 80       	ldd	r10, Y+1	; 0x01
    1960:	ba 80       	ldd	r11, Y+2	; 0x02
			drawDeleteButton();
			drawOKButton();
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1962:	71 2c       	mov	r7, r1
					if(check_touch(TP_X, TP_Y, KEY_Y + i/9 * (KEY_H + BLANK_SPACE/2), KEY_X + i%9*(BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    1964:	0f 2e       	mov	r0, r31
    1966:	f9 e3       	ldi	r31, 0x39	; 57
    1968:	5f 2e       	mov	r5, r31
    196a:	f0 2d       	mov	r31, r0
    196c:	0f 2e       	mov	r0, r31
    196e:	f3 e2       	ldi	r31, 0x23	; 35
    1970:	6f 2e       	mov	r6, r31
    1972:	f0 2d       	mov	r31, r0
    1974:	75 9c       	mul	r7, r5
    1976:	41 2d       	mov	r20, r1
    1978:	11 24       	eor	r1, r1
    197a:	46 95       	lsr	r20
    197c:	84 2f       	mov	r24, r20
    197e:	88 0f       	add	r24, r24
    1980:	88 0f       	add	r24, r24
    1982:	88 0f       	add	r24, r24
    1984:	84 0f       	add	r24, r20
    1986:	27 2d       	mov	r18, r7
    1988:	28 1b       	sub	r18, r24
    198a:	62 9e       	mul	r6, r18
    198c:	90 01       	movw	r18, r0
    198e:	11 24       	eor	r1, r1
    1990:	26 5f       	subi	r18, 0xF6	; 246
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	64 9e       	mul	r6, r20
    1996:	a0 01       	movw	r20, r0
    1998:	11 24       	eor	r1, r1
    199a:	4a 5b       	subi	r20, 0xBA	; 186
    199c:	5f 4f       	sbci	r21, 0xFF	; 255
    199e:	0f 2e       	mov	r0, r31
    19a0:	fe e1       	ldi	r31, 0x1E	; 30
    19a2:	ef 2e       	mov	r14, r31
    19a4:	f1 2c       	mov	r15, r1
    19a6:	f0 2d       	mov	r31, r0
    19a8:	0e e1       	ldi	r16, 0x1E	; 30
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	b4 01       	movw	r22, r8
    19ae:	c5 01       	movw	r24, r10
    19b0:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    19b4:	88 23       	and	r24, r24
    19b6:	61 f1       	breq	.+88     	; 0x1a10 <main+0x356>
						if(newPlayerNameIndex == 6) break; //jer ime ima max 7 char-a
    19b8:	60 90 b8 01 	lds	r6, 0x01B8	; 0x8001b8 <newPlayerNameIndex>
    19bc:	26 e0       	ldi	r18, 0x06	; 6
    19be:	62 16       	cp	r6, r18
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <main+0x30a>
    19c2:	73 c2       	rjmp	.+1254   	; 0x1eaa <main+0x7f0>
						clrScr();
    19c4:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
						newPlayerName[newPlayerNameIndex] = str[i];
    19c8:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <newPlayerNameIndex>
    19cc:	e8 2f       	mov	r30, r24
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	ec 59       	subi	r30, 0x9C	; 156
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	a6 e0       	ldi	r26, 0x06	; 6
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ac 0f       	add	r26, r28
    19da:	bd 1f       	adc	r27, r29
    19dc:	a7 0d       	add	r26, r7
    19de:	b1 1d       	adc	r27, r1
    19e0:	9c 91       	ld	r25, X
    19e2:	90 83       	st	Z, r25
						newPlayerName[newPlayerNameIndex+1] = '\0';
    19e4:	11 82       	std	Z+1, r1	; 0x01
						newPlayerNameIndex++;
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <newPlayerNameIndex>
						print_string(200, 10, 3, WHITE, CYAN, newPlayerName);
    19ec:	0f 2e       	mov	r0, r31
    19ee:	f4 e6       	ldi	r31, 0x64	; 100
    19f0:	ef 2e       	mov	r14, r31
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	ff 2e       	mov	r15, r31
    19f6:	f0 2d       	mov	r31, r0
    19f8:	0e ea       	ldi	r16, 0xAE	; 174
    19fa:	1a e1       	ldi	r17, 0x1A	; 26
    19fc:	2f ef       	ldi	r18, 0xFF	; 255
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	43 e0       	ldi	r20, 0x03	; 3
    1a02:	6a e0       	ldi	r22, 0x0A	; 10
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	88 ec       	ldi	r24, 0xC8	; 200
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
						//_delay_ms(500); //da ne napravi previse ocitanja
						break;
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <main+0x35e>
			drawDeleteButton();
			drawOKButton();
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1a10:	73 94       	inc	r7
    1a12:	46 e1       	ldi	r20, 0x16	; 22
    1a14:	74 12       	cpse	r7, r20
    1a16:	ae cf       	rjmp	.-164    	; 0x1974 <main+0x2ba>
						print_string(200, 10, 3, WHITE, CYAN, newPlayerName);
						//_delay_ms(500); //da ne napravi previse ocitanja
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) {
    1a18:	6b 81       	ldd	r22, Y+3	; 0x03
    1a1a:	7c 81       	ldd	r23, Y+4	; 0x04
    1a1c:	0f 2e       	mov	r0, r31
    1a1e:	fc e3       	ldi	r31, 0x3C	; 60
    1a20:	ef 2e       	mov	r14, r31
    1a22:	f1 2c       	mov	r15, r1
    1a24:	f0 2d       	mov	r31, r0
    1a26:	08 e2       	ldi	r16, 0x28	; 40
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	24 eb       	ldi	r18, 0xB4	; 180
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4e eb       	ldi	r20, 0xBE	; 190
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1a3a:	88 23       	and	r24, r24
    1a3c:	e9 f1       	breq	.+122    	; 0x1ab8 <main+0x3fe>
					if(newPlayerNameIndex > 1) { //znaci da ima jedno slovo, npr A\0
    1a3e:	60 90 b8 01 	lds	r6, 0x01B8	; 0x8001b8 <newPlayerNameIndex>
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	86 15       	cp	r24, r6
    1a46:	e0 f4       	brcc	.+56     	; 0x1a80 <main+0x3c6>
						newPlayerNameIndex--;
    1a48:	6a 94       	dec	r6
    1a4a:	60 92 b8 01 	sts	0x01B8, r6	; 0x8001b8 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = '\0';
    1a4e:	e6 2d       	mov	r30, r6
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	ec 59       	subi	r30, 0x9C	; 156
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	10 82       	st	Z, r1
						clrScr();
    1a58:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
						print_string(200, 10, 3, WHITE, CYAN, newPlayerName);
    1a5c:	0f 2e       	mov	r0, r31
    1a5e:	f4 e6       	ldi	r31, 0x64	; 100
    1a60:	ef 2e       	mov	r14, r31
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	ff 2e       	mov	r15, r31
    1a66:	f0 2d       	mov	r31, r0
    1a68:	0e ea       	ldi	r16, 0xAE	; 174
    1a6a:	1a e1       	ldi	r17, 0x1A	; 26
    1a6c:	2f ef       	ldi	r18, 0xFF	; 255
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	43 e0       	ldi	r20, 0x03	; 3
    1a72:	6a e0       	ldi	r22, 0x0A	; 10
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    1a7e:	1c c0       	rjmp	.+56     	; 0x1ab8 <main+0x3fe>
					}else if(newPlayerNameIndex == 1){ //nema ni jedno slovo, stavim razmak jer inace ako je nulterm bude zbugano
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	69 12       	cpse	r6, r25
    1a84:	19 c0       	rjmp	.+50     	; 0x1ab8 <main+0x3fe>
						newPlayerNameIndex--;
    1a86:	20 92 b8 01 	sts	0x01B8, r2	; 0x8001b8 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = ' ';
    1a8a:	80 e2       	ldi	r24, 0x20	; 32
    1a8c:	e4 e6       	ldi	r30, 0x64	; 100
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 83       	st	Z, r24
						clrScr();
    1a92:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
						print_string(200, 10, 3, WHITE, CYAN, newPlayerName);
    1a96:	0f 2e       	mov	r0, r31
    1a98:	f4 e6       	ldi	r31, 0x64	; 100
    1a9a:	ef 2e       	mov	r14, r31
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	ff 2e       	mov	r15, r31
    1aa0:	f0 2d       	mov	r31, r0
    1aa2:	0e ea       	ldi	r16, 0xAE	; 174
    1aa4:	1a e1       	ldi	r17, 0x1A	; 26
    1aa6:	2f ef       	ldi	r18, 0xFF	; 255
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	43 e0       	ldi	r20, 0x03	; 3
    1aac:	6a e0       	ldi	r22, 0x0A	; 10
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	88 ec       	ldi	r24, 0xC8	; 200
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
					}
					
				}
				
				if(check_touch(TP_X, TP_Y, OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W)) { //OK button
    1ab8:	6b 81       	ldd	r22, Y+3	; 0x03
    1aba:	7c 81       	ldd	r23, Y+4	; 0x04
    1abc:	0f 2e       	mov	r0, r31
    1abe:	fc e3       	ldi	r31, 0x3C	; 60
    1ac0:	ef 2e       	mov	r14, r31
    1ac2:	f1 2c       	mov	r15, r1
    1ac4:	f0 2d       	mov	r31, r0
    1ac6:	08 e2       	ldi	r16, 0x28	; 40
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	2a ef       	ldi	r18, 0xFA	; 250
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4e eb       	ldi	r20, 0xBE	; 190
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <main+0x426>
    1ade:	b2 ce       	rjmp	.-668    	; 0x1844 <main+0x18a>
					//create player i da se vrati na homescreen
					if(players_size == 4 || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
    1ae0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <players_size>
    1ae4:	34 30       	cpi	r19, 0x04	; 4
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <main+0x430>
    1ae8:	ad ce       	rjmp	.-678    	; 0x1844 <main+0x18a>
    1aea:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <newPlayerNameIndex>
    1aee:	44 23       	and	r20, r20
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <main+0x43a>
    1af2:	a8 ce       	rjmp	.-688    	; 0x1844 <main+0x18a>
    1af4:	20 e0       	ldi	r18, 0x00	; 0
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1af6:	e4 e6       	ldi	r30, 0x64	; 100
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	01 90       	ld	r0, Z+
    1afc:	00 20       	and	r0, r0
    1afe:	e9 f7       	brne	.-6      	; 0x1afa <main+0x440>
    1b00:	31 97       	sbiw	r30, 0x01	; 1
    1b02:	e4 56       	subi	r30, 0x64	; 100
    1b04:	f0 40       	sbci	r31, 0x00	; 0
    1b06:	82 2f       	mov	r24, r18
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	8e 17       	cp	r24, r30
    1b0c:	9f 07       	cpc	r25, r31
    1b0e:	68 f4       	brcc	.+26     	; 0x1b2a <main+0x470>
						newPlayer.name[i] = newPlayerName[i];
    1b10:	e4 e7       	ldi	r30, 0x74	; 116
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	ec 0f       	add	r30, r28
    1b16:	fd 1f       	adc	r31, r29
    1b18:	e8 0f       	add	r30, r24
    1b1a:	f9 1f       	adc	r31, r25
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	ac 59       	subi	r26, 0x9C	; 156
    1b20:	bf 4f       	sbci	r27, 0xFF	; 255
    1b22:	8c 91       	ld	r24, X
    1b24:	84 83       	std	Z+4, r24	; 0x04
				if(check_touch(TP_X, TP_Y, OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W)) { //OK button
					//create player i da se vrati na homescreen
					if(players_size == 4 || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1b26:	2f 5f       	subi	r18, 0xFF	; 255
    1b28:	e6 cf       	rjmp	.-52     	; 0x1af6 <main+0x43c>
						newPlayer.name[i] = newPlayerName[i];
					}
					newPlayer.name[newPlayerNameIndex] = '\0';
    1b2a:	e4 e7       	ldi	r30, 0x74	; 116
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	ec 0f       	add	r30, r28
    1b30:	fd 1f       	adc	r31, r29
    1b32:	e4 0f       	add	r30, r20
    1b34:	f1 1d       	adc	r31, r1
    1b36:	14 82       	std	Z+4, r1	; 0x04
					newPlayer.points = 0;
					newPlayer.clicked = 0;
					newPlayer.color = WHITE;
					players[players_size] = newPlayer;
    1b38:	e5 96       	adiw	r28, 0x35	; 53
    1b3a:	1f ae       	std	Y+63, r1	; 0x3f
    1b3c:	e5 97       	sbiw	r28, 0x35	; 53
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	9f ef       	ldi	r25, 0xFF	; 255
    1b42:	e7 96       	adiw	r28, 0x37	; 55
    1b44:	9f af       	std	Y+63, r25	; 0x3f
    1b46:	8e af       	std	Y+62, r24	; 0x3e
    1b48:	e7 97       	sbiw	r28, 0x37	; 55
    1b4a:	e8 96       	adiw	r28, 0x38	; 56
    1b4c:	1f ae       	std	Y+63, r1	; 0x3f
    1b4e:	e8 97       	sbiw	r28, 0x38	; 56
    1b50:	a1 e0       	ldi	r26, 0x01	; 1
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ac 0f       	add	r26, r28
    1b56:	bd 1f       	adc	r27, r29
    1b58:	9b e0       	ldi	r25, 0x0B	; 11
    1b5a:	39 9f       	mul	r19, r25
    1b5c:	a0 0d       	add	r26, r0
    1b5e:	b1 1d       	adc	r27, r1
    1b60:	11 24       	eor	r1, r1
    1b62:	5b 96       	adiw	r26, 0x1b	; 27
    1b64:	8b e0       	ldi	r24, 0x0B	; 11
    1b66:	fe 01       	movw	r30, r28
    1b68:	ec 58       	subi	r30, 0x8C	; 140
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	01 90       	ld	r0, Z+
    1b6e:	0d 92       	st	X+, r0
    1b70:	8a 95       	dec	r24
    1b72:	e1 f7       	brne	.-8      	; 0x1b6c <main+0x4b2>
					players_size++;
    1b74:	3f 5f       	subi	r19, 0xFF	; 255
    1b76:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <players_size>
					resetNewPlayerName();
    1b7a:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z18resetNewPlayerNamev>
					clrScr();
    1b7e:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
					currentPage = HOMESCREEN;
    1b82:	2d 82       	std	Y+5, r2	; 0x05
    1b84:	5f ce       	rjmp	.-834    	; 0x1844 <main+0x18a>
				}
			}
			
		}else if(currentPage == CHOOSE_PLAYER) {
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <main+0x4d2>
    1b8a:	f6 c0       	rjmp	.+492    	; 0x1d78 <main+0x6be>
			drawBackButton();
    1b8c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players);
    1b90:	9e 01       	movw	r18, r28
    1b92:	24 5e       	subi	r18, 0xE4	; 228
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	ae 01       	movw	r20, r28
    1b98:	4b 5f       	subi	r20, 0xFB	; 251
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	be 01       	movw	r22, r28
    1b9e:	6d 5f       	subi	r22, 0xFD	; 253
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z22checkBackButtonPressedPjS_PhP6Player>
			showPlayers(players, players_size);
    1baa:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <players_size>
    1bae:	ce 01       	movw	r24, r28
    1bb0:	4c 96       	adiw	r24, 0x1c	; 28
    1bb2:	0e 94 83 08 	call	0x1106	; 0x1106 <_Z11showPlayersP6Playerh>
			drawStartButton();
    1bb6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_Z15drawStartButtonv>
			
			if (get_bit(PINB, T_IRQ) == 0) {
    1bba:	b0 99       	sbic	0x16, 0	; 22
    1bbc:	43 ce       	rjmp	.-890    	; 0x1844 <main+0x18a>
				read_touch_coords(&TP_X, &TP_Y);
    1bbe:	be 01       	movw	r22, r28
    1bc0:	6d 5f       	subi	r22, 0xFD	; 253
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1bcc:	60 90 63 00 	lds	r6, 0x0063	; 0x800063 <players_size>
    1bd0:	66 20       	and	r6, r6
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <main+0x51c>
    1bd4:	ae c0       	rjmp	.+348    	; 0x1d32 <main+0x678>
					tmp = i > 1 ? 50 : 0;
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1bd6:	8b 80       	ldd	r8, Y+3	; 0x03
    1bd8:	9c 80       	ldd	r9, Y+4	; 0x04
    1bda:	a9 80       	ldd	r10, Y+1	; 0x01
    1bdc:	ba 80       	ldd	r11, Y+2	; 0x02
    1bde:	71 2c       	mov	r7, r1
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1be0:	42 2d       	mov	r20, r2
    1be2:	0a c0       	rjmp	.+20     	; 0x1bf8 <main+0x53e>
    1be4:	e1 e0       	ldi	r30, 0x01	; 1
    1be6:	e7 15       	cp	r30, r7
    1be8:	30 f0       	brcs	.+12     	; 0x1bf6 <main+0x53c>
    1bea:	c1 58       	subi	r28, 0x81	; 129
    1bec:	df 4f       	sbci	r29, 0xFF	; 255
    1bee:	48 81       	ld	r20, Y
    1bf0:	cf 57       	subi	r28, 0x7F	; 127
    1bf2:	d0 40       	sbci	r29, 0x00	; 0
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <main+0x53e>
    1bf6:	42 e3       	ldi	r20, 0x32	; 50
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1bf8:	70 fa       	bst	r7, 0
    1bfa:	cc 24       	eor	r12, r12
    1bfc:	c0 f8       	bld	r12, 0
    1bfe:	d1 2c       	mov	r13, r1
    1c00:	3c 9c       	mul	r3, r12
    1c02:	90 01       	movw	r18, r0
    1c04:	3d 9c       	mul	r3, r13
    1c06:	30 0d       	add	r19, r0
    1c08:	11 24       	eor	r1, r1
    1c0a:	2c 5e       	subi	r18, 0xEC	; 236
    1c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	4a 5b       	subi	r20, 0xBA	; 186
    1c12:	5f 4f       	sbci	r21, 0xFF	; 255
    1c14:	0f 2e       	mov	r0, r31
    1c16:	f8 e7       	ldi	r31, 0x78	; 120
    1c18:	ef 2e       	mov	r14, r31
    1c1a:	f1 2c       	mov	r15, r1
    1c1c:	f0 2d       	mov	r31, r0
    1c1e:	08 e2       	ldi	r16, 0x28	; 40
    1c20:	10 e0       	ldi	r17, 0x00	; 0
    1c22:	b4 01       	movw	r22, r8
    1c24:	c5 01       	movw	r24, r10
    1c26:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1c2a:	88 23       	and	r24, r24
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <main+0x576>
    1c2e:	7e c0       	rjmp	.+252    	; 0x1d2c <main+0x672>
						if(players[i].color == WHITE && cross_chosen == 5) {
    1c30:	27 2d       	mov	r18, r7
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	e1 e0       	ldi	r30, 0x01	; 1
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ec 0f       	add	r30, r28
    1c3a:	fd 1f       	adc	r31, r29
    1c3c:	4b e0       	ldi	r20, 0x0B	; 11
    1c3e:	74 9e       	mul	r7, r20
    1c40:	e0 0d       	add	r30, r0
    1c42:	f1 1d       	adc	r31, r1
    1c44:	11 24       	eor	r1, r1
    1c46:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c48:	95 8d       	ldd	r25, Z+29	; 0x1d
    1c4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4c:	ef ef       	ldi	r30, 0xFF	; 255
    1c4e:	9e 07       	cpc	r25, r30
    1c50:	99 f5       	brne	.+102    	; 0x1cb8 <main+0x5fe>
    1c52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cross_chosen>
    1c56:	85 30       	cpi	r24, 0x05	; 5
    1c58:	a9 f4       	brne	.+42     	; 0x1c84 <main+0x5ca>
							players[i].color = RED;
    1c5a:	8b e0       	ldi	r24, 0x0B	; 11
    1c5c:	82 9f       	mul	r24, r18
    1c5e:	f0 01       	movw	r30, r0
    1c60:	83 9f       	mul	r24, r19
    1c62:	f0 0d       	add	r31, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	8c 0f       	add	r24, r28
    1c6c:	9d 1f       	adc	r25, r29
    1c6e:	e8 0f       	add	r30, r24
    1c70:	f9 1f       	adc	r31, r25
    1c72:	89 e6       	ldi	r24, 0x69	; 105
    1c74:	93 ed       	ldi	r25, 0xD3	; 211
    1c76:	95 8f       	std	Z+29, r25	; 0x1d
    1c78:	84 8f       	std	Z+28, r24	; 0x1c
							players[i].clicked = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	86 8f       	std	Z+30, r24	; 0x1e
							cross_chosen = i;
    1c7e:	70 92 62 00 	sts	0x0062, r7	; 0x800062 <cross_chosen>
    1c82:	4a c0       	rjmp	.+148    	; 0x1d18 <main+0x65e>
						}else if(players[i].color == WHITE && cross_chosen != 5 && nought_chosen == 5) {
    1c84:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <nought_chosen>
    1c88:	85 30       	cpi	r24, 0x05	; 5
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <main+0x5d4>
    1c8c:	45 c0       	rjmp	.+138    	; 0x1d18 <main+0x65e>
							players[i].color = GREEN;
    1c8e:	8b e0       	ldi	r24, 0x0B	; 11
    1c90:	82 9f       	mul	r24, r18
    1c92:	f0 01       	movw	r30, r0
    1c94:	83 9f       	mul	r24, r19
    1c96:	f0 0d       	add	r31, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	8c 0f       	add	r24, r28
    1ca0:	9d 1f       	adc	r25, r29
    1ca2:	e8 0f       	add	r30, r24
    1ca4:	f9 1f       	adc	r31, r25
    1ca6:	8b e2       	ldi	r24, 0x2B	; 43
    1ca8:	97 ec       	ldi	r25, 0xC7	; 199
    1caa:	95 8f       	std	Z+29, r25	; 0x1d
    1cac:	84 8f       	std	Z+28, r24	; 0x1c
							players[i].clicked = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	86 8f       	std	Z+30, r24	; 0x1e
							nought_chosen = i;
    1cb2:	70 92 61 00 	sts	0x0061, r7	; 0x800061 <nought_chosen>
    1cb6:	30 c0       	rjmp	.+96     	; 0x1d18 <main+0x65e>
						}else if(players[i].color == RED) {
    1cb8:	89 36       	cpi	r24, 0x69	; 105
    1cba:	e3 ed       	ldi	r30, 0xD3	; 211
    1cbc:	9e 07       	cpc	r25, r30
    1cbe:	a9 f4       	brne	.+42     	; 0x1cea <main+0x630>
							players[i].color = WHITE;
    1cc0:	8b e0       	ldi	r24, 0x0B	; 11
    1cc2:	82 9f       	mul	r24, r18
    1cc4:	f0 01       	movw	r30, r0
    1cc6:	83 9f       	mul	r24, r19
    1cc8:	f0 0d       	add	r31, r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	8c 0f       	add	r24, r28
    1cd2:	9d 1f       	adc	r25, r29
    1cd4:	e8 0f       	add	r30, r24
    1cd6:	f9 1f       	adc	r31, r25
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	9f ef       	ldi	r25, 0xFF	; 255
    1cdc:	95 8f       	std	Z+29, r25	; 0x1d
    1cde:	84 8f       	std	Z+28, r24	; 0x1c
							cross_chosen = 5;
    1ce0:	85 e0       	ldi	r24, 0x05	; 5
    1ce2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cross_chosen>
							players[i].clicked = 0;
    1ce6:	16 8e       	std	Z+30, r1	; 0x1e
    1ce8:	17 c0       	rjmp	.+46     	; 0x1d18 <main+0x65e>
						}else if(players[i].color == GREEN) {
    1cea:	8b 32       	cpi	r24, 0x2B	; 43
    1cec:	97 4c       	sbci	r25, 0xC7	; 199
    1cee:	a1 f4       	brne	.+40     	; 0x1d18 <main+0x65e>
							players[i].color = WHITE;
    1cf0:	8b e0       	ldi	r24, 0x0B	; 11
    1cf2:	82 9f       	mul	r24, r18
    1cf4:	f0 01       	movw	r30, r0
    1cf6:	83 9f       	mul	r24, r19
    1cf8:	f0 0d       	add	r31, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	8c 0f       	add	r24, r28
    1d02:	9d 1f       	adc	r25, r29
    1d04:	e8 0f       	add	r30, r24
    1d06:	f9 1f       	adc	r31, r25
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	9f ef       	ldi	r25, 0xFF	; 255
    1d0c:	95 8f       	std	Z+29, r25	; 0x1d
    1d0e:	84 8f       	std	Z+28, r24	; 0x1c
							nought_chosen = 5;
    1d10:	85 e0       	ldi	r24, 0x05	; 5
    1d12:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <nought_chosen>
							players[i].clicked = 0;
    1d16:	16 8e       	std	Z+30, r1	; 0x1e
    1d18:	9f ef       	ldi	r25, 0xFF	; 255
    1d1a:	ef e1       	ldi	r30, 0x1F	; 31
    1d1c:	f1 e0       	ldi	r31, 0x01	; 1
    1d1e:	91 50       	subi	r25, 0x01	; 1
    1d20:	e0 40       	sbci	r30, 0x00	; 0
    1d22:	f0 40       	sbci	r31, 0x00	; 0
    1d24:	e1 f7       	brne	.-8      	; 0x1d1e <main+0x664>
    1d26:	00 c0       	rjmp	.+0      	; 0x1d28 <main+0x66e>
    1d28:	00 00       	nop
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <main+0x678>
			drawStartButton();
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1d2c:	73 94       	inc	r7
    1d2e:	76 10       	cpse	r7, r6
    1d30:	59 cf       	rjmp	.-334    	; 0x1be4 <main+0x52a>
						_delay_ms(50); //da ne napravi 2 ocitanja
						break;
					}
				}
				
				if(check_touch(TP_X, TP_Y, START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W)) {
    1d32:	6b 81       	ldd	r22, Y+3	; 0x03
    1d34:	7c 81       	ldd	r23, Y+4	; 0x04
    1d36:	0f 2e       	mov	r0, r31
    1d38:	fa e5       	ldi	r31, 0x5A	; 90
    1d3a:	ef 2e       	mov	r14, r31
    1d3c:	f1 2c       	mov	r15, r1
    1d3e:	f0 2d       	mov	r31, r0
    1d40:	08 e2       	ldi	r16, 0x28	; 40
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	2c ed       	ldi	r18, 0xDC	; 220
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4e eb       	ldi	r20, 0xBE	; 190
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1d54:	88 23       	and	r24, r24
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <main+0x6a0>
    1d58:	75 cd       	rjmp	.-1302   	; 0x1844 <main+0x18a>
					if(cross_chosen != 5 && nought_chosen != 5){ //ne moze uc u game ako nije odabrao dvojicu
    1d5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cross_chosen>
    1d5e:	85 30       	cpi	r24, 0x05	; 5
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <main+0x6aa>
    1d62:	70 cd       	rjmp	.-1312   	; 0x1844 <main+0x18a>
    1d64:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <nought_chosen>
    1d68:	85 30       	cpi	r24, 0x05	; 5
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <main+0x6b4>
    1d6c:	6b cd       	rjmp	.-1322   	; 0x1844 <main+0x18a>
						clrScr();
    1d6e:	0e 94 0c 07 	call	0xe18	; 0xe18 <_Z6clrScrv>
						currentPage = GAME;
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	66 cd       	rjmp	.-1332   	; 0x1844 <main+0x18a>
					}
				}
			}
		}else if(currentPage == LEADERBOARDS) {
    1d78:	83 30       	cpi	r24, 0x03	; 3
    1d7a:	b1 f4       	brne	.+44     	; 0x1da8 <main+0x6ee>
			drawBackButton();
    1d7c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players);
    1d80:	9e 01       	movw	r18, r28
    1d82:	24 5e       	subi	r18, 0xE4	; 228
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
    1d86:	ae 01       	movw	r20, r28
    1d88:	4b 5f       	subi	r20, 0xFB	; 251
    1d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8c:	be 01       	movw	r22, r28
    1d8e:	6d 5f       	subi	r22, 0xFD	; 253
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z22checkBackButtonPressedPjS_PhP6Player>
			//printLeaderboards(players, sizeof(players) / sizeof(players[0])); //moras prije nego saljes u funkciju jer se u funkciju salje samo pointer, ali ovo ce ti poslat za koliko njih je alocirano mjesta, a ne koliko ih je stvarno unutra
			printLeaderboards(players, players_size);
    1d9a:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <players_size>
    1d9e:	ce 01       	movw	r24, r28
    1da0:	4c 96       	adiw	r24, 0x1c	; 28
    1da2:	0e 94 0f 08 	call	0x101e	; 0x101e <_Z17printLeaderboardsP6Playerh>
    1da6:	4e cd       	rjmp	.-1380   	; 0x1844 <main+0x18a>
		}else if(currentPage == GAME) {
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	09 f0       	breq	.+2      	; 0x1dae <main+0x6f4>
    1dac:	4b cd       	rjmp	.-1386   	; 0x1844 <main+0x18a>
			drawBackButton();
    1dae:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players);
    1db2:	9e 01       	movw	r18, r28
    1db4:	24 5e       	subi	r18, 0xE4	; 228
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	ae 01       	movw	r20, r28
    1dba:	4b 5f       	subi	r20, 0xFB	; 251
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	be 01       	movw	r22, r28
    1dc0:	6d 5f       	subi	r22, 0xFD	; 253
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z22checkBackButtonPressedPjS_PhP6Player>
			//print_string(200, 200, 3, WHITE, CYAN, "BOK\0"); //maknut
			drawNames(players);
    1dcc:	ce 01       	movw	r24, r28
    1dce:	4c 96       	adiw	r24, 0x1c	; 28
    1dd0:	0e 94 77 09 	call	0x12ee	; 0x12ee <_Z9drawNamesP6Player>
			drawGrid();
    1dd4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <_Z8drawGridv>
			
			if(gameOver) continue;
    1dd8:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameOver>
    1ddc:	81 11       	cpse	r24, r1
    1dde:	32 cd       	rjmp	.-1436   	; 0x1844 <main+0x18a>
			
			checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
    1de0:	ce 01       	movw	r24, r28
    1de2:	4c 96       	adiw	r24, 0x1c	; 28
    1de4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_Z13checkGameOverP6Player>
			drawTurn(players);		
    1de8:	ce 01       	movw	r24, r28
    1dea:	4c 96       	adiw	r24, 0x1c	; 28
    1dec:	0e 94 05 0a 	call	0x140a	; 0x140a <_Z8drawTurnP6Player>
			if (get_bit(PINB, T_IRQ) == 0) {
    1df0:	b0 99       	sbic	0x16, 0	; 22
    1df2:	28 cd       	rjmp	.-1456   	; 0x1844 <main+0x18a>
				read_touch_coords(&TP_X, &TP_Y);
    1df4:	be 01       	movw	r22, r28
    1df6:	6d 5f       	subi	r22, 0xFD	; 253
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
    1e02:	0f 2e       	mov	r0, r31
    1e04:	fe ea       	ldi	r31, 0xAE	; 174
    1e06:	4f 2e       	mov	r4, r31
    1e08:	f1 e0       	ldi	r31, 0x01	; 1
    1e0a:	5f 2e       	mov	r5, r31
    1e0c:	f0 2d       	mov	r31, r0
    1e0e:	0f 2e       	mov	r0, r31
    1e10:	fe e6       	ldi	r31, 0x6E	; 110
    1e12:	6f 2e       	mov	r6, r31
    1e14:	71 2c       	mov	r7, r1
    1e16:	f0 2d       	mov	r31, r0
					for(uint8_t j = 0; j < 3; j++) {
						if(check_touch(TP_X, TP_Y, 10+45-5 + j*62, 110 + i*62, 62, 62)) {
							if(board[i][j] == EMPTY) { //ovo sa konstantama
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
								numberOfMoves++;
								currentPlayer = drawOnGrid(10+45-5 + j*62, 110 + i*62); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
    1e18:	c0 58       	subi	r28, 0x80	; 128
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	68 82       	st	Y, r6
    1e1e:	c0 58       	subi	r28, 0x80	; 128
    1e20:	d0 40       	sbci	r29, 0x00	; 0
    1e22:	42 01       	movw	r8, r4
    1e24:	0f 2e       	mov	r0, r31
    1e26:	f2 e3       	ldi	r31, 0x32	; 50
    1e28:	af 2e       	mov	r10, r31
    1e2a:	b1 2c       	mov	r11, r1
    1e2c:	f0 2d       	mov	r31, r0
			drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
						if(check_touch(TP_X, TP_Y, 10+45-5 + j*62, 110 + i*62, 62, 62)) {
    1e2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e30:	7c 81       	ldd	r23, Y+4	; 0x04
    1e32:	0f 2e       	mov	r0, r31
    1e34:	fe e3       	ldi	r31, 0x3E	; 62
    1e36:	ef 2e       	mov	r14, r31
    1e38:	f1 2c       	mov	r15, r1
    1e3a:	f0 2d       	mov	r31, r0
    1e3c:	0e e3       	ldi	r16, 0x3E	; 62
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	93 01       	movw	r18, r6
    1e42:	a5 01       	movw	r20, r10
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1e4c:	88 23       	and	r24, r24
    1e4e:	b1 f0       	breq	.+44     	; 0x1e7c <main+0x7c2>
							if(board[i][j] == EMPTY) { //ovo sa konstantama
    1e50:	f4 01       	movw	r30, r8
    1e52:	80 81       	ld	r24, Z
    1e54:	81 11       	cpse	r24, r1
    1e56:	12 c0       	rjmp	.+36     	; 0x1e7c <main+0x7c2>
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
    1e58:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1e5c:	80 83       	st	Z, r24
								numberOfMoves++;
    1e5e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
								currentPlayer = drawOnGrid(10+45-5 + j*62, 110 + i*62); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
    1e68:	c0 58       	subi	r28, 0x80	; 128
    1e6a:	df 4f       	sbci	r29, 0xFF	; 255
    1e6c:	68 81       	ld	r22, Y
    1e6e:	c0 58       	subi	r28, 0x80	; 128
    1e70:	d0 40       	sbci	r29, 0x00	; 0
    1e72:	8a 2d       	mov	r24, r10
    1e74:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_Z10drawOnGridhh>
    1e78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    1e7c:	fe e3       	ldi	r31, 0x3E	; 62
    1e7e:	af 0e       	add	r10, r31
    1e80:	b1 1c       	adc	r11, r1
    1e82:	2f ef       	ldi	r18, 0xFF	; 255
    1e84:	82 1a       	sub	r8, r18
    1e86:	92 0a       	sbc	r9, r18
			checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
    1e88:	4c ee       	ldi	r20, 0xEC	; 236
    1e8a:	a4 16       	cp	r10, r20
    1e8c:	b1 04       	cpc	r11, r1
    1e8e:	79 f6       	brne	.-98     	; 0x1e2e <main+0x774>
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	48 0e       	add	r4, r24
    1e94:	51 1c       	adc	r5, r1
    1e96:	9e e3       	ldi	r25, 0x3E	; 62
    1e98:	69 0e       	add	r6, r25
    1e9a:	71 1c       	adc	r7, r1
			
			checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
    1e9c:	e8 e2       	ldi	r30, 0x28	; 40
    1e9e:	6e 16       	cp	r6, r30
    1ea0:	e1 e0       	ldi	r30, 0x01	; 1
    1ea2:	7e 06       	cpc	r7, r30
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <main+0x7ee>
    1ea6:	b8 cf       	rjmp	.-144    	; 0x1e18 <main+0x75e>
    1ea8:	cd cc       	rjmp	.-1638   	; 0x1844 <main+0x18a>
						print_string(200, 10, 3, WHITE, CYAN, newPlayerName);
						//_delay_ms(500); //da ne napravi previse ocitanja
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) {
    1eaa:	0f 2e       	mov	r0, r31
    1eac:	fc e3       	ldi	r31, 0x3C	; 60
    1eae:	ef 2e       	mov	r14, r31
    1eb0:	f1 2c       	mov	r15, r1
    1eb2:	f0 2d       	mov	r31, r0
    1eb4:	08 e2       	ldi	r16, 0x28	; 40
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	24 eb       	ldi	r18, 0xB4	; 180
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4e eb       	ldi	r20, 0xBE	; 190
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	b4 01       	movw	r22, r8
    1ec2:	c5 01       	movw	r24, r10
    1ec4:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z11check_touchjjjjjj>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <main+0x814>
    1ecc:	f5 cd       	rjmp	.-1046   	; 0x1ab8 <main+0x3fe>
    1ece:	bc cd       	rjmp	.-1160   	; 0x1a48 <main+0x38e>

00001ed0 <__umulhisi3>:
    1ed0:	a2 9f       	mul	r26, r18
    1ed2:	b0 01       	movw	r22, r0
    1ed4:	b3 9f       	mul	r27, r19
    1ed6:	c0 01       	movw	r24, r0
    1ed8:	a3 9f       	mul	r26, r19
    1eda:	70 0d       	add	r23, r0
    1edc:	81 1d       	adc	r24, r1
    1ede:	11 24       	eor	r1, r1
    1ee0:	91 1d       	adc	r25, r1
    1ee2:	b2 9f       	mul	r27, r18
    1ee4:	70 0d       	add	r23, r0
    1ee6:	81 1d       	adc	r24, r1
    1ee8:	11 24       	eor	r1, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	08 95       	ret

00001eee <sprintf>:
    1eee:	ae e0       	ldi	r26, 0x0E	; 14
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ed e7       	ldi	r30, 0x7D	; 125
    1ef4:	ff e0       	ldi	r31, 0x0F	; 15
    1ef6:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__prologue_saves__+0x1c>
    1efa:	0d 89       	ldd	r16, Y+21	; 0x15
    1efc:	1e 89       	ldd	r17, Y+22	; 0x16
    1efe:	86 e0       	ldi	r24, 0x06	; 6
    1f00:	8c 83       	std	Y+4, r24	; 0x04
    1f02:	1a 83       	std	Y+2, r17	; 0x02
    1f04:	09 83       	std	Y+1, r16	; 0x01
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
    1f08:	9f e7       	ldi	r25, 0x7F	; 127
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	ae 01       	movw	r20, r28
    1f10:	47 5e       	subi	r20, 0xE7	; 231
    1f12:	5f 4f       	sbci	r21, 0xFF	; 255
    1f14:	6f 89       	ldd	r22, Y+23	; 0x17
    1f16:	78 8d       	ldd	r23, Y+24	; 0x18
    1f18:	ce 01       	movw	r24, r28
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <vfprintf>
    1f20:	ef 81       	ldd	r30, Y+7	; 0x07
    1f22:	f8 85       	ldd	r31, Y+8	; 0x08
    1f24:	e0 0f       	add	r30, r16
    1f26:	f1 1f       	adc	r31, r17
    1f28:	10 82       	st	Z, r1
    1f2a:	2e 96       	adiw	r28, 0x0e	; 14
    1f2c:	e4 e0       	ldi	r30, 0x04	; 4
    1f2e:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__epilogue_restores__+0x1c>

00001f32 <vfprintf>:
    1f32:	ab e0       	ldi	r26, 0x0B	; 11
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e9       	ldi	r30, 0x9F	; 159
    1f38:	ff e0       	ldi	r31, 0x0F	; 15
    1f3a:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__prologue_saves__>
    1f3e:	6c 01       	movw	r12, r24
    1f40:	7b 01       	movw	r14, r22
    1f42:	8a 01       	movw	r16, r20
    1f44:	fc 01       	movw	r30, r24
    1f46:	17 82       	std	Z+7, r1	; 0x07
    1f48:	16 82       	std	Z+6, r1	; 0x06
    1f4a:	83 81       	ldd	r24, Z+3	; 0x03
    1f4c:	81 ff       	sbrs	r24, 1
    1f4e:	cc c1       	rjmp	.+920    	; 0x22e8 <vfprintf+0x3b6>
    1f50:	ce 01       	movw	r24, r28
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	3c 01       	movw	r6, r24
    1f56:	f6 01       	movw	r30, r12
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	93 fd       	sbrc	r25, 3
    1f5e:	85 91       	lpm	r24, Z+
    1f60:	93 ff       	sbrs	r25, 3
    1f62:	81 91       	ld	r24, Z+
    1f64:	7f 01       	movw	r14, r30
    1f66:	88 23       	and	r24, r24
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <vfprintf+0x3a>
    1f6a:	ba c1       	rjmp	.+884    	; 0x22e0 <vfprintf+0x3ae>
    1f6c:	85 32       	cpi	r24, 0x25	; 37
    1f6e:	39 f4       	brne	.+14     	; 0x1f7e <vfprintf+0x4c>
    1f70:	93 fd       	sbrc	r25, 3
    1f72:	85 91       	lpm	r24, Z+
    1f74:	93 ff       	sbrs	r25, 3
    1f76:	81 91       	ld	r24, Z+
    1f78:	7f 01       	movw	r14, r30
    1f7a:	85 32       	cpi	r24, 0x25	; 37
    1f7c:	29 f4       	brne	.+10     	; 0x1f88 <vfprintf+0x56>
    1f7e:	b6 01       	movw	r22, r12
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    1f86:	e7 cf       	rjmp	.-50     	; 0x1f56 <vfprintf+0x24>
    1f88:	91 2c       	mov	r9, r1
    1f8a:	21 2c       	mov	r2, r1
    1f8c:	31 2c       	mov	r3, r1
    1f8e:	ff e1       	ldi	r31, 0x1F	; 31
    1f90:	f3 15       	cp	r31, r3
    1f92:	d8 f0       	brcs	.+54     	; 0x1fca <vfprintf+0x98>
    1f94:	8b 32       	cpi	r24, 0x2B	; 43
    1f96:	79 f0       	breq	.+30     	; 0x1fb6 <vfprintf+0x84>
    1f98:	38 f4       	brcc	.+14     	; 0x1fa8 <vfprintf+0x76>
    1f9a:	80 32       	cpi	r24, 0x20	; 32
    1f9c:	79 f0       	breq	.+30     	; 0x1fbc <vfprintf+0x8a>
    1f9e:	83 32       	cpi	r24, 0x23	; 35
    1fa0:	a1 f4       	brne	.+40     	; 0x1fca <vfprintf+0x98>
    1fa2:	23 2d       	mov	r18, r3
    1fa4:	20 61       	ori	r18, 0x10	; 16
    1fa6:	1d c0       	rjmp	.+58     	; 0x1fe2 <vfprintf+0xb0>
    1fa8:	8d 32       	cpi	r24, 0x2D	; 45
    1faa:	61 f0       	breq	.+24     	; 0x1fc4 <vfprintf+0x92>
    1fac:	80 33       	cpi	r24, 0x30	; 48
    1fae:	69 f4       	brne	.+26     	; 0x1fca <vfprintf+0x98>
    1fb0:	23 2d       	mov	r18, r3
    1fb2:	21 60       	ori	r18, 0x01	; 1
    1fb4:	16 c0       	rjmp	.+44     	; 0x1fe2 <vfprintf+0xb0>
    1fb6:	83 2d       	mov	r24, r3
    1fb8:	82 60       	ori	r24, 0x02	; 2
    1fba:	38 2e       	mov	r3, r24
    1fbc:	e3 2d       	mov	r30, r3
    1fbe:	e4 60       	ori	r30, 0x04	; 4
    1fc0:	3e 2e       	mov	r3, r30
    1fc2:	2a c0       	rjmp	.+84     	; 0x2018 <vfprintf+0xe6>
    1fc4:	f3 2d       	mov	r31, r3
    1fc6:	f8 60       	ori	r31, 0x08	; 8
    1fc8:	1d c0       	rjmp	.+58     	; 0x2004 <vfprintf+0xd2>
    1fca:	37 fc       	sbrc	r3, 7
    1fcc:	2d c0       	rjmp	.+90     	; 0x2028 <vfprintf+0xf6>
    1fce:	20 ed       	ldi	r18, 0xD0	; 208
    1fd0:	28 0f       	add	r18, r24
    1fd2:	2a 30       	cpi	r18, 0x0A	; 10
    1fd4:	40 f0       	brcs	.+16     	; 0x1fe6 <vfprintf+0xb4>
    1fd6:	8e 32       	cpi	r24, 0x2E	; 46
    1fd8:	b9 f4       	brne	.+46     	; 0x2008 <vfprintf+0xd6>
    1fda:	36 fc       	sbrc	r3, 6
    1fdc:	81 c1       	rjmp	.+770    	; 0x22e0 <vfprintf+0x3ae>
    1fde:	23 2d       	mov	r18, r3
    1fe0:	20 64       	ori	r18, 0x40	; 64
    1fe2:	32 2e       	mov	r3, r18
    1fe4:	19 c0       	rjmp	.+50     	; 0x2018 <vfprintf+0xe6>
    1fe6:	36 fe       	sbrs	r3, 6
    1fe8:	06 c0       	rjmp	.+12     	; 0x1ff6 <vfprintf+0xc4>
    1fea:	8a e0       	ldi	r24, 0x0A	; 10
    1fec:	98 9e       	mul	r9, r24
    1fee:	20 0d       	add	r18, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	92 2e       	mov	r9, r18
    1ff4:	11 c0       	rjmp	.+34     	; 0x2018 <vfprintf+0xe6>
    1ff6:	ea e0       	ldi	r30, 0x0A	; 10
    1ff8:	2e 9e       	mul	r2, r30
    1ffa:	20 0d       	add	r18, r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	22 2e       	mov	r2, r18
    2000:	f3 2d       	mov	r31, r3
    2002:	f0 62       	ori	r31, 0x20	; 32
    2004:	3f 2e       	mov	r3, r31
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <vfprintf+0xe6>
    2008:	8c 36       	cpi	r24, 0x6C	; 108
    200a:	21 f4       	brne	.+8      	; 0x2014 <vfprintf+0xe2>
    200c:	83 2d       	mov	r24, r3
    200e:	80 68       	ori	r24, 0x80	; 128
    2010:	38 2e       	mov	r3, r24
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <vfprintf+0xe6>
    2014:	88 36       	cpi	r24, 0x68	; 104
    2016:	41 f4       	brne	.+16     	; 0x2028 <vfprintf+0xf6>
    2018:	f7 01       	movw	r30, r14
    201a:	93 fd       	sbrc	r25, 3
    201c:	85 91       	lpm	r24, Z+
    201e:	93 ff       	sbrs	r25, 3
    2020:	81 91       	ld	r24, Z+
    2022:	7f 01       	movw	r14, r30
    2024:	81 11       	cpse	r24, r1
    2026:	b3 cf       	rjmp	.-154    	; 0x1f8e <vfprintf+0x5c>
    2028:	98 2f       	mov	r25, r24
    202a:	9f 7d       	andi	r25, 0xDF	; 223
    202c:	95 54       	subi	r25, 0x45	; 69
    202e:	93 30       	cpi	r25, 0x03	; 3
    2030:	28 f4       	brcc	.+10     	; 0x203c <vfprintf+0x10a>
    2032:	0c 5f       	subi	r16, 0xFC	; 252
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	9f e3       	ldi	r25, 0x3F	; 63
    2038:	99 83       	std	Y+1, r25	; 0x01
    203a:	0d c0       	rjmp	.+26     	; 0x2056 <vfprintf+0x124>
    203c:	83 36       	cpi	r24, 0x63	; 99
    203e:	31 f0       	breq	.+12     	; 0x204c <vfprintf+0x11a>
    2040:	83 37       	cpi	r24, 0x73	; 115
    2042:	71 f0       	breq	.+28     	; 0x2060 <vfprintf+0x12e>
    2044:	83 35       	cpi	r24, 0x53	; 83
    2046:	09 f0       	breq	.+2      	; 0x204a <vfprintf+0x118>
    2048:	59 c0       	rjmp	.+178    	; 0x20fc <vfprintf+0x1ca>
    204a:	21 c0       	rjmp	.+66     	; 0x208e <vfprintf+0x15c>
    204c:	f8 01       	movw	r30, r16
    204e:	80 81       	ld	r24, Z
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	0e 5f       	subi	r16, 0xFE	; 254
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	88 24       	eor	r8, r8
    2058:	83 94       	inc	r8
    205a:	91 2c       	mov	r9, r1
    205c:	53 01       	movw	r10, r6
    205e:	13 c0       	rjmp	.+38     	; 0x2086 <vfprintf+0x154>
    2060:	28 01       	movw	r4, r16
    2062:	f2 e0       	ldi	r31, 0x02	; 2
    2064:	4f 0e       	add	r4, r31
    2066:	51 1c       	adc	r5, r1
    2068:	f8 01       	movw	r30, r16
    206a:	a0 80       	ld	r10, Z
    206c:	b1 80       	ldd	r11, Z+1	; 0x01
    206e:	36 fe       	sbrs	r3, 6
    2070:	03 c0       	rjmp	.+6      	; 0x2078 <vfprintf+0x146>
    2072:	69 2d       	mov	r22, r9
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	02 c0       	rjmp	.+4      	; 0x207c <vfprintf+0x14a>
    2078:	6f ef       	ldi	r22, 0xFF	; 255
    207a:	7f ef       	ldi	r23, 0xFF	; 255
    207c:	c5 01       	movw	r24, r10
    207e:	0e 94 85 11 	call	0x230a	; 0x230a <strnlen>
    2082:	4c 01       	movw	r8, r24
    2084:	82 01       	movw	r16, r4
    2086:	f3 2d       	mov	r31, r3
    2088:	ff 77       	andi	r31, 0x7F	; 127
    208a:	3f 2e       	mov	r3, r31
    208c:	16 c0       	rjmp	.+44     	; 0x20ba <vfprintf+0x188>
    208e:	28 01       	movw	r4, r16
    2090:	22 e0       	ldi	r18, 0x02	; 2
    2092:	42 0e       	add	r4, r18
    2094:	51 1c       	adc	r5, r1
    2096:	f8 01       	movw	r30, r16
    2098:	a0 80       	ld	r10, Z
    209a:	b1 80       	ldd	r11, Z+1	; 0x01
    209c:	36 fe       	sbrs	r3, 6
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <vfprintf+0x174>
    20a0:	69 2d       	mov	r22, r9
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <vfprintf+0x178>
    20a6:	6f ef       	ldi	r22, 0xFF	; 255
    20a8:	7f ef       	ldi	r23, 0xFF	; 255
    20aa:	c5 01       	movw	r24, r10
    20ac:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <strnlen_P>
    20b0:	4c 01       	movw	r8, r24
    20b2:	f3 2d       	mov	r31, r3
    20b4:	f0 68       	ori	r31, 0x80	; 128
    20b6:	3f 2e       	mov	r3, r31
    20b8:	82 01       	movw	r16, r4
    20ba:	33 fc       	sbrc	r3, 3
    20bc:	1b c0       	rjmp	.+54     	; 0x20f4 <vfprintf+0x1c2>
    20be:	82 2d       	mov	r24, r2
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	88 16       	cp	r8, r24
    20c4:	99 06       	cpc	r9, r25
    20c6:	b0 f4       	brcc	.+44     	; 0x20f4 <vfprintf+0x1c2>
    20c8:	b6 01       	movw	r22, r12
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    20d2:	2a 94       	dec	r2
    20d4:	f4 cf       	rjmp	.-24     	; 0x20be <vfprintf+0x18c>
    20d6:	f5 01       	movw	r30, r10
    20d8:	37 fc       	sbrc	r3, 7
    20da:	85 91       	lpm	r24, Z+
    20dc:	37 fe       	sbrs	r3, 7
    20de:	81 91       	ld	r24, Z+
    20e0:	5f 01       	movw	r10, r30
    20e2:	b6 01       	movw	r22, r12
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    20ea:	21 10       	cpse	r2, r1
    20ec:	2a 94       	dec	r2
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	82 1a       	sub	r8, r18
    20f2:	91 08       	sbc	r9, r1
    20f4:	81 14       	cp	r8, r1
    20f6:	91 04       	cpc	r9, r1
    20f8:	71 f7       	brne	.-36     	; 0x20d6 <vfprintf+0x1a4>
    20fa:	e8 c0       	rjmp	.+464    	; 0x22cc <vfprintf+0x39a>
    20fc:	84 36       	cpi	r24, 0x64	; 100
    20fe:	11 f0       	breq	.+4      	; 0x2104 <vfprintf+0x1d2>
    2100:	89 36       	cpi	r24, 0x69	; 105
    2102:	41 f5       	brne	.+80     	; 0x2154 <vfprintf+0x222>
    2104:	f8 01       	movw	r30, r16
    2106:	37 fe       	sbrs	r3, 7
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <vfprintf+0x1e6>
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	0c 5f       	subi	r16, 0xFC	; 252
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <vfprintf+0x1f6>
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	07 2e       	mov	r0, r23
    211e:	00 0c       	add	r0, r0
    2120:	88 0b       	sbc	r24, r24
    2122:	99 0b       	sbc	r25, r25
    2124:	0e 5f       	subi	r16, 0xFE	; 254
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	f3 2d       	mov	r31, r3
    212a:	ff 76       	andi	r31, 0x6F	; 111
    212c:	3f 2e       	mov	r3, r31
    212e:	97 ff       	sbrs	r25, 7
    2130:	09 c0       	rjmp	.+18     	; 0x2144 <vfprintf+0x212>
    2132:	90 95       	com	r25
    2134:	80 95       	com	r24
    2136:	70 95       	com	r23
    2138:	61 95       	neg	r22
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	f0 68       	ori	r31, 0x80	; 128
    2142:	3f 2e       	mov	r3, r31
    2144:	2a e0       	ldi	r18, 0x0A	; 10
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	a3 01       	movw	r20, r6
    214a:	0e 94 cc 11 	call	0x2398	; 0x2398 <__ultoa_invert>
    214e:	88 2e       	mov	r8, r24
    2150:	86 18       	sub	r8, r6
    2152:	45 c0       	rjmp	.+138    	; 0x21de <vfprintf+0x2ac>
    2154:	85 37       	cpi	r24, 0x75	; 117
    2156:	31 f4       	brne	.+12     	; 0x2164 <vfprintf+0x232>
    2158:	23 2d       	mov	r18, r3
    215a:	2f 7e       	andi	r18, 0xEF	; 239
    215c:	b2 2e       	mov	r11, r18
    215e:	2a e0       	ldi	r18, 0x0A	; 10
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	25 c0       	rjmp	.+74     	; 0x21ae <vfprintf+0x27c>
    2164:	93 2d       	mov	r25, r3
    2166:	99 7f       	andi	r25, 0xF9	; 249
    2168:	b9 2e       	mov	r11, r25
    216a:	8f 36       	cpi	r24, 0x6F	; 111
    216c:	c1 f0       	breq	.+48     	; 0x219e <vfprintf+0x26c>
    216e:	18 f4       	brcc	.+6      	; 0x2176 <vfprintf+0x244>
    2170:	88 35       	cpi	r24, 0x58	; 88
    2172:	79 f0       	breq	.+30     	; 0x2192 <vfprintf+0x260>
    2174:	b5 c0       	rjmp	.+362    	; 0x22e0 <vfprintf+0x3ae>
    2176:	80 37       	cpi	r24, 0x70	; 112
    2178:	19 f0       	breq	.+6      	; 0x2180 <vfprintf+0x24e>
    217a:	88 37       	cpi	r24, 0x78	; 120
    217c:	21 f0       	breq	.+8      	; 0x2186 <vfprintf+0x254>
    217e:	b0 c0       	rjmp	.+352    	; 0x22e0 <vfprintf+0x3ae>
    2180:	e9 2f       	mov	r30, r25
    2182:	e0 61       	ori	r30, 0x10	; 16
    2184:	be 2e       	mov	r11, r30
    2186:	b4 fe       	sbrs	r11, 4
    2188:	0d c0       	rjmp	.+26     	; 0x21a4 <vfprintf+0x272>
    218a:	fb 2d       	mov	r31, r11
    218c:	f4 60       	ori	r31, 0x04	; 4
    218e:	bf 2e       	mov	r11, r31
    2190:	09 c0       	rjmp	.+18     	; 0x21a4 <vfprintf+0x272>
    2192:	34 fe       	sbrs	r3, 4
    2194:	0a c0       	rjmp	.+20     	; 0x21aa <vfprintf+0x278>
    2196:	29 2f       	mov	r18, r25
    2198:	26 60       	ori	r18, 0x06	; 6
    219a:	b2 2e       	mov	r11, r18
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <vfprintf+0x278>
    219e:	28 e0       	ldi	r18, 0x08	; 8
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <vfprintf+0x27c>
    21a4:	20 e1       	ldi	r18, 0x10	; 16
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <vfprintf+0x27c>
    21aa:	20 e1       	ldi	r18, 0x10	; 16
    21ac:	32 e0       	ldi	r19, 0x02	; 2
    21ae:	f8 01       	movw	r30, r16
    21b0:	b7 fe       	sbrs	r11, 7
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <vfprintf+0x290>
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	0c 5f       	subi	r16, 0xFC	; 252
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	06 c0       	rjmp	.+12     	; 0x21ce <vfprintf+0x29c>
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 5f       	subi	r16, 0xFE	; 254
    21cc:	1f 4f       	sbci	r17, 0xFF	; 255
    21ce:	a3 01       	movw	r20, r6
    21d0:	0e 94 cc 11 	call	0x2398	; 0x2398 <__ultoa_invert>
    21d4:	88 2e       	mov	r8, r24
    21d6:	86 18       	sub	r8, r6
    21d8:	fb 2d       	mov	r31, r11
    21da:	ff 77       	andi	r31, 0x7F	; 127
    21dc:	3f 2e       	mov	r3, r31
    21de:	36 fe       	sbrs	r3, 6
    21e0:	0d c0       	rjmp	.+26     	; 0x21fc <vfprintf+0x2ca>
    21e2:	23 2d       	mov	r18, r3
    21e4:	2e 7f       	andi	r18, 0xFE	; 254
    21e6:	a2 2e       	mov	r10, r18
    21e8:	89 14       	cp	r8, r9
    21ea:	58 f4       	brcc	.+22     	; 0x2202 <vfprintf+0x2d0>
    21ec:	34 fe       	sbrs	r3, 4
    21ee:	0b c0       	rjmp	.+22     	; 0x2206 <vfprintf+0x2d4>
    21f0:	32 fc       	sbrc	r3, 2
    21f2:	09 c0       	rjmp	.+18     	; 0x2206 <vfprintf+0x2d4>
    21f4:	83 2d       	mov	r24, r3
    21f6:	8e 7e       	andi	r24, 0xEE	; 238
    21f8:	a8 2e       	mov	r10, r24
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <vfprintf+0x2d4>
    21fc:	b8 2c       	mov	r11, r8
    21fe:	a3 2c       	mov	r10, r3
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <vfprintf+0x2d6>
    2202:	b8 2c       	mov	r11, r8
    2204:	01 c0       	rjmp	.+2      	; 0x2208 <vfprintf+0x2d6>
    2206:	b9 2c       	mov	r11, r9
    2208:	a4 fe       	sbrs	r10, 4
    220a:	0f c0       	rjmp	.+30     	; 0x222a <vfprintf+0x2f8>
    220c:	fe 01       	movw	r30, r28
    220e:	e8 0d       	add	r30, r8
    2210:	f1 1d       	adc	r31, r1
    2212:	80 81       	ld	r24, Z
    2214:	80 33       	cpi	r24, 0x30	; 48
    2216:	21 f4       	brne	.+8      	; 0x2220 <vfprintf+0x2ee>
    2218:	9a 2d       	mov	r25, r10
    221a:	99 7e       	andi	r25, 0xE9	; 233
    221c:	a9 2e       	mov	r10, r25
    221e:	09 c0       	rjmp	.+18     	; 0x2232 <vfprintf+0x300>
    2220:	a2 fe       	sbrs	r10, 2
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <vfprintf+0x2fe>
    2224:	b3 94       	inc	r11
    2226:	b3 94       	inc	r11
    2228:	04 c0       	rjmp	.+8      	; 0x2232 <vfprintf+0x300>
    222a:	8a 2d       	mov	r24, r10
    222c:	86 78       	andi	r24, 0x86	; 134
    222e:	09 f0       	breq	.+2      	; 0x2232 <vfprintf+0x300>
    2230:	b3 94       	inc	r11
    2232:	a3 fc       	sbrc	r10, 3
    2234:	11 c0       	rjmp	.+34     	; 0x2258 <vfprintf+0x326>
    2236:	a0 fe       	sbrs	r10, 0
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <vfprintf+0x314>
    223a:	b2 14       	cp	r11, r2
    223c:	88 f4       	brcc	.+34     	; 0x2260 <vfprintf+0x32e>
    223e:	28 0c       	add	r2, r8
    2240:	92 2c       	mov	r9, r2
    2242:	9b 18       	sub	r9, r11
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <vfprintf+0x330>
    2246:	b2 14       	cp	r11, r2
    2248:	60 f4       	brcc	.+24     	; 0x2262 <vfprintf+0x330>
    224a:	b6 01       	movw	r22, r12
    224c:	80 e2       	ldi	r24, 0x20	; 32
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    2254:	b3 94       	inc	r11
    2256:	f7 cf       	rjmp	.-18     	; 0x2246 <vfprintf+0x314>
    2258:	b2 14       	cp	r11, r2
    225a:	18 f4       	brcc	.+6      	; 0x2262 <vfprintf+0x330>
    225c:	2b 18       	sub	r2, r11
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x332>
    2260:	98 2c       	mov	r9, r8
    2262:	21 2c       	mov	r2, r1
    2264:	a4 fe       	sbrs	r10, 4
    2266:	10 c0       	rjmp	.+32     	; 0x2288 <vfprintf+0x356>
    2268:	b6 01       	movw	r22, r12
    226a:	80 e3       	ldi	r24, 0x30	; 48
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    2272:	a2 fe       	sbrs	r10, 2
    2274:	17 c0       	rjmp	.+46     	; 0x22a4 <vfprintf+0x372>
    2276:	a1 fc       	sbrc	r10, 1
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <vfprintf+0x34e>
    227a:	88 e7       	ldi	r24, 0x78	; 120
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <vfprintf+0x352>
    2280:	88 e5       	ldi	r24, 0x58	; 88
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	b6 01       	movw	r22, r12
    2286:	0c c0       	rjmp	.+24     	; 0x22a0 <vfprintf+0x36e>
    2288:	8a 2d       	mov	r24, r10
    228a:	86 78       	andi	r24, 0x86	; 134
    228c:	59 f0       	breq	.+22     	; 0x22a4 <vfprintf+0x372>
    228e:	a1 fe       	sbrs	r10, 1
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <vfprintf+0x364>
    2292:	8b e2       	ldi	r24, 0x2B	; 43
    2294:	01 c0       	rjmp	.+2      	; 0x2298 <vfprintf+0x366>
    2296:	80 e2       	ldi	r24, 0x20	; 32
    2298:	a7 fc       	sbrc	r10, 7
    229a:	8d e2       	ldi	r24, 0x2D	; 45
    229c:	b6 01       	movw	r22, r12
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    22a4:	89 14       	cp	r8, r9
    22a6:	38 f4       	brcc	.+14     	; 0x22b6 <vfprintf+0x384>
    22a8:	b6 01       	movw	r22, r12
    22aa:	80 e3       	ldi	r24, 0x30	; 48
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    22b2:	9a 94       	dec	r9
    22b4:	f7 cf       	rjmp	.-18     	; 0x22a4 <vfprintf+0x372>
    22b6:	8a 94       	dec	r8
    22b8:	f3 01       	movw	r30, r6
    22ba:	e8 0d       	add	r30, r8
    22bc:	f1 1d       	adc	r31, r1
    22be:	80 81       	ld	r24, Z
    22c0:	b6 01       	movw	r22, r12
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    22c8:	81 10       	cpse	r8, r1
    22ca:	f5 cf       	rjmp	.-22     	; 0x22b6 <vfprintf+0x384>
    22cc:	22 20       	and	r2, r2
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <vfprintf+0x3a0>
    22d0:	42 ce       	rjmp	.-892    	; 0x1f56 <vfprintf+0x24>
    22d2:	b6 01       	movw	r22, r12
    22d4:	80 e2       	ldi	r24, 0x20	; 32
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 90 11 	call	0x2320	; 0x2320 <fputc>
    22dc:	2a 94       	dec	r2
    22de:	f6 cf       	rjmp	.-20     	; 0x22cc <vfprintf+0x39a>
    22e0:	f6 01       	movw	r30, r12
    22e2:	86 81       	ldd	r24, Z+6	; 0x06
    22e4:	97 81       	ldd	r25, Z+7	; 0x07
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <vfprintf+0x3ba>
    22e8:	8f ef       	ldi	r24, 0xFF	; 255
    22ea:	9f ef       	ldi	r25, 0xFF	; 255
    22ec:	2b 96       	adiw	r28, 0x0b	; 11
    22ee:	e2 e1       	ldi	r30, 0x12	; 18
    22f0:	0c 94 46 12 	jmp	0x248c	; 0x248c <__epilogue_restores__>

000022f4 <strnlen_P>:
    22f4:	fc 01       	movw	r30, r24
    22f6:	05 90       	lpm	r0, Z+
    22f8:	61 50       	subi	r22, 0x01	; 1
    22fa:	70 40       	sbci	r23, 0x00	; 0
    22fc:	01 10       	cpse	r0, r1
    22fe:	d8 f7       	brcc	.-10     	; 0x22f6 <strnlen_P+0x2>
    2300:	80 95       	com	r24
    2302:	90 95       	com	r25
    2304:	8e 0f       	add	r24, r30
    2306:	9f 1f       	adc	r25, r31
    2308:	08 95       	ret

0000230a <strnlen>:
    230a:	fc 01       	movw	r30, r24
    230c:	61 50       	subi	r22, 0x01	; 1
    230e:	70 40       	sbci	r23, 0x00	; 0
    2310:	01 90       	ld	r0, Z+
    2312:	01 10       	cpse	r0, r1
    2314:	d8 f7       	brcc	.-10     	; 0x230c <strnlen+0x2>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	8e 0f       	add	r24, r30
    231c:	9f 1f       	adc	r25, r31
    231e:	08 95       	ret

00002320 <fputc>:
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	fb 01       	movw	r30, r22
    232a:	23 81       	ldd	r18, Z+3	; 0x03
    232c:	21 fd       	sbrc	r18, 1
    232e:	03 c0       	rjmp	.+6      	; 0x2336 <fputc+0x16>
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f ef       	ldi	r25, 0xFF	; 255
    2334:	2c c0       	rjmp	.+88     	; 0x238e <fputc+0x6e>
    2336:	22 ff       	sbrs	r18, 2
    2338:	16 c0       	rjmp	.+44     	; 0x2366 <fputc+0x46>
    233a:	46 81       	ldd	r20, Z+6	; 0x06
    233c:	57 81       	ldd	r21, Z+7	; 0x07
    233e:	24 81       	ldd	r18, Z+4	; 0x04
    2340:	35 81       	ldd	r19, Z+5	; 0x05
    2342:	42 17       	cp	r20, r18
    2344:	53 07       	cpc	r21, r19
    2346:	44 f4       	brge	.+16     	; 0x2358 <fputc+0x38>
    2348:	a0 81       	ld	r26, Z
    234a:	b1 81       	ldd	r27, Z+1	; 0x01
    234c:	9d 01       	movw	r18, r26
    234e:	2f 5f       	subi	r18, 0xFF	; 255
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	31 83       	std	Z+1, r19	; 0x01
    2354:	20 83       	st	Z, r18
    2356:	8c 93       	st	X, r24
    2358:	26 81       	ldd	r18, Z+6	; 0x06
    235a:	37 81       	ldd	r19, Z+7	; 0x07
    235c:	2f 5f       	subi	r18, 0xFF	; 255
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	37 83       	std	Z+7, r19	; 0x07
    2362:	26 83       	std	Z+6, r18	; 0x06
    2364:	14 c0       	rjmp	.+40     	; 0x238e <fputc+0x6e>
    2366:	8b 01       	movw	r16, r22
    2368:	ec 01       	movw	r28, r24
    236a:	fb 01       	movw	r30, r22
    236c:	00 84       	ldd	r0, Z+8	; 0x08
    236e:	f1 85       	ldd	r31, Z+9	; 0x09
    2370:	e0 2d       	mov	r30, r0
    2372:	09 95       	icall
    2374:	89 2b       	or	r24, r25
    2376:	e1 f6       	brne	.-72     	; 0x2330 <fputc+0x10>
    2378:	d8 01       	movw	r26, r16
    237a:	16 96       	adiw	r26, 0x06	; 6
    237c:	8d 91       	ld	r24, X+
    237e:	9c 91       	ld	r25, X
    2380:	17 97       	sbiw	r26, 0x07	; 7
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	17 96       	adiw	r26, 0x07	; 7
    2386:	9c 93       	st	X, r25
    2388:	8e 93       	st	-X, r24
    238a:	16 97       	sbiw	r26, 0x06	; 6
    238c:	ce 01       	movw	r24, r28
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	08 95       	ret

00002398 <__ultoa_invert>:
    2398:	fa 01       	movw	r30, r20
    239a:	aa 27       	eor	r26, r26
    239c:	28 30       	cpi	r18, 0x08	; 8
    239e:	51 f1       	breq	.+84     	; 0x23f4 <__ultoa_invert+0x5c>
    23a0:	20 31       	cpi	r18, 0x10	; 16
    23a2:	81 f1       	breq	.+96     	; 0x2404 <__ultoa_invert+0x6c>
    23a4:	e8 94       	clt
    23a6:	6f 93       	push	r22
    23a8:	6e 7f       	andi	r22, 0xFE	; 254
    23aa:	6e 5f       	subi	r22, 0xFE	; 254
    23ac:	7f 4f       	sbci	r23, 0xFF	; 255
    23ae:	8f 4f       	sbci	r24, 0xFF	; 255
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	af 4f       	sbci	r26, 0xFF	; 255
    23b4:	b1 e0       	ldi	r27, 0x01	; 1
    23b6:	3e d0       	rcall	.+124    	; 0x2434 <__ultoa_invert+0x9c>
    23b8:	b4 e0       	ldi	r27, 0x04	; 4
    23ba:	3c d0       	rcall	.+120    	; 0x2434 <__ultoa_invert+0x9c>
    23bc:	67 0f       	add	r22, r23
    23be:	78 1f       	adc	r23, r24
    23c0:	89 1f       	adc	r24, r25
    23c2:	9a 1f       	adc	r25, r26
    23c4:	a1 1d       	adc	r26, r1
    23c6:	68 0f       	add	r22, r24
    23c8:	79 1f       	adc	r23, r25
    23ca:	8a 1f       	adc	r24, r26
    23cc:	91 1d       	adc	r25, r1
    23ce:	a1 1d       	adc	r26, r1
    23d0:	6a 0f       	add	r22, r26
    23d2:	71 1d       	adc	r23, r1
    23d4:	81 1d       	adc	r24, r1
    23d6:	91 1d       	adc	r25, r1
    23d8:	a1 1d       	adc	r26, r1
    23da:	20 d0       	rcall	.+64     	; 0x241c <__ultoa_invert+0x84>
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <__ultoa_invert+0x48>
    23de:	68 94       	set
    23e0:	3f 91       	pop	r19
    23e2:	2a e0       	ldi	r18, 0x0A	; 10
    23e4:	26 9f       	mul	r18, r22
    23e6:	11 24       	eor	r1, r1
    23e8:	30 19       	sub	r19, r0
    23ea:	30 5d       	subi	r19, 0xD0	; 208
    23ec:	31 93       	st	Z+, r19
    23ee:	de f6       	brtc	.-74     	; 0x23a6 <__ultoa_invert+0xe>
    23f0:	cf 01       	movw	r24, r30
    23f2:	08 95       	ret
    23f4:	46 2f       	mov	r20, r22
    23f6:	47 70       	andi	r20, 0x07	; 7
    23f8:	40 5d       	subi	r20, 0xD0	; 208
    23fa:	41 93       	st	Z+, r20
    23fc:	b3 e0       	ldi	r27, 0x03	; 3
    23fe:	0f d0       	rcall	.+30     	; 0x241e <__ultoa_invert+0x86>
    2400:	c9 f7       	brne	.-14     	; 0x23f4 <__ultoa_invert+0x5c>
    2402:	f6 cf       	rjmp	.-20     	; 0x23f0 <__ultoa_invert+0x58>
    2404:	46 2f       	mov	r20, r22
    2406:	4f 70       	andi	r20, 0x0F	; 15
    2408:	40 5d       	subi	r20, 0xD0	; 208
    240a:	4a 33       	cpi	r20, 0x3A	; 58
    240c:	18 f0       	brcs	.+6      	; 0x2414 <__ultoa_invert+0x7c>
    240e:	49 5d       	subi	r20, 0xD9	; 217
    2410:	31 fd       	sbrc	r19, 1
    2412:	40 52       	subi	r20, 0x20	; 32
    2414:	41 93       	st	Z+, r20
    2416:	02 d0       	rcall	.+4      	; 0x241c <__ultoa_invert+0x84>
    2418:	a9 f7       	brne	.-22     	; 0x2404 <__ultoa_invert+0x6c>
    241a:	ea cf       	rjmp	.-44     	; 0x23f0 <__ultoa_invert+0x58>
    241c:	b4 e0       	ldi	r27, 0x04	; 4
    241e:	a6 95       	lsr	r26
    2420:	97 95       	ror	r25
    2422:	87 95       	ror	r24
    2424:	77 95       	ror	r23
    2426:	67 95       	ror	r22
    2428:	ba 95       	dec	r27
    242a:	c9 f7       	brne	.-14     	; 0x241e <__ultoa_invert+0x86>
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	61 05       	cpc	r22, r1
    2430:	71 05       	cpc	r23, r1
    2432:	08 95       	ret
    2434:	9b 01       	movw	r18, r22
    2436:	ac 01       	movw	r20, r24
    2438:	0a 2e       	mov	r0, r26
    243a:	06 94       	lsr	r0
    243c:	57 95       	ror	r21
    243e:	47 95       	ror	r20
    2440:	37 95       	ror	r19
    2442:	27 95       	ror	r18
    2444:	ba 95       	dec	r27
    2446:	c9 f7       	brne	.-14     	; 0x243a <__ultoa_invert+0xa2>
    2448:	62 0f       	add	r22, r18
    244a:	73 1f       	adc	r23, r19
    244c:	84 1f       	adc	r24, r20
    244e:	95 1f       	adc	r25, r21
    2450:	a0 1d       	adc	r26, r0
    2452:	08 95       	ret

00002454 <__prologue_saves__>:
    2454:	2f 92       	push	r2
    2456:	3f 92       	push	r3
    2458:	4f 92       	push	r4
    245a:	5f 92       	push	r5
    245c:	6f 92       	push	r6
    245e:	7f 92       	push	r7
    2460:	8f 92       	push	r8
    2462:	9f 92       	push	r9
    2464:	af 92       	push	r10
    2466:	bf 92       	push	r11
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	ca 1b       	sub	r28, r26
    247e:	db 0b       	sbc	r29, r27
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	09 94       	ijmp

0000248c <__epilogue_restores__>:
    248c:	2a 88       	ldd	r2, Y+18	; 0x12
    248e:	39 88       	ldd	r3, Y+17	; 0x11
    2490:	48 88       	ldd	r4, Y+16	; 0x10
    2492:	5f 84       	ldd	r5, Y+15	; 0x0f
    2494:	6e 84       	ldd	r6, Y+14	; 0x0e
    2496:	7d 84       	ldd	r7, Y+13	; 0x0d
    2498:	8c 84       	ldd	r8, Y+12	; 0x0c
    249a:	9b 84       	ldd	r9, Y+11	; 0x0b
    249c:	aa 84       	ldd	r10, Y+10	; 0x0a
    249e:	b9 84       	ldd	r11, Y+9	; 0x09
    24a0:	c8 84       	ldd	r12, Y+8	; 0x08
    24a2:	df 80       	ldd	r13, Y+7	; 0x07
    24a4:	ee 80       	ldd	r14, Y+6	; 0x06
    24a6:	fd 80       	ldd	r15, Y+5	; 0x05
    24a8:	0c 81       	ldd	r16, Y+4	; 0x04
    24aa:	1b 81       	ldd	r17, Y+3	; 0x03
    24ac:	aa 81       	ldd	r26, Y+2	; 0x02
    24ae:	b9 81       	ldd	r27, Y+1	; 0x01
    24b0:	ce 0f       	add	r28, r30
    24b2:	d1 1d       	adc	r29, r1
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	ed 01       	movw	r28, r26
    24c0:	08 95       	ret

000024c2 <_exit>:
    24c2:	f8 94       	cli

000024c4 <__stop_program>:
    24c4:	ff cf       	rjmp	.-2      	; 0x24c4 <__stop_program>
