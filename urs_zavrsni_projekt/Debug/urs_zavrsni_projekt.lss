
urs_zavrsni_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00002698  0000272c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001bc  008001bc  00002888  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000456f  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00006fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b8  00000000  00000000  00007857  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000874  00000000  00000000  00008d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa0  00000000  00000000  00009584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035cd  00000000  00000000  0000a024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <main>
      8a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9TFT_startv>:
		}
		if (e2 > x) {
			err += ++x * 2 + 1;
		}
	} while (x <= 0);
}
      92:	88 b3       	in	r24, 0x18	; 24
      94:	80 6b       	ori	r24, 0xB0	; 176
      96:	88 bb       	out	0x18, r24	; 24
      98:	08 95       	ret

0000009a <_Z15TFT_touch_writeh>:
      9a:	c7 98       	cbi	0x18, 7	; 24
      9c:	97 e0       	ldi	r25, 0x07	; 7
      9e:	48 2f       	mov	r20, r24
      a0:	50 e0       	ldi	r21, 0x00	; 0
      a2:	9a 01       	movw	r18, r20
      a4:	09 2e       	mov	r0, r25
      a6:	02 c0       	rjmp	.+4      	; 0xac <_Z15TFT_touch_writeh+0x12>
      a8:	35 95       	asr	r19
      aa:	27 95       	ror	r18
      ac:	0a 94       	dec	r0
      ae:	e2 f7       	brpl	.-8      	; 0xa8 <_Z15TFT_touch_writeh+0xe>
      b0:	20 ff       	sbrs	r18, 0
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <_Z15TFT_touch_writeh+0x1e>
      b4:	c5 9a       	sbi	0x18, 5	; 24
      b6:	01 c0       	rjmp	.+2      	; 0xba <_Z15TFT_touch_writeh+0x20>
      b8:	c5 98       	cbi	0x18, 5	; 24
      ba:	c7 98       	cbi	0x18, 7	; 24
      bc:	c7 9a       	sbi	0x18, 7	; 24
      be:	91 50       	subi	r25, 0x01	; 1
      c0:	80 f7       	brcc	.-32     	; 0xa2 <_Z15TFT_touch_writeh+0x8>
      c2:	08 95       	ret

000000c4 <_Z14TFT_touch_readv>:
      c4:	2c e0       	ldi	r18, 0x0C	; 12
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	c7 9a       	sbi	0x18, 7	; 24
      d0:	c7 98       	cbi	0x18, 7	; 24
      d2:	36 b3       	in	r19, 0x16	; 22
      d4:	36 fb       	bst	r19, 6
      d6:	44 27       	eor	r20, r20
      d8:	40 f9       	bld	r20, 0
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	84 0f       	add	r24, r20
      de:	95 1f       	adc	r25, r21
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	99 f7       	brne	.-26     	; 0xca <_Z14TFT_touch_readv+0x6>
      e4:	08 95       	ret

000000e6 <_Z9TFT_writejh>:
      e6:	66 23       	and	r22, r22
      e8:	11 f0       	breq	.+4      	; 0xee <_Z9TFT_writejh+0x8>
      ea:	a8 9a       	sbi	0x15, 0	; 21
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <_Z9TFT_writejh+0xa>
      ee:	a8 98       	cbi	0x15, 0	; 21
      f0:	af 98       	cbi	0x15, 7	; 21
      f2:	9b bb       	out	0x1b, r25	; 27
      f4:	82 bb       	out	0x12, r24	; 18
      f6:	a9 9a       	sbi	0x15, 1	; 21
      f8:	a9 98       	cbi	0x15, 1	; 21
      fa:	af 9a       	sbi	0x15, 7	; 21
      fc:	08 95       	ret

000000fe <_Z14TFT_write_pairjj>:
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	eb 01       	movw	r28, r22
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	ce 01       	movw	r24, r28
     10e:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <_Z15TFT_set_addressjjjj>:
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	8c 01       	movw	r16, r24
     126:	eb 01       	movw	r28, r22
     128:	79 01       	movw	r14, r18
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	74 2f       	mov	r23, r20
     130:	68 0f       	add	r22, r24
     132:	79 1f       	adc	r23, r25
     134:	84 e4       	ldi	r24, 0x44	; 68
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     13c:	be 01       	movw	r22, r28
     13e:	85 e4       	ldi	r24, 0x45	; 69
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     146:	b7 01       	movw	r22, r14
     148:	86 e4       	ldi	r24, 0x46	; 70
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     150:	b8 01       	movw	r22, r16
     152:	8e e4       	ldi	r24, 0x4E	; 78
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     15a:	be 01       	movw	r22, r28
     15c:	8f e4       	ldi	r24, 0x4F	; 79
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	82 e2       	ldi	r24, 0x22	; 34
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	08 95       	ret

0000017c <_Z8TFT_initv>:
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	8a bb       	out	0x1a, r24	; 26
     180:	81 bb       	out	0x11, r24	; 17
     182:	84 b3       	in	r24, 0x14	; 20
     184:	83 6c       	ori	r24, 0xC3	; 195
     186:	84 bb       	out	0x14, r24	; 20
     188:	8e eb       	ldi	r24, 0xBE	; 190
     18a:	87 bb       	out	0x17, r24	; 23
     18c:	87 b3       	in	r24, 0x17	; 23
     18e:	86 60       	ori	r24, 0x06	; 6
     190:	87 bb       	out	0x17, r24	; 23
     192:	88 b3       	in	r24, 0x18	; 24
     194:	86 60       	ori	r24, 0x06	; 6
     196:	88 bb       	out	0x18, r24	; 24
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	93 e2       	ldi	r25, 0x23	; 35
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <_Z8TFT_initv+0x20>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z8TFT_initv+0x26>
     1a2:	00 00       	nop
     1a4:	c1 98       	cbi	0x18, 1	; 24
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	97 e4       	ldi	r25, 0x47	; 71
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z8TFT_initv+0x2e>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z8TFT_initv+0x34>
     1b0:	00 00       	nop
     1b2:	c1 9a       	sbi	0x18, 1	; 24
     1b4:	af 9a       	sbi	0x15, 7	; 21
     1b6:	ae 9a       	sbi	0x15, 6	; 21
     1b8:	a9 98       	cbi	0x15, 1	; 21
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	9f e8       	ldi	r25, 0x8F	; 143
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z8TFT_initv+0x42>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z8TFT_initv+0x48>
     1c4:	00 00       	nop
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1d2:	83 e3       	ldi	r24, 0x33	; 51
     1d4:	97 e0       	ldi	r25, 0x07	; 7
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_Z8TFT_initv+0x5a>
     1da:	64 ea       	ldi	r22, 0xA4	; 164
     1dc:	78 ea       	ldi	r23, 0xA8	; 168
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1e6:	83 e3       	ldi	r24, 0x33	; 51
     1e8:	97 e0       	ldi	r25, 0x07	; 7
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <_Z8TFT_initv+0x6e>
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8c e0       	ldi	r24, 0x0C	; 12
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     1fa:	83 e3       	ldi	r24, 0x33	; 51
     1fc:	97 e0       	ldi	r25, 0x07	; 7
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <_Z8TFT_initv+0x82>
     202:	6c e0       	ldi	r22, 0x0C	; 12
     204:	78 e0       	ldi	r23, 0x08	; 8
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     20e:	83 e3       	ldi	r24, 0x33	; 51
     210:	97 e0       	ldi	r25, 0x07	; 7
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <_Z8TFT_initv+0x96>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	7b e2       	ldi	r23, 0x2B	; 43
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     222:	83 e3       	ldi	r24, 0x33	; 51
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <_Z8TFT_initv+0xaa>
     22a:	60 eb       	ldi	r22, 0xB0	; 176
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	8e e1       	ldi	r24, 0x1E	; 30
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     236:	83 e3       	ldi	r24, 0x33	; 51
     238:	97 e0       	ldi	r25, 0x07	; 7
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <_Z8TFT_initv+0xbe>
     23e:	6f e3       	ldi	r22, 0x3F	; 63
     240:	7b e2       	ldi	r23, 0x2B	; 43
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     24a:	83 e3       	ldi	r24, 0x33	; 51
     24c:	97 e0       	ldi	r25, 0x07	; 7
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <_Z8TFT_initv+0xd2>
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	76 e0       	ldi	r23, 0x06	; 6
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     25e:	83 e3       	ldi	r24, 0x33	; 51
     260:	97 e0       	ldi	r25, 0x07	; 7
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <_Z8TFT_initv+0xe6>
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	80 e1       	ldi	r24, 0x10	; 16
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     272:	83 e3       	ldi	r24, 0x33	; 51
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <_Z8TFT_initv+0xfa>
     27a:	60 e7       	ldi	r22, 0x70	; 112
     27c:	70 e6       	ldi	r23, 0x60	; 96
     27e:	81 e1       	ldi	r24, 0x11	; 17
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     286:	83 e3       	ldi	r24, 0x33	; 51
     288:	97 e0       	ldi	r25, 0x07	; 7
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <_Z8TFT_initv+0x10e>
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     29a:	83 e3       	ldi	r24, 0x33	; 51
     29c:	97 e0       	ldi	r25, 0x07	; 7
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <_Z8TFT_initv+0x122>
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ae:	83 e3       	ldi	r24, 0x33	; 51
     2b0:	97 e0       	ldi	r25, 0x07	; 7
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <_Z8TFT_initv+0x136>
     2b6:	6c e1       	ldi	r22, 0x1C	; 28
     2b8:	7f ee       	ldi	r23, 0xEF	; 239
     2ba:	86 e1       	ldi	r24, 0x16	; 22
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2c2:	83 e3       	ldi	r24, 0x33	; 51
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <_Z8TFT_initv+0x14a>
     2ca:	63 e0       	ldi	r22, 0x03	; 3
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e1       	ldi	r24, 0x17	; 23
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2d6:	83 e3       	ldi	r24, 0x33	; 51
     2d8:	97 e0       	ldi	r25, 0x07	; 7
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <_Z8TFT_initv+0x15e>
     2de:	63 e3       	ldi	r22, 0x33	; 51
     2e0:	72 e0       	ldi	r23, 0x02	; 2
     2e2:	87 e0       	ldi	r24, 0x07	; 7
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2ea:	83 e3       	ldi	r24, 0x33	; 51
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <_Z8TFT_initv+0x172>
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8b e0       	ldi	r24, 0x0B	; 11
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     2fe:	83 e3       	ldi	r24, 0x33	; 51
     300:	97 e0       	ldi	r25, 0x07	; 7
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <_Z8TFT_initv+0x186>
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     312:	83 e3       	ldi	r24, 0x33	; 51
     314:	97 e0       	ldi	r25, 0x07	; 7
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <_Z8TFT_initv+0x19a>
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	81 e4       	ldi	r24, 0x41	; 65
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     326:	83 e3       	ldi	r24, 0x33	; 51
     328:	97 e0       	ldi	r25, 0x07	; 7
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_Z8TFT_initv+0x1ae>
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <_Z8TFT_initv+0x1c2>
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	88 e4       	ldi	r24, 0x48	; 72
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	97 e0       	ldi	r25, 0x07	; 7
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <_Z8TFT_initv+0x1d6>
     356:	6f e3       	ldi	r22, 0x3F	; 63
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	89 e4       	ldi	r24, 0x49	; 73
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     362:	83 e3       	ldi	r24, 0x33	; 51
     364:	97 e0       	ldi	r25, 0x07	; 7
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <_Z8TFT_initv+0x1ea>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	8a e4       	ldi	r24, 0x4A	; 74
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     376:	83 e3       	ldi	r24, 0x33	; 51
     378:	97 e0       	ldi	r25, 0x07	; 7
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <_Z8TFT_initv+0x1fe>
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8b e4       	ldi	r24, 0x4B	; 75
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     38a:	83 e3       	ldi	r24, 0x33	; 51
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_Z8TFT_initv+0x212>
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	7f ee       	ldi	r23, 0xEF	; 239
     396:	84 e4       	ldi	r24, 0x44	; 68
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     39e:	83 e3       	ldi	r24, 0x33	; 51
     3a0:	97 e0       	ldi	r25, 0x07	; 7
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <_Z8TFT_initv+0x226>
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	85 e4       	ldi	r24, 0x45	; 69
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3b2:	83 e3       	ldi	r24, 0x33	; 51
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_Z8TFT_initv+0x23a>
     3ba:	6f e3       	ldi	r22, 0x3F	; 63
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	86 e4       	ldi	r24, 0x46	; 70
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3c6:	83 e3       	ldi	r24, 0x33	; 51
     3c8:	97 e0       	ldi	r25, 0x07	; 7
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <_Z8TFT_initv+0x24e>
     3ce:	67 e0       	ldi	r22, 0x07	; 7
     3d0:	77 e0       	ldi	r23, 0x07	; 7
     3d2:	80 e3       	ldi	r24, 0x30	; 48
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3da:	83 e3       	ldi	r24, 0x33	; 51
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <_Z8TFT_initv+0x262>
     3e2:	64 e0       	ldi	r22, 0x04	; 4
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	81 e3       	ldi	r24, 0x31	; 49
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     3ee:	83 e3       	ldi	r24, 0x33	; 51
     3f0:	97 e0       	ldi	r25, 0x07	; 7
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_Z8TFT_initv+0x276>
     3f6:	64 e0       	ldi	r22, 0x04	; 4
     3f8:	72 e0       	ldi	r23, 0x02	; 2
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     402:	83 e3       	ldi	r24, 0x33	; 51
     404:	97 e0       	ldi	r25, 0x07	; 7
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	75 e0       	ldi	r23, 0x05	; 5
     40e:	83 e3       	ldi	r24, 0x33	; 51
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     416:	83 e3       	ldi	r24, 0x33	; 51
     418:	97 e0       	ldi	r25, 0x07	; 7
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41e:	67 e0       	ldi	r22, 0x07	; 7
     420:	75 e0       	ldi	r23, 0x05	; 5
     422:	84 e3       	ldi	r24, 0x34	; 52
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     42a:	83 e3       	ldi	r24, 0x33	; 51
     42c:	97 e0       	ldi	r25, 0x07	; 7
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	64 e0       	ldi	r22, 0x04	; 4
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	85 e3       	ldi	r24, 0x35	; 53
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     43e:	83 e3       	ldi	r24, 0x33	; 51
     440:	97 e0       	ldi	r25, 0x07	; 7
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	72 e0       	ldi	r23, 0x02	; 2
     44a:	86 e3       	ldi	r24, 0x36	; 54
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     452:	83 e3       	ldi	r24, 0x33	; 51
     454:	97 e0       	ldi	r25, 0x07	; 7
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	75 e0       	ldi	r23, 0x05	; 5
     45e:	87 e3       	ldi	r24, 0x37	; 55
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     466:	83 e3       	ldi	r24, 0x33	; 51
     468:	97 e0       	ldi	r25, 0x07	; 7
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	73 e0       	ldi	r23, 0x03	; 3
     472:	8a e3       	ldi	r24, 0x3A	; 58
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     47a:	83 e3       	ldi	r24, 0x33	; 51
     47c:	97 e0       	ldi	r25, 0x07	; 7
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	73 e0       	ldi	r23, 0x03	; 3
     486:	8b e3       	ldi	r24, 0x3B	; 59
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     48e:	83 e3       	ldi	r24, 0x33	; 51
     490:	97 e0       	ldi	r25, 0x07	; 7
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e2       	ldi	r24, 0x23	; 35
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4a2:	83 e3       	ldi	r24, 0x33	; 51
     4a4:	97 e0       	ldi	r25, 0x07	; 7
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	84 e2       	ldi	r24, 0x24	; 36
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4b6:	83 e3       	ldi	r24, 0x33	; 51
     4b8:	97 e0       	ldi	r25, 0x07	; 7
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8f e4       	ldi	r24, 0x4F	; 79
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	8e e4       	ldi	r24, 0x4E	; 78
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	82 e2       	ldi	r24, 0x22	; 34
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     4e0:	08 95       	ret

000004e2 <_Z14TFT_set_cursorjj>:
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	eb 01       	movw	r28, r22
     4e8:	bc 01       	movw	r22, r24
     4ea:	8e e4       	ldi	r24, 0x4E	; 78
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     4f2:	60 e4       	ldi	r22, 0x40	; 64
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	6c 1b       	sub	r22, r28
     4f8:	7d 0b       	sbc	r23, r29
     4fa:	8f e4       	ldi	r24, 0x4F	; 79
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z14TFT_write_pairjj>
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <_Z17read_touch_coordsPjS_>:
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	8b 01       	movw	r16, r22
     51e:	83 e3       	ldi	r24, 0x33	; 51
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <_Z17read_touch_coordsPjS_+0x10>
     526:	c4 98       	cbi	0x18, 4	; 24
     528:	80 e9       	ldi	r24, 0x90	; 144
     52a:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     52e:	e3 e3       	ldi	r30, 0x33	; 51
     530:	f7 e0       	ldi	r31, 0x07	; 7
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <_Z17read_touch_coordsPjS_+0x20>
     536:	c7 9a       	sbi	0x18, 7	; 24
	...
     540:	c7 98       	cbi	0x18, 7	; 24
	...
     54a:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     54e:	9c 01       	movw	r18, r24
     550:	20 55       	subi	r18, 0x50	; 80
     552:	31 09       	sbc	r19, r1
     554:	ab ea       	ldi	r26, 0xAB	; 171
     556:	ba ea       	ldi	r27, 0xAA	; 170
     558:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__umulhisi3>
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	96 95       	lsr	r25
     562:	87 95       	ror	r24
     564:	f8 01       	movw	r30, r16
     566:	91 83       	std	Z+1, r25	; 0x01
     568:	80 83       	st	Z, r24
     56a:	80 ed       	ldi	r24, 0xD0	; 208
     56c:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z15TFT_touch_writeh>
     570:	c7 9a       	sbi	0x18, 7	; 24
	...
     57a:	c7 98       	cbi	0x18, 7	; 24
	...
     584:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z14TFT_touch_readv>
     588:	80 55       	subi	r24, 0x50	; 80
     58a:	91 09       	sbc	r25, r1
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	99 83       	std	Y+1, r25	; 0x01
     59a:	88 83       	st	Y, r24
     59c:	c4 9a       	sbi	0x18, 4	; 24
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	08 95       	ret

000005a8 <_Z20set_background_colorj>:
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	8c 01       	movw	r16, r24
     5b4:	2f e3       	ldi	r18, 0x3F	; 63
     5b6:	31 e0       	ldi	r19, 0x01	; 1
     5b8:	4f ee       	ldi	r20, 0xEF	; 239
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 8c 00 	call	0x118	; 0x118 <_Z15TFT_set_addressjjjj>
     5c8:	68 94       	set
     5ca:	ee 24       	eor	r14, r14
     5cc:	e6 f8       	bld	r14, 6
     5ce:	ff 24       	eor	r15, r15
     5d0:	f3 94       	inc	r15
     5d2:	c0 ef       	ldi	r28, 0xF0	; 240
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     5dc:	c1 50       	subi	r28, 0x01	; 1
     5de:	d1 f7       	brne	.-12     	; 0x5d4 <_Z20set_background_colorj+0x2c>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	e8 1a       	sub	r14, r24
     5e4:	f1 08       	sbc	r15, r1
     5e6:	a9 f7       	brne	.-22     	; 0x5d2 <_Z20set_background_colorj+0x2a>
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <_Z10draw_pixeljjj>:
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ea 01       	movw	r28, r20
     5fa:	af 98       	cbi	0x15, 7	; 21
     5fc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Z14TFT_set_cursorjj>
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	ce 01       	movw	r24, r28
     604:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z9TFT_writejh>
     608:	af 9a       	sbi	0x15, 7	; 21
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <_Z15draw_font_pixeljjjh>:
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	22 23       	and	r18, r18
     62a:	e9 f0       	breq	.+58     	; 0x666 <_Z15draw_font_pixeljjjh+0x56>
     62c:	a2 2e       	mov	r10, r18
     62e:	6a 01       	movw	r12, r20
     630:	4b 01       	movw	r8, r22
     632:	08 2f       	mov	r16, r24
     634:	19 2f       	mov	r17, r25
     636:	b1 2c       	mov	r11, r1
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	82 0f       	add	r24, r18
     63c:	7b 01       	movw	r14, r22
     63e:	9f ef       	ldi	r25, 0xFF	; 255
     640:	e9 1a       	sub	r14, r25
     642:	f9 0a       	sbc	r15, r25
     644:	e8 0e       	add	r14, r24
     646:	f1 1c       	adc	r15, r1
     648:	e4 01       	movw	r28, r8
     64a:	a6 01       	movw	r20, r12
     64c:	be 01       	movw	r22, r28
     64e:	c8 01       	movw	r24, r16
     650:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     654:	21 96       	adiw	r28, 0x01	; 1
     656:	ce 15       	cp	r28, r14
     658:	df 05       	cpc	r29, r15
     65a:	b9 f7       	brne	.-18     	; 0x64a <_Z15draw_font_pixeljjjh+0x3a>
     65c:	b3 94       	inc	r11
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	ab 10       	cpse	r10, r11
     664:	f1 cf       	rjmp	.-30     	; 0x648 <_Z15draw_font_pixeljjjh+0x38>
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <_Z10print_charjjhjjh>:
     680:	2f 92       	push	r2
     682:	3f 92       	push	r3
     684:	4f 92       	push	r4
     686:	5f 92       	push	r5
     688:	6f 92       	push	r6
     68a:	7f 92       	push	r7
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <_Z10print_charjjhjjh+0x26>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <_Z10print_charjjhjjh+0x28>
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	6b 01       	movw	r12, r22
     6b2:	54 2e       	mov	r5, r20
     6b4:	39 01       	movw	r6, r18
     6b6:	18 01       	movw	r2, r16
     6b8:	f1 2c       	mov	r15, r1
     6ba:	47 01       	movw	r8, r14
     6bc:	88 0c       	add	r8, r8
     6be:	99 1c       	adc	r9, r9
     6c0:	88 0c       	add	r8, r8
     6c2:	99 1c       	adc	r9, r9
     6c4:	c4 01       	movw	r24, r8
     6c6:	8e 0d       	add	r24, r14
     6c8:	9f 1d       	adc	r25, r15
     6ca:	9c 01       	movw	r18, r24
     6cc:	22 50       	subi	r18, 0x02	; 2
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	49 01       	movw	r8, r18
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f5 e0       	ldi	r31, 0x05	; 5
     6d6:	4f 2e       	mov	r4, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	a4 2e       	mov	r10, r20
     6dc:	b1 2c       	mov	r11, r1
     6de:	f4 01       	movw	r30, r8
     6e0:	e1 90       	ld	r14, Z+
     6e2:	4f 01       	movw	r8, r30
     6e4:	09 81       	ldd	r16, Y+1	; 0x01
     6e6:	1a 81       	ldd	r17, Y+2	; 0x02
     6e8:	1c 82       	std	Y+4, r1	; 0x04
     6ea:	1b 82       	std	Y+3, r1	; 0x03
     6ec:	f1 2c       	mov	r15, r1
     6ee:	c7 01       	movw	r24, r14
     6f0:	0b 80       	ldd	r0, Y+3	; 0x03
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <_Z10print_charjjhjjh+0x78>
     6f4:	95 95       	asr	r25
     6f6:	87 95       	ror	r24
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <_Z10print_charjjhjjh+0x74>
     6fc:	80 ff       	sbrs	r24, 0
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <_Z10print_charjjhjjh+0x8e>
     700:	25 2d       	mov	r18, r5
     702:	a3 01       	movw	r20, r6
     704:	b6 01       	movw	r22, r12
     706:	c8 01       	movw	r24, r16
     708:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     70c:	06 c0       	rjmp	.+12     	; 0x71a <_Z10print_charjjhjjh+0x9a>
     70e:	25 2d       	mov	r18, r5
     710:	a1 01       	movw	r20, r2
     712:	b6 01       	movw	r22, r12
     714:	c8 01       	movw	r24, r16
     716:	0e 94 08 03 	call	0x610	; 0x610 <_Z15draw_font_pixeljjjh>
     71a:	2b 81       	ldd	r18, Y+3	; 0x03
     71c:	3c 81       	ldd	r19, Y+4	; 0x04
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	3c 83       	std	Y+4, r19	; 0x04
     724:	2b 83       	std	Y+3, r18	; 0x03
     726:	0a 0d       	add	r16, r10
     728:	1b 1d       	adc	r17, r11
     72a:	28 30       	cpi	r18, 0x08	; 8
     72c:	31 05       	cpc	r19, r1
     72e:	f9 f6       	brne	.-66     	; 0x6ee <_Z10print_charjjhjjh+0x6e>
     730:	ca 0c       	add	r12, r10
     732:	db 1c       	adc	r13, r11
     734:	4a 94       	dec	r4
     736:	41 10       	cpse	r4, r1
     738:	d2 cf       	rjmp	.-92     	; 0x6de <_Z10print_charjjhjjh+0x5e>
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	bf 90       	pop	r11
     754:	af 90       	pop	r10
     756:	9f 90       	pop	r9
     758:	8f 90       	pop	r8
     75a:	7f 90       	pop	r7
     75c:	6f 90       	pop	r6
     75e:	5f 90       	pop	r5
     760:	4f 90       	pop	r4
     762:	3f 90       	pop	r3
     764:	2f 90       	pop	r2
     766:	08 95       	ret

00000768 <_Z12print_stringjjhjjPKc>:
     768:	3f 92       	push	r3
     76a:	4f 92       	push	r4
     76c:	5f 92       	push	r5
     76e:	6f 92       	push	r6
     770:	7f 92       	push	r7
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
     78c:	34 2e       	mov	r3, r20
     78e:	49 01       	movw	r8, r18
     790:	28 01       	movw	r4, r16
     792:	67 01       	movw	r12, r14
     794:	a4 2e       	mov	r10, r20
     796:	b1 2c       	mov	r11, r1
     798:	95 01       	movw	r18, r10
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	a2 0e       	add	r10, r18
     7a4:	b3 1e       	adc	r11, r19
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	a2 1a       	sub	r10, r18
     7aa:	b2 0a       	sbc	r11, r18
     7ac:	f1 2c       	mov	r15, r1
     7ae:	3c 01       	movw	r6, r24
     7b0:	64 0e       	add	r6, r20
     7b2:	71 1c       	adc	r7, r1
     7b4:	f6 01       	movw	r30, r12
     7b6:	ef 0d       	add	r30, r15
     7b8:	f1 1d       	adc	r31, r1
     7ba:	80 81       	ld	r24, Z
     7bc:	80 32       	cpi	r24, 0x20	; 32
     7be:	61 f4       	brne	.+24     	; 0x7d8 <_Z12print_stringjjhjjPKc+0x70>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	fa e1       	ldi	r31, 0x1A	; 26
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	82 01       	movw	r16, r4
     7ca:	94 01       	movw	r18, r8
     7cc:	43 2d       	mov	r20, r3
     7ce:	be 01       	movw	r22, r28
     7d0:	c3 01       	movw	r24, r6
     7d2:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7d6:	a5 c0       	rjmp	.+330    	; 0x922 <__stack+0xc3>
     7d8:	80 33       	cpi	r24, 0x30	; 48
     7da:	61 f4       	brne	.+24     	; 0x7f4 <_Z12print_stringjjhjjPKc+0x8c>
     7dc:	0f 2e       	mov	r0, r31
     7de:	fb e1       	ldi	r31, 0x1B	; 27
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	82 01       	movw	r16, r4
     7e6:	94 01       	movw	r18, r8
     7e8:	43 2d       	mov	r20, r3
     7ea:	be 01       	movw	r22, r28
     7ec:	c3 01       	movw	r24, r6
     7ee:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     7f2:	97 c0       	rjmp	.+302    	; 0x922 <__stack+0xc3>
     7f4:	81 33       	cpi	r24, 0x31	; 49
     7f6:	61 f4       	brne	.+24     	; 0x810 <_Z12print_stringjjhjjPKc+0xa8>
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fc e1       	ldi	r31, 0x1C	; 28
     7fc:	ef 2e       	mov	r14, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	82 01       	movw	r16, r4
     802:	94 01       	movw	r18, r8
     804:	43 2d       	mov	r20, r3
     806:	be 01       	movw	r22, r28
     808:	c3 01       	movw	r24, r6
     80a:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     80e:	89 c0       	rjmp	.+274    	; 0x922 <__stack+0xc3>
     810:	82 33       	cpi	r24, 0x32	; 50
     812:	61 f4       	brne	.+24     	; 0x82c <_Z12print_stringjjhjjPKc+0xc4>
     814:	0f 2e       	mov	r0, r31
     816:	fd e1       	ldi	r31, 0x1D	; 29
     818:	ef 2e       	mov	r14, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	82 01       	movw	r16, r4
     81e:	94 01       	movw	r18, r8
     820:	43 2d       	mov	r20, r3
     822:	be 01       	movw	r22, r28
     824:	c3 01       	movw	r24, r6
     826:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     82a:	7b c0       	rjmp	.+246    	; 0x922 <__stack+0xc3>
     82c:	83 33       	cpi	r24, 0x33	; 51
     82e:	61 f4       	brne	.+24     	; 0x848 <_Z12print_stringjjhjjPKc+0xe0>
     830:	0f 2e       	mov	r0, r31
     832:	fe e1       	ldi	r31, 0x1E	; 30
     834:	ef 2e       	mov	r14, r31
     836:	f0 2d       	mov	r31, r0
     838:	82 01       	movw	r16, r4
     83a:	94 01       	movw	r18, r8
     83c:	43 2d       	mov	r20, r3
     83e:	be 01       	movw	r22, r28
     840:	c3 01       	movw	r24, r6
     842:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     846:	6d c0       	rjmp	.+218    	; 0x922 <__stack+0xc3>
     848:	84 33       	cpi	r24, 0x34	; 52
     84a:	61 f4       	brne	.+24     	; 0x864 <__stack+0x5>
     84c:	0f 2e       	mov	r0, r31
     84e:	ff e1       	ldi	r31, 0x1F	; 31
     850:	ef 2e       	mov	r14, r31
     852:	f0 2d       	mov	r31, r0
     854:	82 01       	movw	r16, r4
     856:	94 01       	movw	r18, r8
     858:	43 2d       	mov	r20, r3
     85a:	be 01       	movw	r22, r28
     85c:	c3 01       	movw	r24, r6
     85e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     862:	5f c0       	rjmp	.+190    	; 0x922 <__stack+0xc3>
     864:	85 33       	cpi	r24, 0x35	; 53
     866:	59 f4       	brne	.+22     	; 0x87e <__stack+0x1f>
     868:	68 94       	set
     86a:	ee 24       	eor	r14, r14
     86c:	e5 f8       	bld	r14, 5
     86e:	82 01       	movw	r16, r4
     870:	94 01       	movw	r18, r8
     872:	43 2d       	mov	r20, r3
     874:	be 01       	movw	r22, r28
     876:	c3 01       	movw	r24, r6
     878:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     87c:	52 c0       	rjmp	.+164    	; 0x922 <__stack+0xc3>
     87e:	86 33       	cpi	r24, 0x36	; 54
     880:	61 f4       	brne	.+24     	; 0x89a <__stack+0x3b>
     882:	0f 2e       	mov	r0, r31
     884:	f1 e2       	ldi	r31, 0x21	; 33
     886:	ef 2e       	mov	r14, r31
     888:	f0 2d       	mov	r31, r0
     88a:	82 01       	movw	r16, r4
     88c:	94 01       	movw	r18, r8
     88e:	43 2d       	mov	r20, r3
     890:	be 01       	movw	r22, r28
     892:	c3 01       	movw	r24, r6
     894:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     898:	44 c0       	rjmp	.+136    	; 0x922 <__stack+0xc3>
     89a:	87 33       	cpi	r24, 0x37	; 55
     89c:	61 f4       	brne	.+24     	; 0x8b6 <__stack+0x57>
     89e:	0f 2e       	mov	r0, r31
     8a0:	f2 e2       	ldi	r31, 0x22	; 34
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	82 01       	movw	r16, r4
     8a8:	94 01       	movw	r18, r8
     8aa:	43 2d       	mov	r20, r3
     8ac:	be 01       	movw	r22, r28
     8ae:	c3 01       	movw	r24, r6
     8b0:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8b4:	36 c0       	rjmp	.+108    	; 0x922 <__stack+0xc3>
     8b6:	88 33       	cpi	r24, 0x38	; 56
     8b8:	61 f4       	brne	.+24     	; 0x8d2 <__stack+0x73>
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f3 e2       	ldi	r31, 0x23	; 35
     8be:	ef 2e       	mov	r14, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	82 01       	movw	r16, r4
     8c4:	94 01       	movw	r18, r8
     8c6:	43 2d       	mov	r20, r3
     8c8:	be 01       	movw	r22, r28
     8ca:	c3 01       	movw	r24, r6
     8cc:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8d0:	28 c0       	rjmp	.+80     	; 0x922 <__stack+0xc3>
     8d2:	89 33       	cpi	r24, 0x39	; 57
     8d4:	61 f4       	brne	.+24     	; 0x8ee <__stack+0x8f>
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f4 e2       	ldi	r31, 0x24	; 36
     8da:	ef 2e       	mov	r14, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	82 01       	movw	r16, r4
     8e0:	94 01       	movw	r18, r8
     8e2:	43 2d       	mov	r20, r3
     8e4:	be 01       	movw	r22, r28
     8e6:	c3 01       	movw	r24, r6
     8e8:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     8ec:	1a c0       	rjmp	.+52     	; 0x922 <__stack+0xc3>
     8ee:	8a 33       	cpi	r24, 0x3A	; 58
     8f0:	61 f4       	brne	.+24     	; 0x90a <__stack+0xab>
     8f2:	0f 2e       	mov	r0, r31
     8f4:	f5 e2       	ldi	r31, 0x25	; 37
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f0 2d       	mov	r31, r0
     8fa:	82 01       	movw	r16, r4
     8fc:	94 01       	movw	r18, r8
     8fe:	43 2d       	mov	r20, r3
     900:	be 01       	movw	r22, r28
     902:	c3 01       	movw	r24, r6
     904:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0xc3>
     90a:	0f 2e       	mov	r0, r31
     90c:	ff eb       	ldi	r31, 0xBF	; 191
     90e:	ef 2e       	mov	r14, r31
     910:	f0 2d       	mov	r31, r0
     912:	e8 0e       	add	r14, r24
     914:	82 01       	movw	r16, r4
     916:	94 01       	movw	r18, r8
     918:	43 2d       	mov	r20, r3
     91a:	be 01       	movw	r22, r28
     91c:	c3 01       	movw	r24, r6
     91e:	0e 94 40 03 	call	0x680	; 0x680 <_Z10print_charjjhjjh>
     922:	f3 94       	inc	r15
     924:	ca 0d       	add	r28, r10
     926:	db 1d       	adc	r29, r11
     928:	f6 01       	movw	r30, r12
     92a:	ef 0d       	add	r30, r15
     92c:	f1 1d       	adc	r31, r1
     92e:	80 81       	ld	r24, Z
     930:	81 11       	cpse	r24, r1
     932:	40 cf       	rjmp	.-384    	; 0x7b4 <_Z12print_stringjjhjjPKc+0x4c>
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	ff 90       	pop	r15
     93e:	ef 90       	pop	r14
     940:	df 90       	pop	r13
     942:	cf 90       	pop	r12
     944:	bf 90       	pop	r11
     946:	af 90       	pop	r10
     948:	9f 90       	pop	r9
     94a:	8f 90       	pop	r8
     94c:	7f 90       	pop	r7
     94e:	6f 90       	pop	r6
     950:	5f 90       	pop	r5
     952:	4f 90       	pop	r4
     954:	3f 90       	pop	r3
     956:	08 95       	ret

00000958 <_Z11draw_h_linejjjj>:
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	6c 01       	movw	r12, r24
     96a:	eb 01       	movw	r28, r22
     96c:	8a 01       	movw	r16, r20
     96e:	79 01       	movw	r14, r18
     970:	64 17       	cp	r22, r20
     972:	75 07       	cpc	r23, r21
     974:	48 f4       	brcc	.+18     	; 0x988 <_Z11draw_h_linejjjj+0x30>
     976:	a7 01       	movw	r20, r14
     978:	be 01       	movw	r22, r28
     97a:	c6 01       	movw	r24, r12
     97c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     980:	21 96       	adiw	r28, 0x01	; 1
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	b8 f3       	brcs	.-18     	; 0x976 <_Z11draw_h_linejjjj+0x1e>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	08 95       	ret

0000099a <_Z11draw_v_linejjjj>:
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	6c 01       	movw	r12, r24
     9ac:	eb 01       	movw	r28, r22
     9ae:	8a 01       	movw	r16, r20
     9b0:	79 01       	movw	r14, r18
     9b2:	64 17       	cp	r22, r20
     9b4:	75 07       	cpc	r23, r21
     9b6:	48 f4       	brcc	.+18     	; 0x9ca <_Z11draw_v_linejjjj+0x30>
     9b8:	a7 01       	movw	r20, r14
     9ba:	b6 01       	movw	r22, r12
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     9c2:	21 96       	adiw	r28, 0x01	; 1
     9c4:	c0 17       	cp	r28, r16
     9c6:	d1 07       	cpc	r29, r17
     9c8:	b8 f3       	brcs	.-18     	; 0x9b8 <_Z11draw_v_linejjjj+0x1e>
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <_Z13my_draw_crossjjjj>:
     9dc:	5f 92       	push	r5
     9de:	6f 92       	push	r6
     9e0:	7f 92       	push	r7
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	5c 01       	movw	r10, r24
     9fc:	a4 1a       	sub	r10, r20
     9fe:	b5 0a       	sbc	r11, r21
     a00:	6b 01       	movw	r12, r22
     a02:	c4 1a       	sub	r12, r20
     a04:	d5 0a       	sbc	r13, r21
     a06:	7c 01       	movw	r14, r24
     a08:	e4 0e       	add	r14, r20
     a0a:	f5 1e       	adc	r15, r21
     a0c:	8a 01       	movw	r16, r20
     a0e:	00 0f       	add	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	01 15       	cp	r16, r1
     a14:	11 05       	cpc	r17, r1
     a16:	d9 f0       	breq	.+54     	; 0xa4e <_Z13my_draw_crossjjjj+0x72>
     a18:	49 01       	movw	r8, r18
     a1a:	61 2c       	mov	r6, r1
     a1c:	71 2c       	mov	r7, r1
     a1e:	51 2c       	mov	r5, r1
     a20:	e6 01       	movw	r28, r12
     a22:	c6 0d       	add	r28, r6
     a24:	d7 1d       	adc	r29, r7
     a26:	a4 01       	movw	r20, r8
     a28:	be 01       	movw	r22, r28
     a2a:	c5 01       	movw	r24, r10
     a2c:	86 0d       	add	r24, r6
     a2e:	97 1d       	adc	r25, r7
     a30:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     a34:	a4 01       	movw	r20, r8
     a36:	be 01       	movw	r22, r28
     a38:	c7 01       	movw	r24, r14
     a3a:	86 19       	sub	r24, r6
     a3c:	97 09       	sbc	r25, r7
     a3e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     a42:	53 94       	inc	r5
     a44:	65 2c       	mov	r6, r5
     a46:	71 2c       	mov	r7, r1
     a48:	60 16       	cp	r6, r16
     a4a:	71 06       	cpc	r7, r17
     a4c:	48 f3       	brcs	.-46     	; 0xa20 <_Z13my_draw_crossjjjj+0x44>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	9f 90       	pop	r9
     a64:	8f 90       	pop	r8
     a66:	7f 90       	pop	r7
     a68:	6f 90       	pop	r6
     a6a:	5f 90       	pop	r5
     a6c:	08 95       	ret

00000a6e <_Z19adafruit_drawCirclejjjj>:

void adafruit_drawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) { //unutar adaFruit library, bolji zato jer mu das srediste, i radius, a ovaj draw_cirle ne kuzim kako radi
     a6e:	2f 92       	push	r2
     a70:	3f 92       	push	r3
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <_Z19adafruit_drawCirclejjjj+0x26>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <_Z19adafruit_drawCirclejjjj+0x28>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <_Z19adafruit_drawCirclejjjj+0x2a>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	6c 01       	movw	r12, r24
     a9e:	4b 01       	movw	r8, r22
     aa0:	5a 83       	std	Y+2, r21	; 0x02
     aa2:	49 83       	std	Y+1, r20	; 0x01
     aa4:	3c 83       	std	Y+4, r19	; 0x04
     aa6:	2b 83       	std	Y+3, r18	; 0x03
	int16_t f = 1 - r;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	7c 01       	movw	r14, r24
     aae:	e4 1a       	sub	r14, r20
     ab0:	f5 0a       	sbc	r15, r21
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
     ab2:	1a 01       	movw	r2, r20
     ab4:	31 94       	neg	r3
     ab6:	21 94       	neg	r2
     ab8:	31 08       	sbc	r3, r1
     aba:	22 0c       	add	r2, r2
     abc:	33 1c       	adc	r3, r3
	int16_t x = 0;
	int16_t y = r;
     abe:	8a 01       	movw	r16, r20

	draw_pixel(x0, y0 + r, color);
     ac0:	ba 01       	movw	r22, r20
     ac2:	68 0d       	add	r22, r8
     ac4:	79 1d       	adc	r23, r9
     ac6:	a9 01       	movw	r20, r18
     ac8:	c6 01       	movw	r24, r12
     aca:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0, y0 - r, color);
     ace:	b4 01       	movw	r22, r8
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	3a 81       	ldd	r19, Y+2	; 0x02
     ad4:	62 1b       	sub	r22, r18
     ad6:	73 0b       	sbc	r23, r19
     ad8:	4b 81       	ldd	r20, Y+3	; 0x03
     ada:	5c 81       	ldd	r21, Y+4	; 0x04
     adc:	c6 01       	movw	r24, r12
     ade:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0 + r, y0, color);
     ae2:	4b 81       	ldd	r20, Y+3	; 0x03
     ae4:	5c 81       	ldd	r21, Y+4	; 0x04
     ae6:	b4 01       	movw	r22, r8
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	8c 0d       	add	r24, r12
     aee:	9d 1d       	adc	r25, r13
     af0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0 - r, y0, color);
     af4:	4b 81       	ldd	r20, Y+3	; 0x03
     af6:	5c 81       	ldd	r21, Y+4	; 0x04
     af8:	b4 01       	movw	r22, r8
     afa:	c6 01       	movw	r24, r12
     afc:	29 81       	ldd	r18, Y+1	; 0x01
     afe:	3a 81       	ldd	r19, Y+2	; 0x02
     b00:	82 1b       	sub	r24, r18
     b02:	93 0b       	sbc	r25, r19
     b04:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>

	while (x < y) {
     b08:	10 16       	cp	r1, r16
     b0a:	11 06       	cpc	r1, r17
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <_Z19adafruit_drawCirclejjjj+0xa2>
     b0e:	74 c0       	rjmp	.+232    	; 0xbf8 <_Z19adafruit_drawCirclejjjj+0x18a>
     b10:	1e 82       	std	Y+6, r1	; 0x06
     b12:	1d 82       	std	Y+5, r1	; 0x05
     b14:	66 24       	eor	r6, r6
     b16:	63 94       	inc	r6
     b18:	71 2c       	mov	r7, r1
		if (f >= 0) {
     b1a:	ff 20       	and	r15, r15
     b1c:	3c f0       	brlt	.+14     	; 0xb2c <_Z19adafruit_drawCirclejjjj+0xbe>
			y--;
     b1e:	01 50       	subi	r16, 0x01	; 1
     b20:	11 09       	sbc	r17, r1
			ddF_y += 2;
     b22:	32 e0       	ldi	r19, 0x02	; 2
     b24:	23 0e       	add	r2, r19
     b26:	31 1c       	adc	r3, r1
			f += ddF_y;
     b28:	e2 0c       	add	r14, r2
     b2a:	f3 1c       	adc	r15, r3
		}
		x++;
     b2c:	8d 81       	ldd	r24, Y+5	; 0x05
     b2e:	9e 81       	ldd	r25, Y+6	; 0x06
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
		ddF_x += 2;
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	69 0e       	add	r6, r25
     b3a:	71 1c       	adc	r7, r1
		f += ddF_x;
     b3c:	e6 0c       	add	r14, r6
     b3e:	f7 1c       	adc	r15, r7
     b40:	ad 80       	ldd	r10, Y+5	; 0x05
     b42:	be 80       	ldd	r11, Y+6	; 0x06
     b44:	ac 0c       	add	r10, r12
     b46:	bd 1c       	adc	r11, r13

		draw_pixel(x0 + x, y0 + y, color);
     b48:	4b 81       	ldd	r20, Y+3	; 0x03
     b4a:	5c 81       	ldd	r21, Y+4	; 0x04
     b4c:	94 01       	movw	r18, r8
     b4e:	20 0f       	add	r18, r16
     b50:	31 1f       	adc	r19, r17
     b52:	3a 83       	std	Y+2, r19	; 0x02
     b54:	29 83       	std	Y+1, r18	; 0x01
     b56:	b9 01       	movw	r22, r18
     b58:	c5 01       	movw	r24, r10
     b5a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     b5e:	26 01       	movw	r4, r12
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	48 1a       	sub	r4, r24
     b66:	59 0a       	sbc	r5, r25
		draw_pixel(x0 - x, y0 + y, color);
     b68:	4b 81       	ldd	r20, Y+3	; 0x03
     b6a:	5c 81       	ldd	r21, Y+4	; 0x04
     b6c:	69 81       	ldd	r22, Y+1	; 0x01
     b6e:	7a 81       	ldd	r23, Y+2	; 0x02
     b70:	c2 01       	movw	r24, r4
     b72:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 + x, y0 - y, color);
     b76:	4b 81       	ldd	r20, Y+3	; 0x03
     b78:	5c 81       	ldd	r21, Y+4	; 0x04
     b7a:	94 01       	movw	r18, r8
     b7c:	20 1b       	sub	r18, r16
     b7e:	31 0b       	sbc	r19, r17
     b80:	3a 83       	std	Y+2, r19	; 0x02
     b82:	29 83       	std	Y+1, r18	; 0x01
     b84:	b9 01       	movw	r22, r18
     b86:	c5 01       	movw	r24, r10
     b88:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - x, y0 - y, color);
     b8c:	4b 81       	ldd	r20, Y+3	; 0x03
     b8e:	5c 81       	ldd	r21, Y+4	; 0x04
     b90:	69 81       	ldd	r22, Y+1	; 0x01
     b92:	7a 81       	ldd	r23, Y+2	; 0x02
     b94:	c2 01       	movw	r24, r4
     b96:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     b9a:	ad 80       	ldd	r10, Y+5	; 0x05
     b9c:	be 80       	ldd	r11, Y+6	; 0x06
     b9e:	a8 0c       	add	r10, r8
     ba0:	b9 1c       	adc	r11, r9
		draw_pixel(x0 + y, y0 + x, color);
     ba2:	4b 81       	ldd	r20, Y+3	; 0x03
     ba4:	5c 81       	ldd	r21, Y+4	; 0x04
     ba6:	b5 01       	movw	r22, r10
     ba8:	26 01       	movw	r4, r12
     baa:	40 0e       	add	r4, r16
     bac:	51 1e       	adc	r5, r17
     bae:	c2 01       	movw	r24, r4
     bb0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - y, y0 + x, color);
     bb4:	4b 81       	ldd	r20, Y+3	; 0x03
     bb6:	5c 81       	ldd	r21, Y+4	; 0x04
     bb8:	b5 01       	movw	r22, r10
     bba:	c6 01       	movw	r24, r12
     bbc:	80 1b       	sub	r24, r16
     bbe:	91 0b       	sbc	r25, r17
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
     bc8:	54 01       	movw	r10, r8
     bca:	2d 81       	ldd	r18, Y+5	; 0x05
     bcc:	3e 81       	ldd	r19, Y+6	; 0x06
     bce:	a2 1a       	sub	r10, r18
     bd0:	b3 0a       	sbc	r11, r19
		draw_pixel(x0 + y, y0 - x, color);
     bd2:	4b 81       	ldd	r20, Y+3	; 0x03
     bd4:	5c 81       	ldd	r21, Y+4	; 0x04
     bd6:	b5 01       	movw	r22, r10
     bd8:	c2 01       	movw	r24, r4
     bda:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
		draw_pixel(x0 - y, y0 - x, color);
     bde:	4b 81       	ldd	r20, Y+3	; 0x03
     be0:	5c 81       	ldd	r21, Y+4	; 0x04
     be2:	b5 01       	movw	r22, r10
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z10draw_pixeljjj>
	draw_pixel(x0, y0 + r, color);
	draw_pixel(x0, y0 - r, color);
	draw_pixel(x0 + r, y0, color);
	draw_pixel(x0 - r, y0, color);

	while (x < y) {
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	80 17       	cp	r24, r16
     bf2:	91 07       	cpc	r25, r17
     bf4:	0c f4       	brge	.+2      	; 0xbf8 <_Z19adafruit_drawCirclejjjj+0x18a>
     bf6:	91 cf       	rjmp	.-222    	; 0xb1a <_Z19adafruit_drawCirclejjjj+0xac>
		draw_pixel(x0 + y, y0 + x, color);
		draw_pixel(x0 - y, y0 + x, color);
		draw_pixel(x0 + y, y0 - x, color);
		draw_pixel(x0 - y, y0 - x, color);
	}
}
     bf8:	26 96       	adiw	r28, 0x06	; 6
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	9f 90       	pop	r9
     c1a:	8f 90       	pop	r8
     c1c:	7f 90       	pop	r7
     c1e:	6f 90       	pop	r6
     c20:	5f 90       	pop	r5
     c22:	4f 90       	pop	r4
     c24:	3f 90       	pop	r3
     c26:	2f 90       	pop	r2
     c28:	08 95       	ret

00000c2a <_Z14draw_rectanglejjjjj>:

// setting a color to the pixels of a rectangle
void draw_rectangle(uint16_t x, uint16_t y, uint16_t dx, uint16_t dy, uint16_t color) {
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	6c 01       	movw	r12, r24
     c40:	5b 01       	movw	r10, r22
     c42:	7a 01       	movw	r14, r20
	draw_h_line(x, y, y + dy, color);
     c44:	eb 01       	movw	r28, r22
     c46:	c2 0f       	add	r28, r18
     c48:	d3 1f       	adc	r29, r19
     c4a:	98 01       	movw	r18, r16
     c4c:	ae 01       	movw	r20, r28
     c4e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(x + dx, y, y + dy, color);
     c52:	ec 0c       	add	r14, r12
     c54:	fd 1c       	adc	r15, r13
     c56:	98 01       	movw	r18, r16
     c58:	ae 01       	movw	r20, r28
     c5a:	b5 01       	movw	r22, r10
     c5c:	c7 01       	movw	r24, r14
     c5e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_v_line(y, x, x + dx, color);
     c62:	98 01       	movw	r18, r16
     c64:	a7 01       	movw	r20, r14
     c66:	b6 01       	movw	r22, r12
     c68:	c5 01       	movw	r24, r10
     c6a:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(y + dy, x, x + dx, color);
     c6e:	98 01       	movw	r18, r16
     c70:	a7 01       	movw	r20, r14
     c72:	b6 01       	movw	r22, r12
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	08 95       	ret

00000c90 <_Z11check_touchjjjjjj>:

// check if the screen is being touched
uint8_t check_touch(uint16_t TP_X, uint16_t TP_Y, uint16_t x, uint16_t y, uint16_t dx, uint16_t dy) {
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	fc 01       	movw	r30, r24
	return TP_Y >= y && TP_Y <= y + dy && TP_X >= x && TP_X <= x + dx;
     c9a:	62 17       	cp	r22, r18
     c9c:	73 07       	cpc	r23, r19
     c9e:	80 f0       	brcs	.+32     	; 0xcc0 <_Z11check_touchjjjjjj+0x30>
     ca0:	e2 0e       	add	r14, r18
     ca2:	f3 1e       	adc	r15, r19
     ca4:	e6 16       	cp	r14, r22
     ca6:	f7 06       	cpc	r15, r23
     ca8:	68 f0       	brcs	.+26     	; 0xcc4 <_Z11check_touchjjjjjj+0x34>
     caa:	84 17       	cp	r24, r20
     cac:	95 07       	cpc	r25, r21
     cae:	60 f0       	brcs	.+24     	; 0xcc8 <_Z11check_touchjjjjjj+0x38>
     cb0:	04 0f       	add	r16, r20
     cb2:	15 1f       	adc	r17, r21
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 17       	cp	r16, r30
     cb8:	1f 07       	cpc	r17, r31
     cba:	38 f4       	brcc	.+14     	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <_Z11check_touchjjjjjj+0x3a>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
}
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	08 95       	ret

00000cd4 <_Z14print_keyboardPc>:
uint8_t currentPlayer = CROSS;	
uint8_t gameOver = 0;
uint8_t numberOfMoves = 0;	
	

void print_keyboard(char str[]) {
     cd4:	3f 92       	push	r3
     cd6:	4f 92       	push	r4
     cd8:	5f 92       	push	r5
     cda:	6f 92       	push	r6
     cdc:	7f 92       	push	r7
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <_Z14print_keyboardPc+0x24>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	3c 01       	movw	r6, r24
	uint8_t offset_x, offset_y;
	
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej ??
     cfe:	51 2c       	mov	r5, r1
		sprintf(tmp, "%c\0", str[i]);
     d00:	0f 2e       	mov	r0, r31
     d02:	fd e6       	ldi	r31, 0x6D	; 109
     d04:	8f 2e       	mov	r8, r31
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	9f 2e       	mov	r9, r31
     d0a:	f0 2d       	mov	r31, r0
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	5c 01       	movw	r10, r24
		draw_rectangle(KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     d12:	0f 2e       	mov	r0, r31
     d14:	f9 e3       	ldi	r31, 0x39	; 57
     d16:	3f 2e       	mov	r3, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f3 e2       	ldi	r31, 0x23	; 35
     d1e:	4f 2e       	mov	r4, r31
     d20:	f0 2d       	mov	r31, r0
	
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej ??
		sprintf(tmp, "%c\0", str[i]);
     d22:	f3 01       	movw	r30, r6
     d24:	81 91       	ld	r24, Z+
     d26:	3f 01       	movw	r6, r30
     d28:	1f 92       	push	r1
     d2a:	8f 93       	push	r24
     d2c:	9f 92       	push	r9
     d2e:	8f 92       	push	r8
     d30:	bf 92       	push	r11
     d32:	af 92       	push	r10
     d34:	0e 94 60 10 	call	0x20c0	; 0x20c0 <sprintf>
		draw_rectangle(KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
     d38:	53 9c       	mul	r5, r3
     d3a:	c1 2c       	mov	r12, r1
     d3c:	11 24       	eor	r1, r1
     d3e:	c6 94       	lsr	r12
     d40:	8c 2d       	mov	r24, r12
     d42:	88 0f       	add	r24, r24
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	8c 0d       	add	r24, r12
     d4a:	e5 2c       	mov	r14, r5
     d4c:	e8 1a       	sub	r14, r24
     d4e:	4e 9c       	mul	r4, r14
     d50:	70 01       	movw	r14, r0
     d52:	11 24       	eor	r1, r1
     d54:	4c 9c       	mul	r4, r12
     d56:	60 01       	movw	r12, r0
     d58:	11 24       	eor	r1, r1
     d5a:	b7 01       	movw	r22, r14
     d5c:	66 5f       	subi	r22, 0xF6	; 246
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	0f ef       	ldi	r16, 0xFF	; 255
     d62:	1f ef       	ldi	r17, 0xFF	; 255
     d64:	2e e1       	ldi	r18, 0x1E	; 30
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4e e1       	ldi	r20, 0x1E	; 30
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	c6 01       	movw	r24, r12
     d6e:	8a 5b       	subi	r24, 0xBA	; 186
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(KEY_Y + offset_y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE / 2), KEY_X + i%KEYS_IN_ONE_ROW *(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
     d76:	b7 01       	movw	r22, r14
     d78:	6f 5e       	subi	r22, 0xEF	; 239
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	75 01       	movw	r14, r10
     d7e:	0e ea       	ldi	r16, 0xAE	; 174
     d80:	1a e1       	ldi	r17, 0x1A	; 26
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	c6 01       	movw	r24, r12
     d8a:	87 5b       	subi	r24, 0xB7	; 183
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	uint8_t offset_x, offset_y;
	
	offset_x = (KEY_W - 1 * CHAR_W * FONT_SIZE) / 2;
	offset_y = (KEY_H - 1 * CHAR_H * FONT_SIZE) / 2;
	char tmp[2];
	for(uint8_t i = 0; i < 22; i++) { //ako stavim strlen(str) onda napise jos 3 neka cudna char-a, a ko stavim 22 sve okej ??
     d92:	53 94       	inc	r5
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	f6 e1       	ldi	r31, 0x16	; 22
     da2:	5f 12       	cpse	r5, r31
     da4:	be cf       	rjmp	.-132    	; 0xd22 <_Z14print_keyboardPc+0x4e>
		sprintf(tmp, "%c\0", str[i]);
		draw_rectangle(KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W, WHITE);
		print_string(KEY_Y + offset_y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE / 2), KEY_X + i%KEYS_IN_ONE_ROW *(KEY_W + BLANK_SPACE / 2) + offset_x, 3, WHITE, CYAN, tmp);
	}
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	3f 90       	pop	r3
     dcc:	08 95       	ret

00000dce <_Z14drawHomeScreenv>:


void drawHomeScreen() {
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (HS_W - strlen("NEW PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(HS_S_Y, HS_S_X, HS_H, HS_W, WHITE);
     dd6:	0f ef       	ldi	r16, 0xFF	; 255
     dd8:	1f ef       	ldi	r17, 0xFF	; 255
     dda:	28 e1       	ldi	r18, 0x18	; 24
     ddc:	31 e0       	ldi	r19, 0x01	; 1
     dde:	4c e3       	ldi	r20, 0x3C	; 60
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	64 e1       	ldi	r22, 0x14	; 20
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	8a e0       	ldi	r24, 0x0A	; 10
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(HS_S_Y + offset_y, HS_S_X + offset_x, 3, WHITE, CYAN, "NEW PLAYER\0");
     dee:	0f 2e       	mov	r0, r31
     df0:	f1 e7       	ldi	r31, 0x71	; 113
     df2:	ef 2e       	mov	r14, r31
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	ff 2e       	mov	r15, r31
     df8:	f0 2d       	mov	r31, r0
     dfa:	0e ea       	ldi	r16, 0xAE	; 174
     dfc:	1a e1       	ldi	r17, 0x1A	; 26
     dfe:	2f ef       	ldi	r18, 0xFF	; 255
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	43 e0       	ldi	r20, 0x03	; 3
     e04:	65 e5       	ldi	r22, 0x55	; 85
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	8c e1       	ldi	r24, 0x1C	; 28
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("CHOOSE PLAYER") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(CP_Y, CP_X, CP_H, CP_W, WHITE);
     e10:	0f ef       	ldi	r16, 0xFF	; 255
     e12:	1f ef       	ldi	r17, 0xFF	; 255
     e14:	28 e1       	ldi	r18, 0x18	; 24
     e16:	31 e0       	ldi	r19, 0x01	; 1
     e18:	4c e3       	ldi	r20, 0x3C	; 60
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	64 e1       	ldi	r22, 0x14	; 20
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 e5       	ldi	r24, 0x50	; 80
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(CP_Y + offset_y, CP_X + offset_x, 3, WHITE, CYAN, "CHOOSE PLAYER\0");
     e28:	0f 2e       	mov	r0, r31
     e2a:	fd e7       	ldi	r31, 0x7D	; 125
     e2c:	ef 2e       	mov	r14, r31
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	ff 2e       	mov	r15, r31
     e32:	f0 2d       	mov	r31, r0
     e34:	0e ea       	ldi	r16, 0xAE	; 174
     e36:	1a e1       	ldi	r17, 0x1A	; 26
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	3f ef       	ldi	r19, 0xFF	; 255
     e3c:	43 e0       	ldi	r20, 0x03	; 3
     e3e:	6e e3       	ldi	r22, 0x3E	; 62
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	82 e6       	ldi	r24, 0x62	; 98
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	
	offset_x = (HS_W - strlen("LEADERBOARDS") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (HS_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(LB_Y, LB_X, LB_H, LB_W, WHITE);
     e4a:	0f ef       	ldi	r16, 0xFF	; 255
     e4c:	1f ef       	ldi	r17, 0xFF	; 255
     e4e:	28 e1       	ldi	r18, 0x18	; 24
     e50:	31 e0       	ldi	r19, 0x01	; 1
     e52:	4c e3       	ldi	r20, 0x3C	; 60
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	64 e1       	ldi	r22, 0x14	; 20
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	86 e9       	ldi	r24, 0x96	; 150
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(LB_Y + offset_y, LB_X + offset_x, 3, WHITE, CYAN, "LEADERBOARDS\0");
     e62:	0f 2e       	mov	r0, r31
     e64:	fc e8       	ldi	r31, 0x8C	; 140
     e66:	ef 2e       	mov	r14, r31
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	ff 2e       	mov	r15, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	0e ea       	ldi	r16, 0xAE	; 174
     e70:	1a e1       	ldi	r17, 0x1A	; 26
     e72:	2f ef       	ldi	r18, 0xFF	; 255
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	43 e0       	ldi	r20, 0x03	; 3
     e78:	66 e4       	ldi	r22, 0x46	; 70
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	88 ea       	ldi	r24, 0xA8	; 168
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	08 95       	ret

00000e8e <_Z14drawBackButtonv>:

void drawBackButton() {
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (BCK_BTN_W - strlen("BACK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (BCK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W, WHITE);
     e96:	0f ef       	ldi	r16, 0xFF	; 255
     e98:	1f ef       	ldi	r17, 0xFF	; 255
     e9a:	20 e5       	ldi	r18, 0x50	; 80
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	48 e2       	ldi	r20, 0x28	; 40
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	6a e0       	ldi	r22, 0x0A	; 10
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	8a e0       	ldi	r24, 0x0A	; 10
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(BCK_BTN_Y + offset_y, BCK_BTN_X + offset_x, 3, WHITE, CYAN, "BACK\0");
     eae:	0f 2e       	mov	r0, r31
     eb0:	fa e9       	ldi	r31, 0x9A	; 154
     eb2:	ef 2e       	mov	r14, r31
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ff 2e       	mov	r15, r31
     eb8:	f0 2d       	mov	r31, r0
     eba:	0e ea       	ldi	r16, 0xAE	; 174
     ebc:	1a e1       	ldi	r17, 0x1A	; 26
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	43 e0       	ldi	r20, 0x03	; 3
     ec4:	64 e1       	ldi	r22, 0x14	; 20
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	82 e1       	ldi	r24, 0x12	; 18
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	08 95       	ret

00000eda <_Z6clrScrv>:

void clrScr() {
	set_background_color(CYAN);
     eda:	8e ea       	ldi	r24, 0xAE	; 174
     edc:	9a e1       	ldi	r25, 0x1A	; 26
     ede:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
     ee2:	08 95       	ret

00000ee4 <_Z18resetNewPlayerNamev>:
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	a6 e6       	ldi	r26, 0x66	; 102
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
		newPlayerName[i] = ' ';
     eea:	90 e2       	ldi	r25, 0x20	; 32
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     eec:	fd 01       	movw	r30, r26
     eee:	01 90       	ld	r0, Z+
     ef0:	00 20       	and	r0, r0
     ef2:	e9 f7       	brne	.-6      	; 0xeee <_Z18resetNewPlayerNamev+0xa>
     ef4:	31 97       	sbiw	r30, 0x01	; 1
     ef6:	e6 56       	subi	r30, 0x66	; 102
     ef8:	f0 40       	sbci	r31, 0x00	; 0
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	2e 17       	cp	r18, r30
     f00:	3f 07       	cpc	r19, r31
     f02:	30 f4       	brcc	.+12     	; 0xf10 <_Z18resetNewPlayerNamev+0x2c>
		newPlayerName[i] = ' ';
     f04:	f9 01       	movw	r30, r18
     f06:	ea 59       	subi	r30, 0x9A	; 154
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	90 83       	st	Z, r25
void clrScr() {
	set_background_color(CYAN);
}

void resetNewPlayerName() {
	for(uint8_t i = 0; i < strlen(newPlayerName); i++) {
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	ee cf       	rjmp	.-36     	; 0xeec <_Z18resetNewPlayerNamev+0x8>
		newPlayerName[i] = ' ';
	}
	newPlayerNameIndex = 0;
     f10:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <newPlayerNameIndex>
     f14:	08 95       	ret

00000f16 <_Z18resetPlayersColorsP6Player>:
}

void resetPlayersColors(Player *players) {
	for(uint8_t i = 0; i < players_size; i++) {
     f16:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
     f1a:	22 23       	and	r18, r18
     f1c:	61 f0       	breq	.+24     	; 0xf36 <_Z18resetPlayersColorsP6Player+0x20>
     f1e:	e8 2f       	mov	r30, r24
     f20:	f9 2f       	mov	r31, r25
     f22:	80 e0       	ldi	r24, 0x00	; 0
		players[i].color = WHITE;
     f24:	4f ef       	ldi	r20, 0xFF	; 255
     f26:	5f ef       	ldi	r21, 0xFF	; 255
     f28:	52 83       	std	Z+2, r21	; 0x02
     f2a:	41 83       	std	Z+1, r20	; 0x01
		players[i].clicked = 0;
     f2c:	13 82       	std	Z+3, r1	; 0x03
	}
	newPlayerNameIndex = 0;
}

void resetPlayersColors(Player *players) {
	for(uint8_t i = 0; i < players_size; i++) {
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	3b 96       	adiw	r30, 0x0b	; 11
     f32:	82 13       	cpse	r24, r18
     f34:	f9 cf       	rjmp	.-14     	; 0xf28 <_Z18resetPlayersColorsP6Player+0x12>
		players[i].color = WHITE;
		players[i].clicked = 0;
	}
	cross_chosen = NONE;
     f36:	85 e0       	ldi	r24, 0x05	; 5
     f38:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <cross_chosen>
	nought_chosen = NONE;
     f3c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <nought_chosen>
     f40:	08 95       	ret

00000f42 <_Z9resetGamev>:
}
void resetGame() {
	memset(board, 0, sizeof(board));
     f42:	89 e0       	ldi	r24, 0x09	; 9
     f44:	ee eb       	ldi	r30, 0xBE	; 190
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	df 01       	movw	r26, r30
     f4a:	1d 92       	st	X+, r1
     f4c:	8a 95       	dec	r24
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <_Z9resetGamev+0x8>
	currentPlayer = CROSS; 
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	gameOver = 0;
     f56:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <gameOver>
	numberOfMoves = 0;
     f5a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
     f5e:	08 95       	ret

00000f60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>:
}
void checkBackButtonPressed(uint16_t *TP_X, uint16_t *TP_Y, uint8_t *currentPage, Player *players, uint8_t *game_rerender) {
     f60:	8f 92       	push	r8
     f62:	9f 92       	push	r9
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	if(get_bit(PINB, T_IRQ) == 0) {
     f78:	b0 99       	sbic	0x16, 0	; 22
     f7a:	35 c0       	rjmp	.+106    	; 0xfe6 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x86>
     f7c:	58 01       	movw	r10, r16
     f7e:	49 01       	movw	r8, r18
     f80:	6a 01       	movw	r12, r20
     f82:	8b 01       	movw	r16, r22
     f84:	ec 01       	movw	r28, r24
		read_touch_coords(TP_X, TP_Y);
     f86:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
		if(check_touch(*TP_X, *TP_Y, BCK_BTN_Y, BCK_BTN_X, BCK_BTN_H, BCK_BTN_W)) { //BACK button
     f8a:	f8 01       	movw	r30, r16
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	0f 2e       	mov	r0, r31
     f92:	f0 e5       	ldi	r31, 0x50	; 80
     f94:	ef 2e       	mov	r14, r31
     f96:	f1 2c       	mov	r15, r1
     f98:	f0 2d       	mov	r31, r0
     f9a:	08 e2       	ldi	r16, 0x28	; 40
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	2a e0       	ldi	r18, 0x0A	; 10
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	4a e0       	ldi	r20, 0x0A	; 10
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	88 81       	ld	r24, Y
     fa8:	99 81       	ldd	r25, Y+1	; 0x01
     faa:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
     fae:	88 23       	and	r24, r24
     fb0:	d1 f0       	breq	.+52     	; 0xfe6 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x86>
			if(*currentPage == NEW_PLAYER) { //ako je bio u NEW PLAYER da cleara
     fb2:	f6 01       	movw	r30, r12
     fb4:	80 81       	ld	r24, Z
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	31 f4       	brne	.+12     	; 0xfc6 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x66>
				resetNewPlayerName();
     fba:	0e 94 72 07 	call	0xee4	; 0xee4 <_Z18resetNewPlayerNamev>
				np_rerender = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <np_rerender>
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x82>
			}else if(*currentPage == CHOOSE_PLAYER || *currentPage == GAME) { //ako je bio u CHOOSE PLAYER ili u GAME
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	11 f0       	breq	.+4      	; 0xfce <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x6e>
     fca:	84 30       	cpi	r24, 0x04	; 4
     fcc:	51 f4       	brne	.+20     	; 0xfe2 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_+0x82>
				resetPlayersColors(players);
     fce:	c4 01       	movw	r24, r8
     fd0:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z18resetPlayersColorsP6Player>
				resetGame();
     fd4:	0e 94 a1 07 	call	0xf42	; 0xf42 <_Z9resetGamev>
				cp_rerender = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cp_rerender>
				*game_rerender = 1;
     fde:	f5 01       	movw	r30, r10
     fe0:	80 83       	st	Z, r24
			}
			*currentPage = HOMESCREEN;
     fe2:	f6 01       	movw	r30, r12
     fe4:	10 82       	st	Z, r1
		}
	}
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	08 95       	ret

00001000 <_Z12sortByPointsP6Player>:
void sortByPoints(Player *players) {
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	2b 97       	sbiw	r28, 0x0b	; 11
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
	for(uint8_t i = 0; i < players_size - 1; i++) {
    101c:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	31 09       	sbc	r19, r1
    1026:	12 16       	cp	r1, r18
    1028:	13 06       	cpc	r1, r19
    102a:	0c f0       	brlt	.+2      	; 0x102e <_Z12sortByPointsP6Player+0x2e>
    102c:	55 c0       	rjmp	.+170    	; 0x10d8 <_Z12sortByPointsP6Player+0xd8>
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	f1 2c       	mov	r15, r1
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
			if(players[j].points < players[j+1].points) {
    1034:	7b e0       	ldi	r23, 0x0B	; 11
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
    1036:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	24 1b       	sub	r18, r20
    103e:	35 0b       	sbc	r19, r21
    1040:	21 50       	subi	r18, 0x01	; 1
    1042:	31 09       	sbc	r19, r1
    1044:	12 16       	cp	r1, r18
    1046:	13 06       	cpc	r1, r19
    1048:	dc f5       	brge	.+118    	; 0x10c0 <_Z12sortByPointsP6Player+0xc0>
    104a:	60 e0       	ldi	r22, 0x00	; 0
			if(players[j].points < players[j+1].points) {
    104c:	76 9f       	mul	r23, r22
    104e:	90 01       	movw	r18, r0
    1050:	11 24       	eor	r1, r1
    1052:	8c 01       	movw	r16, r24
    1054:	02 0f       	add	r16, r18
    1056:	13 1f       	adc	r17, r19
    1058:	25 5f       	subi	r18, 0xF5	; 245
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	28 0f       	add	r18, r24
    105e:	39 1f       	adc	r19, r25
    1060:	d8 01       	movw	r26, r16
    1062:	fc 91       	ld	r31, X
    1064:	d9 01       	movw	r26, r18
    1066:	ec 91       	ld	r30, X
    1068:	fe 17       	cp	r31, r30
    106a:	e8 f4       	brcc	.+58     	; 0x10a6 <_Z12sortByPointsP6Player+0xa6>
				Player tmp = players[j];
    106c:	0f 2e       	mov	r0, r31
    106e:	fb e0       	ldi	r31, 0x0B	; 11
    1070:	ef 2e       	mov	r14, r31
    1072:	f0 2d       	mov	r31, r0
    1074:	f8 01       	movw	r30, r16
    1076:	de 01       	movw	r26, r28
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	01 90       	ld	r0, Z+
    107c:	0d 92       	st	X+, r0
    107e:	ea 94       	dec	r14
    1080:	e1 f7       	brne	.-8      	; 0x107a <_Z12sortByPointsP6Player+0x7a>
				players[j] = players[j+1];
    1082:	0f 2e       	mov	r0, r31
    1084:	fb e0       	ldi	r31, 0x0B	; 11
    1086:	ef 2e       	mov	r14, r31
    1088:	f0 2d       	mov	r31, r0
    108a:	f9 01       	movw	r30, r18
    108c:	d8 01       	movw	r26, r16
    108e:	01 90       	ld	r0, Z+
    1090:	0d 92       	st	X+, r0
    1092:	ea 94       	dec	r14
    1094:	e1 f7       	brne	.-8      	; 0x108e <_Z12sortByPointsP6Player+0x8e>
				players[j+1] = tmp;
    1096:	1b e0       	ldi	r17, 0x0B	; 11
    1098:	fe 01       	movw	r30, r28
    109a:	31 96       	adiw	r30, 0x01	; 1
    109c:	d9 01       	movw	r26, r18
    109e:	01 90       	ld	r0, Z+
    10a0:	0d 92       	st	X+, r0
    10a2:	1a 95       	dec	r17
    10a4:	e1 f7       	brne	.-8      	; 0x109e <_Z12sortByPointsP6Player+0x9e>
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
		for(uint8_t j = 0; j < players_size - i - 1; j++) {
    10a6:	6f 5f       	subi	r22, 0xFF	; 255
    10a8:	e6 2f       	mov	r30, r22
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	24 1b       	sub	r18, r20
    10b4:	35 0b       	sbc	r19, r21
    10b6:	21 50       	subi	r18, 0x01	; 1
    10b8:	31 09       	sbc	r19, r1
    10ba:	e2 17       	cp	r30, r18
    10bc:	f3 07       	cpc	r31, r19
    10be:	34 f2       	brlt	.-116    	; 0x104c <_Z12sortByPointsP6Player+0x4c>
			*currentPage = HOMESCREEN;
		}
	}
}
void sortByPoints(Player *players) {
	for(uint8_t i = 0; i < players_size - 1; i++) {
    10c0:	f3 94       	inc	r15
    10c2:	4f 2d       	mov	r20, r15
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <players_size>
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	21 50       	subi	r18, 0x01	; 1
    10ce:	31 09       	sbc	r19, r1
    10d0:	42 17       	cp	r20, r18
    10d2:	53 07       	cpc	r21, r19
    10d4:	0c f4       	brge	.+2      	; 0x10d8 <_Z12sortByPointsP6Player+0xd8>
    10d6:	af cf       	rjmp	.-162    	; 0x1036 <_Z12sortByPointsP6Player+0x36>
				players[j] = players[j+1];
				players[j+1] = tmp;
			}
		}
	}
}
    10d8:	2b 96       	adiw	r28, 0x0b	; 11
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	08 95       	ret

000010f2 <_Z17printLeaderboardsP6Playerh>:

void printLeaderboards(Player *players, uint8_t players_size) {
    10f2:	4f 92       	push	r4
    10f4:	5f 92       	push	r5
    10f6:	6f 92       	push	r6
    10f8:	7f 92       	push	r7
    10fa:	8f 92       	push	r8
    10fc:	9f 92       	push	r9
    10fe:	af 92       	push	r10
    1100:	bf 92       	push	r11
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	00 d0       	rcall	.+0      	; 0x1114 <_Z17printLeaderboardsP6Playerh+0x22>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <_Z17printLeaderboardsP6Playerh+0x24>
    1116:	1f 92       	push	r1
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	a8 2e       	mov	r10, r24
    111e:	b9 2e       	mov	r11, r25
    1120:	46 2e       	mov	r4, r22
	sortByPoints(players);
    1122:	0e 94 00 08 	call	0x1000	; 0x1000 <_Z12sortByPointsP6Player>
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
    1126:	0f 2e       	mov	r0, r31
    1128:	f0 ea       	ldi	r31, 0xA0	; 160
    112a:	ef 2e       	mov	r14, r31
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	ff 2e       	mov	r15, r31
    1130:	f0 2d       	mov	r31, r0
    1132:	0e ea       	ldi	r16, 0xAE	; 174
    1134:	1a e1       	ldi	r17, 0x1A	; 26
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	43 e0       	ldi	r20, 0x03	; 3
    113c:	64 e6       	ldi	r22, 0x64	; 100
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	89 e1       	ldi	r24, 0x19	; 25
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
    1148:	0f 2e       	mov	r0, r31
    114a:	f6 ea       	ldi	r31, 0xA6	; 166
    114c:	ef 2e       	mov	r14, r31
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	ff 2e       	mov	r15, r31
    1152:	f0 2d       	mov	r31, r0
    1154:	2f ef       	ldi	r18, 0xFF	; 255
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	43 e0       	ldi	r20, 0x03	; 3
    115a:	68 ec       	ldi	r22, 0xC8	; 200
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	89 e1       	ldi	r24, 0x19	; 25
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	char tmp[5];
	for(uint8_t i = 0; i < players_size; i++) {
    1166:	44 20       	and	r4, r4
    1168:	09 f4       	brne	.+2      	; 0x116c <_Z17printLeaderboardsP6Playerh+0x7a>
    116a:	41 c0       	rjmp	.+130    	; 0x11ee <_Z17printLeaderboardsP6Playerh+0xfc>
    116c:	ca 2c       	mov	r12, r10
    116e:	db 2c       	mov	r13, r11
    1170:	0f 2e       	mov	r0, r31
    1172:	f0 e5       	ldi	r31, 0x50	; 80
    1174:	af 2e       	mov	r10, r31
    1176:	b1 2c       	mov	r11, r1
    1178:	f0 2d       	mov	r31, r0
    117a:	51 2c       	mov	r5, r1
		sprintf(tmp, "%d\0", players[i].points);
    117c:	0f 2e       	mov	r0, r31
    117e:	fe ea       	ldi	r31, 0xAE	; 174
    1180:	6f 2e       	mov	r6, r31
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	7f 2e       	mov	r7, r31
    1186:	f0 2d       	mov	r31, r0
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	4c 01       	movw	r8, r24
    118e:	f6 01       	movw	r30, r12
    1190:	80 81       	ld	r24, Z
    1192:	1f 92       	push	r1
    1194:	8f 93       	push	r24
    1196:	7f 92       	push	r7
    1198:	6f 92       	push	r6
    119a:	9f 92       	push	r9
    119c:	8f 92       	push	r8
    119e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <sprintf>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
    11a2:	76 01       	movw	r14, r12
    11a4:	f4 e0       	ldi	r31, 0x04	; 4
    11a6:	ef 0e       	add	r14, r31
    11a8:	f1 1c       	adc	r15, r1
    11aa:	0e ea       	ldi	r16, 0xAE	; 174
    11ac:	1a e1       	ldi	r17, 0x1A	; 26
    11ae:	2f ef       	ldi	r18, 0xFF	; 255
    11b0:	3f ef       	ldi	r19, 0xFF	; 255
    11b2:	43 e0       	ldi	r20, 0x03	; 3
    11b4:	64 e6       	ldi	r22, 0x64	; 100
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	c5 01       	movw	r24, r10
    11ba:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
    11be:	74 01       	movw	r14, r8
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
    11c4:	43 e0       	ldi	r20, 0x03	; 3
    11c6:	6a ef       	ldi	r22, 0xFA	; 250
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	c5 01       	movw	r24, r10
    11cc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
void printLeaderboards(Player *players, uint8_t players_size) {
	sortByPoints(players);
	print_string(PLB_HEAD_Y, PLB_HEAD_X, 3, WHITE, CYAN, "NAME\0");
	print_string(PLB_HEAD_Y, 2*PLB_HEAD_X, 3, WHITE, CYAN, "POINTS\0");
	char tmp[5];
	for(uint8_t i = 0; i < players_size; i++) {
    11d0:	53 94       	inc	r5
    11d2:	8b e0       	ldi	r24, 0x0B	; 11
    11d4:	c8 0e       	add	r12, r24
    11d6:	d1 1c       	adc	r13, r1
    11d8:	98 e2       	ldi	r25, 0x28	; 40
    11da:	a9 0e       	add	r10, r25
    11dc:	b1 1c       	adc	r11, r1
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	45 10       	cpse	r4, r5
    11ec:	d0 cf       	rjmp	.-96     	; 0x118e <_Z17printLeaderboardsP6Playerh+0x9c>
		sprintf(tmp, "%d\0", players[i].points);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X, 3, WHITE, CYAN, players[i].name);
		print_string(PLB_Y + i*(4*BLANK_SPACE), PLB_X + 15*BLANK_SPACE, 3, WHITE, CYAN, tmp);
	}
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	af 90       	pop	r10
    120c:	9f 90       	pop	r9
    120e:	8f 90       	pop	r8
    1210:	7f 90       	pop	r7
    1212:	6f 90       	pop	r6
    1214:	5f 90       	pop	r5
    1216:	4f 90       	pop	r4
    1218:	08 95       	ret

0000121a <_Z11showPlayersP6Playerh>:

void showPlayers(Player *players, uint8_t players_size) {
    121a:	2f 92       	push	r2
    121c:	3f 92       	push	r3
    121e:	4f 92       	push	r4
    1220:	5f 92       	push	r5
    1222:	6f 92       	push	r6
    1224:	7f 92       	push	r7
    1226:	8f 92       	push	r8
    1228:	9f 92       	push	r9
    122a:	af 92       	push	r10
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    123e:	66 23       	and	r22, r22
    1240:	09 f4       	brne	.+2      	; 0x1244 <_Z11showPlayersP6Playerh+0x2a>
    1242:	5a c0       	rjmp	.+180    	; 0x12f8 <_Z11showPlayersP6Playerh+0xde>
    1244:	26 2e       	mov	r2, r22
    1246:	c8 2e       	mov	r12, r24
    1248:	d9 2e       	mov	r13, r25
    124a:	51 2c       	mov	r5, r1
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    124c:	80 e0       	ldi	r24, 0x00	; 0
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    124e:	0f 2e       	mov	r0, r31
    1250:	f2 e8       	ldi	r31, 0x82	; 130
    1252:	4f 2e       	mov	r4, r31
    1254:	f0 2d       	mov	r31, r0
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    1256:	0f 2e       	mov	r0, r31
    1258:	ff e0       	ldi	r31, 0x0F	; 15
    125a:	3f 2e       	mov	r3, r31
    125c:	f0 2d       	mov	r31, r0
    125e:	06 c0       	rjmp	.+12     	; 0x126c <_Z11showPlayersP6Playerh+0x52>
}

void showPlayers(Player *players, uint8_t players_size) {
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
		tmp = i > 1 ? (SP_BTN_H + BLANK_SPACE) : 0; //da ide u red ispod
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	85 15       	cp	r24, r5
    1264:	10 f0       	brcs	.+4      	; 0x126a <_Z11showPlayersP6Playerh+0x50>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	01 c0       	rjmp	.+2      	; 0x126c <_Z11showPlayersP6Playerh+0x52>
    126a:	82 e3       	ldi	r24, 0x32	; 50
    126c:	76 01       	movw	r14, r12
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	e9 0e       	add	r14, r25
    1272:	f1 1c       	adc	r15, r1
		offset_x = (SP_BTN_W - strlen(players[i].name) * CHAR_W * FONT_SIZE)/2;
    1274:	e7 01       	movw	r28, r14
    1276:	09 90       	ld	r0, Y+
    1278:	00 20       	and	r0, r0
    127a:	e9 f7       	brne	.-6      	; 0x1276 <_Z11showPlayersP6Playerh+0x5c>
    127c:	21 97       	sbiw	r28, 0x01	; 1
    127e:	ce 19       	sub	r28, r14
    1280:	df 09       	sbc	r29, r15
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
    1282:	50 fa       	bst	r5, 0
    1284:	66 24       	eor	r6, r6
    1286:	60 f8       	bld	r6, 0
    1288:	71 2c       	mov	r7, r1
    128a:	46 9c       	mul	r4, r6
    128c:	40 01       	movw	r8, r0
    128e:	47 9c       	mul	r4, r7
    1290:	90 0c       	add	r9, r0
    1292:	11 24       	eor	r1, r1
    1294:	a8 2e       	mov	r10, r24
    1296:	b1 2c       	mov	r11, r1
    1298:	f6 01       	movw	r30, r12
    129a:	01 81       	ldd	r16, Z+1	; 0x01
    129c:	12 81       	ldd	r17, Z+2	; 0x02
    129e:	b4 01       	movw	r22, r8
    12a0:	6c 5e       	subi	r22, 0xEC	; 236
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	28 e7       	ldi	r18, 0x78	; 120
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	48 e2       	ldi	r20, 0x28	; 40
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	c5 01       	movw	r24, r10
    12ae:	8a 5b       	subi	r24, 0xBA	; 186
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
    12b6:	f6 01       	movw	r30, r12
    12b8:	21 81       	ldd	r18, Z+1	; 0x01
    12ba:	32 81       	ldd	r19, Z+2	; 0x02
    12bc:	3c 9e       	mul	r3, r28
    12be:	c0 01       	movw	r24, r0
    12c0:	3d 9e       	mul	r3, r29
    12c2:	90 0d       	add	r25, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	68 e7       	ldi	r22, 0x78	; 120
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	68 1b       	sub	r22, r24
    12cc:	79 0b       	sbc	r23, r25
    12ce:	76 95       	lsr	r23
    12d0:	67 95       	ror	r22
    12d2:	77 27       	eor	r23, r23
    12d4:	6c 5e       	subi	r22, 0xEC	; 236
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	68 0d       	add	r22, r8
    12da:	79 1d       	adc	r23, r9
    12dc:	0e ea       	ldi	r16, 0xAE	; 174
    12de:	1a e1       	ldi	r17, 0x1A	; 26
    12e0:	43 e0       	ldi	r20, 0x03	; 3
    12e2:	c5 01       	movw	r24, r10
    12e4:	82 5b       	subi	r24, 0xB2	; 178
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}

void showPlayers(Player *players, uint8_t players_size) {
	uint8_t tmp = 0, offset_x, offset_y;
	for(uint8_t i = 0; i < players_size; i++) {
    12ec:	53 94       	inc	r5
    12ee:	fb e0       	ldi	r31, 0x0B	; 11
    12f0:	cf 0e       	add	r12, r31
    12f2:	d1 1c       	adc	r13, r1
    12f4:	25 10       	cpse	r2, r5
    12f6:	b4 cf       	rjmp	.-152    	; 0x1260 <_Z11showPlayersP6Playerh+0x46>
		offset_y = (SP_BTN_H - 1 * CHAR_H * FONT_SIZE)/2;
		
		draw_rectangle(SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W, players[i].color);
		print_string(SP_BTN_Y + tmp + offset_y, SP_BTN_X + offset_x + (i%2)*(SP_BTN_W + BLANK_SPACE), 3, players[i].color, CYAN, players[i].name);
	}
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	7f 90       	pop	r7
    1312:	6f 90       	pop	r6
    1314:	5f 90       	pop	r5
    1316:	4f 90       	pop	r4
    1318:	3f 90       	pop	r3
    131a:	2f 90       	pop	r2
    131c:	08 95       	ret

0000131e <_Z12drawOKButtonv>:

void drawOKButton() {
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (OK_BTN_W - strlen("OK") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (OK_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W, WHITE);
    1326:	0f ef       	ldi	r16, 0xFF	; 255
    1328:	1f ef       	ldi	r17, 0xFF	; 255
    132a:	2c e3       	ldi	r18, 0x3C	; 60
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	48 e2       	ldi	r20, 0x28	; 40
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	6a ef       	ldi	r22, 0xFA	; 250
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	8e eb       	ldi	r24, 0xBE	; 190
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(OK_BTN_Y + offset_y, OK_BTN_X + offset_x, 3, WHITE, CYAN, "OK\0");
    133e:	0f 2e       	mov	r0, r31
    1340:	f2 eb       	ldi	r31, 0xB2	; 178
    1342:	ef 2e       	mov	r14, r31
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	ff 2e       	mov	r15, r31
    1348:	f0 2d       	mov	r31, r0
    134a:	0e ea       	ldi	r16, 0xAE	; 174
    134c:	1a e1       	ldi	r17, 0x1A	; 26
    134e:	2f ef       	ldi	r18, 0xFF	; 255
    1350:	3f ef       	ldi	r19, 0xFF	; 255
    1352:	43 e0       	ldi	r20, 0x03	; 3
    1354:	69 e0       	ldi	r22, 0x09	; 9
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	86 ec       	ldi	r24, 0xC6	; 198
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	08 95       	ret

0000136a <_Z16drawDeleteButtonv>:

void drawDeleteButton() {
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
	uint8_t offset_x, offset_y;
	
	offset_x = (DEL_BTN_W - strlen("DEL") * CHAR_W * FONT_SIZE) / 2;
	offset_y = (DEL_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W, WHITE);
    1372:	0f ef       	ldi	r16, 0xFF	; 255
    1374:	1f ef       	ldi	r17, 0xFF	; 255
    1376:	2c e3       	ldi	r18, 0x3C	; 60
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	48 e2       	ldi	r20, 0x28	; 40
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	64 eb       	ldi	r22, 0xB4	; 180
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	8e eb       	ldi	r24, 0xBE	; 190
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(DEL_BTN_Y + offset_y, DEL_BTN_X + offset_x, 3, WHITE, CYAN, "DEL\0");
    138a:	0f 2e       	mov	r0, r31
    138c:	f6 eb       	ldi	r31, 0xB6	; 182
    138e:	ef 2e       	mov	r14, r31
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	ff 2e       	mov	r15, r31
    1394:	f0 2d       	mov	r31, r0
    1396:	0e ea       	ldi	r16, 0xAE	; 174
    1398:	1a e1       	ldi	r17, 0x1A	; 26
    139a:	2f ef       	ldi	r18, 0xFF	; 255
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	43 e0       	ldi	r20, 0x03	; 3
    13a0:	6b eb       	ldi	r22, 0xBB	; 187
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	86 ec       	ldi	r24, 0xC6	; 198
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	08 95       	ret

000013b6 <_Z15drawStartButtonv>:

void drawStartButton() {
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
	uint8_t offset_x = (START_BTN_W - strlen("START") * CHAR_W * FONT_SIZE) / 2;
	uint8_t offset_y = (START_BTN_H - 1 * CHAR_H * FONT_SIZE) / 2;
	draw_rectangle(START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W, WHITE);
    13be:	0f ef       	ldi	r16, 0xFF	; 255
    13c0:	1f ef       	ldi	r17, 0xFF	; 255
    13c2:	2a e5       	ldi	r18, 0x5A	; 90
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	48 e2       	ldi	r20, 0x28	; 40
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	6c ed       	ldi	r22, 0xDC	; 220
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	8e eb       	ldi	r24, 0xBE	; 190
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
	print_string(START_BTN_Y + offset_y, START_BTN_X + offset_x , 3, WHITE, CYAN, "START\0");
    13d6:	0f 2e       	mov	r0, r31
    13d8:	fb eb       	ldi	r31, 0xBB	; 187
    13da:	ef 2e       	mov	r14, r31
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	ff 2e       	mov	r15, r31
    13e0:	f0 2d       	mov	r31, r0
    13e2:	0e ea       	ldi	r16, 0xAE	; 174
    13e4:	1a e1       	ldi	r17, 0x1A	; 26
    13e6:	2f ef       	ldi	r18, 0xFF	; 255
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	43 e0       	ldi	r20, 0x03	; 3
    13ec:	63 ee       	ldi	r22, 0xE3	; 227
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	86 ec       	ldi	r24, 0xC6	; 198
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	08 95       	ret

00001402 <_Z9drawNamesP6Player>:

void drawNames(Player *players) {
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	62 97       	sbiw	r28, 0x12	; 18
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
	char tmp[MAX_NAME_LENGTH+1+2+1+MAX_NAME_LENGTH]; //max first name, space, vs, space, max 2nd name
	sprintf(tmp, "%s VS %s", players[cross_chosen].name, players[nought_chosen].name);
    141e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <nought_chosen>
    1422:	4b e0       	ldi	r20, 0x0B	; 11
    1424:	bc 01       	movw	r22, r24
    1426:	42 9f       	mul	r20, r18
    1428:	60 0d       	add	r22, r0
    142a:	71 1d       	adc	r23, r1
    142c:	11 24       	eor	r1, r1
    142e:	9b 01       	movw	r18, r22
    1430:	2c 5f       	subi	r18, 0xFC	; 252
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	3f 93       	push	r19
    1436:	2f 93       	push	r18
    1438:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <cross_chosen>
    143c:	42 9f       	mul	r20, r18
    143e:	80 0d       	add	r24, r0
    1440:	91 1d       	adc	r25, r1
    1442:	11 24       	eor	r1, r1
    1444:	04 96       	adiw	r24, 0x04	; 4
    1446:	9f 93       	push	r25
    1448:	8f 93       	push	r24
    144a:	85 ef       	ldi	r24, 0xF5	; 245
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9f 93       	push	r25
    1450:	8f 93       	push	r24
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	7c 01       	movw	r14, r24
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <sprintf>
	uint8_t offset_x = (MAX_Y - BLANK_SPACE - (BCK_BTN_X + BCK_BTN_W) - strlen(tmp) * CHAR_W * 2) / 2; //2 je FONT_SIZE, 220 -> sirina od kraja BCK_BTN do 310
    1460:	f7 01       	movw	r30, r14
    1462:	01 90       	ld	r0, Z+
    1464:	00 20       	and	r0, r0
    1466:	e9 f7       	brne	.-6      	; 0x1462 <_Z9drawNamesP6Player+0x60>
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	ee 19       	sub	r30, r14
    146c:	ff 09       	sbc	r31, r15
	print_string(BLANK_SPACE, (BCK_BTN_X + BCK_BTN_W) + offset_x, 2, WHITE, CYAN, tmp); //90 je kraj od bck btn,, mozda da je ime svako u svojoj boji ili kako oces
    146e:	cf 01       	movw	r24, r30
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	e8 0f       	add	r30, r24
    1482:	f9 1f       	adc	r31, r25
    1484:	6c ed       	ldi	r22, 0xDC	; 220
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	6e 1b       	sub	r22, r30
    148a:	7f 0b       	sbc	r23, r31
    148c:	76 95       	lsr	r23
    148e:	67 95       	ror	r22
    1490:	77 27       	eor	r23, r23
    1492:	66 5a       	subi	r22, 0xA6	; 166
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	0e ea       	ldi	r16, 0xAE	; 174
    1498:	1a e1       	ldi	r17, 0x1A	; 26
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	42 e0       	ldi	r20, 0x02	; 2
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
}
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <_Z8drawGridv>:

void drawGrid() {
	
	draw_v_line(GRID_STARTING_X + GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE); //62~185/3
    14cc:	2f ef       	ldi	r18, 0xFF	; 255
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	46 ee       	ldi	r20, 0xE6	; 230
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	6d e2       	ldi	r22, 0x2D	; 45
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	8c ea       	ldi	r24, 0xAC	; 172
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	draw_v_line(GRID_STARTING_X + 2*GRID_BLOCK_SIZE, GRID_STARTING_Y, GRID_STARTING_Y + GRID_RECT_SIZE, WHITE);
    14e0:	2f ef       	ldi	r18, 0xFF	; 255
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	46 ee       	ldi	r20, 0xE6	; 230
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	6d e2       	ldi	r22, 0x2D	; 45
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	8a ee       	ldi	r24, 0xEA	; 234
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z11draw_v_linejjjj>
	
	draw_h_line(GRID_STARTING_Y + GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
    14f8:	47 e2       	ldi	r20, 0x27	; 39
    14fa:	51 e0       	ldi	r21, 0x01	; 1
    14fc:	6e e6       	ldi	r22, 0x6E	; 110
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	8b e6       	ldi	r24, 0x6B	; 107
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
	draw_h_line(GRID_STARTING_Y + 2*GRID_BLOCK_SIZE, GRID_STARTING_X, GRID_STARTING_X + GRID_RECT_SIZE, WHITE);
    1508:	2f ef       	ldi	r18, 0xFF	; 255
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	47 e2       	ldi	r20, 0x27	; 39
    150e:	51 e0       	ldi	r21, 0x01	; 1
    1510:	6e e6       	ldi	r22, 0x6E	; 110
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	89 ea       	ldi	r24, 0xA9	; 169
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 ac 04 	call	0x958	; 0x958 <_Z11draw_h_linejjjj>
    151c:	08 95       	ret

0000151e <_Z8drawTurnP6Player>:
	
	//my_drawCircle(GRID_STARTING_Y + GRID_BLOCK_SIZE + GRID_BLOCK_SIZE/2, GRID_STARTING_X + GRID_BLOCK_SIZE + GRID_BLOCK_SIZE/2, 30, WHITE);	
}

void drawTurn(Player *players) {
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	ec 01       	movw	r28, r24
	print_string(BCK_BTN_Y + BCK_BTN_H + 4*BLANK_SPACE, BCK_BTN_X, 3, WHITE, CYAN, "TURN:\0");
    152e:	0f 2e       	mov	r0, r31
    1530:	f2 ec       	ldi	r31, 0xC2	; 194
    1532:	ef 2e       	mov	r14, r31
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	ff 2e       	mov	r15, r31
    1538:	f0 2d       	mov	r31, r0
    153a:	0e ea       	ldi	r16, 0xAE	; 174
    153c:	1a e1       	ldi	r17, 0x1A	; 26
    153e:	2f ef       	ldi	r18, 0xFF	; 255
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	43 e0       	ldi	r20, 0x03	; 3
    1544:	6a e0       	ldi	r22, 0x0A	; 10
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	8a e5       	ldi	r24, 0x5A	; 90
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	if(currentPlayer == CROSS) {
    1550:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	59 f5       	brne	.+86     	; 0x15ae <_Z8drawTurnP6Player+0x90>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, CYAN, CYAN, players[nought_chosen].name); //prvo prebrise starog tj poboja mu i slova i pozadinu u boju pozadine (CYAN) zato jer ako jedan ima duze ime od drugog onda ce od tog koji ima duze ime slova od njegovog imena ce se i dalje vidit pored imena od ovog koji ima krace
    1558:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    155c:	0f 2e       	mov	r0, r31
    155e:	fb e0       	ldi	r31, 0x0B	; 11
    1560:	df 2e       	mov	r13, r31
    1562:	f0 2d       	mov	r31, r0
    1564:	7e 01       	movw	r14, r28
    1566:	d8 9e       	mul	r13, r24
    1568:	e0 0c       	add	r14, r0
    156a:	f1 1c       	adc	r15, r1
    156c:	11 24       	eor	r1, r1
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	e8 0e       	add	r14, r24
    1572:	f1 1c       	adc	r15, r1
    1574:	2e ea       	ldi	r18, 0xAE	; 174
    1576:	3a e1       	ldi	r19, 0x1A	; 26
    1578:	42 e0       	ldi	r20, 0x02	; 2
    157a:	6a e0       	ldi	r22, 0x0A	; 10
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	88 e7       	ldi	r24, 0x78	; 120
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name);
    1586:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    158a:	d8 9e       	mul	r13, r24
    158c:	c0 0d       	add	r28, r0
    158e:	d1 1d       	adc	r29, r1
    1590:	11 24       	eor	r1, r1
    1592:	7e 01       	movw	r14, r28
    1594:	84 e0       	ldi	r24, 0x04	; 4
    1596:	e8 0e       	add	r14, r24
    1598:	f1 1c       	adc	r15, r1
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	3a 81       	ldd	r19, Y+2	; 0x02
    159e:	42 e0       	ldi	r20, 0x02	; 2
    15a0:	6a e0       	ldi	r22, 0x0A	; 10
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	88 e7       	ldi	r24, 0x78	; 120
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    15ac:	2c c0       	rjmp	.+88     	; 0x1606 <_Z8drawTurnP6Player+0xe8>
	}else{
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, CYAN, CYAN, players[cross_chosen].name); //prvo prebrise starog tj poboja mu i slova i pozadinu u boju pozadine (CYAN) zato jer ako jedan ima duze ime od drugog onda ce od tog koji ima duze ime slova od njegovog imena ce se i dalje vidit pored imena od ovog koji ima krace
    15ae:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    15b2:	0f 2e       	mov	r0, r31
    15b4:	fb e0       	ldi	r31, 0x0B	; 11
    15b6:	df 2e       	mov	r13, r31
    15b8:	f0 2d       	mov	r31, r0
    15ba:	7e 01       	movw	r14, r28
    15bc:	d8 9e       	mul	r13, r24
    15be:	e0 0c       	add	r14, r0
    15c0:	f1 1c       	adc	r15, r1
    15c2:	11 24       	eor	r1, r1
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	e8 0e       	add	r14, r24
    15c8:	f1 1c       	adc	r15, r1
    15ca:	0e ea       	ldi	r16, 0xAE	; 174
    15cc:	1a e1       	ldi	r17, 0x1A	; 26
    15ce:	2e ea       	ldi	r18, 0xAE	; 174
    15d0:	3a e1       	ldi	r19, 0x1A	; 26
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	6a e0       	ldi	r22, 0x0A	; 10
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	88 e7       	ldi	r24, 0x78	; 120
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		print_string(BCK_BTN_Y + BCK_BTN_H + 7*BLANK_SPACE, BCK_BTN_X, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    15e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    15e4:	d8 9e       	mul	r13, r24
    15e6:	c0 0d       	add	r28, r0
    15e8:	d1 1d       	adc	r29, r1
    15ea:	11 24       	eor	r1, r1
    15ec:	7e 01       	movw	r14, r28
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	e8 0e       	add	r14, r24
    15f2:	f1 1c       	adc	r15, r1
    15f4:	29 81       	ldd	r18, Y+1	; 0x01
    15f6:	3a 81       	ldd	r19, Y+2	; 0x02
    15f8:	42 e0       	ldi	r20, 0x02	; 2
    15fa:	6a e0       	ldi	r22, 0x0A	; 10
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	88 e7       	ldi	r24, 0x78	; 120
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	df 90       	pop	r13
    1614:	08 95       	ret

00001616 <_Z10drawOnGridhh>:

uint8_t drawOnGrid(uint8_t y, uint8_t x) { //skuzi kako ovo centrirat i napravi preko define-ova
	if(currentPlayer == CROSS) { //nesto sa players[cross_chosen]
    1616:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
    161a:	91 30       	cpi	r25, 0x01	; 1
    161c:	69 f4       	brne	.+26     	; 0x1638 <_Z10drawOnGridhh+0x22>
		my_draw_cross(y + GRID_BLOCK_SIZE/2, x + GRID_BLOCK_SIZE/2, 20, RED);
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	61 5e       	subi	r22, 0xE1	; 225
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	29 e6       	ldi	r18, 0x69	; 105
    1628:	33 ed       	ldi	r19, 0xD3	; 211
    162a:	44 e1       	ldi	r20, 0x14	; 20
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	4f 96       	adiw	r24, 0x1f	; 31
    1630:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z13my_draw_crossjjjj>
		return NOUGHT;
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	08 95       	ret
	}else {
		adafruit_drawCircle(y + GRID_BLOCK_SIZE/2, x + GRID_BLOCK_SIZE/2, 20, GREEN);
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	61 5e       	subi	r22, 0xE1	; 225
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	2b e2       	ldi	r18, 0x2B	; 43
    1642:	37 ec       	ldi	r19, 0xC7	; 199
    1644:	44 e1       	ldi	r20, 0x14	; 20
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	4f 96       	adiw	r24, 0x1f	; 31
    164a:	0e 94 37 05 	call	0xa6e	; 0xa6e <_Z19adafruit_drawCirclejjjj>
		return CROSS;
    164e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1650:	08 95       	ret

00001652 <_Z13checkGameOverP6Player>:

void checkGameOver(Player *players) {
    1652:	af 92       	push	r10
    1654:	bf 92       	push	r11
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	5c 01       	movw	r10, r24
    1666:	ee eb       	ldi	r30, 0xBE	; 190
    1668:	f1 e0       	ldi	r31, 0x01	; 1
    166a:	21 ec       	ldi	r18, 0xC1	; 193
    166c:	31 e0       	ldi	r19, 0x01	; 1
    166e:	df 01       	movw	r26, r30
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
		if (board[i][0] != EMPTY && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
    1670:	80 81       	ld	r24, Z
    1672:	88 23       	and	r24, r24
    1674:	51 f0       	breq	.+20     	; 0x168a <_Z13checkGameOverP6Player+0x38>
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	89 13       	cpse	r24, r25
    167a:	07 c0       	rjmp	.+14     	; 0x168a <_Z13checkGameOverP6Player+0x38>
    167c:	d2 80       	ldd	r13, Z+2	; 0x02
    167e:	8d 11       	cpse	r24, r13
    1680:	04 c0       	rjmp	.+8      	; 0x168a <_Z13checkGameOverP6Player+0x38>
			gameOver = 1; // 3 same in a row
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
			winner = board[i][0];
			break;
    1688:	e5 c0       	rjmp	.+458    	; 0x1854 <_Z13checkGameOverP6Player+0x202>
		}
		if (board[0][i] != EMPTY && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
    168a:	8d 91       	ld	r24, X+
    168c:	88 23       	and	r24, r24
    168e:	71 f0       	breq	.+28     	; 0x16ac <_Z13checkGameOverP6Player+0x5a>
    1690:	12 96       	adiw	r26, 0x02	; 2
    1692:	9c 91       	ld	r25, X
    1694:	12 97       	sbiw	r26, 0x02	; 2
    1696:	89 13       	cpse	r24, r25
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <_Z13checkGameOverP6Player+0x5a>
    169a:	15 96       	adiw	r26, 0x05	; 5
    169c:	dc 90       	ld	r13, X
    169e:	15 97       	sbiw	r26, 0x05	; 5
    16a0:	8d 11       	cpse	r24, r13
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <_Z13checkGameOverP6Player+0x5a>
			gameOver = 1; // 3 same in a column
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
			winner = board[0][i];
			break;
    16aa:	d4 c0       	rjmp	.+424    	; 0x1854 <_Z13checkGameOverP6Player+0x202>
    16ac:	33 96       	adiw	r30, 0x03	; 3
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
	for (uint8_t i = 0; i < 3; i++) {
    16ae:	a2 17       	cp	r26, r18
    16b0:	b3 07       	cpc	r27, r19
    16b2:	f1 f6       	brne	.-68     	; 0x1670 <_Z13checkGameOverP6Player+0x1e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    16b4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <board+0x4>
    16b8:	88 23       	and	r24, r24
    16ba:	09 f4       	brne	.+2      	; 0x16be <_Z13checkGameOverP6Player+0x6c>
    16bc:	e3 c0       	rjmp	.+454    	; 0x1884 <_Z13checkGameOverP6Player+0x232>
		return CROSS;
	}
}

void checkGameOver(Player *players) {
	uint8_t winner = 0;
    16be:	d1 2c       	mov	r13, r1
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    16c0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <board>
    16c4:	98 13       	cpse	r25, r24
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <_Z13checkGameOverP6Player+0x7e>
    16c8:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <board+0x8>
    16cc:	92 17       	cp	r25, r18
    16ce:	41 f0       	breq	.+16     	; 0x16e0 <_Z13checkGameOverP6Player+0x8e>
    16d0:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <board+0x2>
    16d4:	98 13       	cpse	r25, r24
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <_Z13checkGameOverP6Player+0x98>
    16d8:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <board+0x6>
    16dc:	92 13       	cpse	r25, r18
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <_Z13checkGameOverP6Player+0x98>
		gameOver = 1; // 3 same in a diagonal
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <gameOver>
    16e6:	d8 2e       	mov	r13, r24
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <_Z13checkGameOverP6Player+0xa2>
		winner = board[1][1];
	}
	
	if(gameOver) {
    16ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    16ee:	88 23       	and	r24, r24
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <_Z13checkGameOverP6Player+0xa2>
    16f2:	79 c0       	rjmp	.+242    	; 0x17e6 <_Z13checkGameOverP6Player+0x194>
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
    16f4:	0f 2e       	mov	r0, r31
    16f6:	f9 ec       	ldi	r31, 0xC9	; 201
    16f8:	ef 2e       	mov	r14, r31
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	ff 2e       	mov	r15, r31
    16fe:	f0 2d       	mov	r31, r0
    1700:	0e ea       	ldi	r16, 0xAE	; 174
    1702:	1a e1       	ldi	r17, 0x1A	; 26
    1704:	2f ef       	ldi	r18, 0xFF	; 255
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	43 e0       	ldi	r20, 0x03	; 3
    170a:	6a e0       	ldi	r22, 0x0A	; 10
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	8c e8       	ldi	r24, 0x8C	; 140
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	d8 12       	cpse	r13, r24
    171a:	23 c0       	rjmp	.+70     	; 0x1762 <_Z13checkGameOverP6Player+0x110>
    171c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1720:	0f 2e       	mov	r0, r31
    1722:	fb e0       	ldi	r31, 0x0B	; 11
    1724:	df 2e       	mov	r13, r31
    1726:	f0 2d       	mov	r31, r0
    1728:	f5 01       	movw	r30, r10
    172a:	d8 9e       	mul	r13, r24
    172c:	e0 0d       	add	r30, r0
    172e:	f1 1d       	adc	r31, r1
    1730:	11 24       	eor	r1, r1
    1732:	7f 01       	movw	r14, r30
    1734:	c4 e0       	ldi	r28, 0x04	; 4
    1736:	ec 0e       	add	r14, r28
    1738:	f1 1c       	adc	r15, r1
    173a:	21 81       	ldd	r18, Z+1	; 0x01
    173c:	32 81       	ldd	r19, Z+2	; 0x02
    173e:	42 e0       	ldi	r20, 0x02	; 2
    1740:	6a e0       	ldi	r22, 0x0A	; 10
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	8a ea       	ldi	r24, 0xAA	; 170
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    174c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1750:	e5 01       	movw	r28, r10
    1752:	d8 9e       	mul	r13, r24
    1754:	c0 0d       	add	r28, r0
    1756:	d1 1d       	adc	r29, r1
    1758:	11 24       	eor	r1, r1
    175a:	88 81       	ld	r24, Y
    175c:	8f 5f       	subi	r24, 0xFF	; 255
    175e:	88 83       	st	Y, r24
    1760:	24 c0       	rjmp	.+72     	; 0x17aa <_Z13checkGameOverP6Player+0x158>
		winner = board[1][1];
	}
	
	if(gameOver) {
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
		winner == CROSS ? print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[cross_chosen].color, CYAN, players[cross_chosen].name) : print_string(MAX_X - 7*BLANK_SPACE, BLANK_SPACE, 2, players[nought_chosen].color, CYAN, players[nought_chosen].name);
    1762:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1766:	0f 2e       	mov	r0, r31
    1768:	fb e0       	ldi	r31, 0x0B	; 11
    176a:	df 2e       	mov	r13, r31
    176c:	f0 2d       	mov	r31, r0
    176e:	f5 01       	movw	r30, r10
    1770:	d8 9e       	mul	r13, r24
    1772:	e0 0d       	add	r30, r0
    1774:	f1 1d       	adc	r31, r1
    1776:	11 24       	eor	r1, r1
    1778:	7f 01       	movw	r14, r30
    177a:	d4 e0       	ldi	r29, 0x04	; 4
    177c:	ed 0e       	add	r14, r29
    177e:	f1 1c       	adc	r15, r1
    1780:	21 81       	ldd	r18, Z+1	; 0x01
    1782:	32 81       	ldd	r19, Z+2	; 0x02
    1784:	0e ea       	ldi	r16, 0xAE	; 174
    1786:	1a e1       	ldi	r17, 0x1A	; 26
    1788:	42 e0       	ldi	r20, 0x02	; 2
    178a:	6a e0       	ldi	r22, 0x0A	; 10
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	8a ea       	ldi	r24, 0xAA	; 170
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		winner == CROSS ? players[cross_chosen].points++ : players[nought_chosen].points++;
    1796:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    179a:	e5 01       	movw	r28, r10
    179c:	d8 9e       	mul	r13, r24
    179e:	c0 0d       	add	r28, r0
    17a0:	d1 1d       	adc	r29, r1
    17a2:	11 24       	eor	r1, r1
    17a4:	88 81       	ld	r24, Y
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	88 83       	st	Y, r24
		
		uint8_t offset_x, offset_y;
		
		offset_x = (TRY_AGAIN_W - strlen("TRY AGAIN\0") * CHAR_W * 2) / 2;
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
    17aa:	0f ef       	ldi	r16, 0xFF	; 255
    17ac:	1f ef       	ldi	r17, 0xFF	; 255
    17ae:	29 e6       	ldi	r18, 0x69	; 105
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	4e e1       	ldi	r20, 0x1E	; 30
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	6a e0       	ldi	r22, 0x0A	; 10
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	88 ec       	ldi	r24, 0xC8	; 200
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset x bude previse desno ne kuzim zasto ??
    17c2:	0f 2e       	mov	r0, r31
    17c4:	ff ec       	ldi	r31, 0xCF	; 207
    17c6:	ef 2e       	mov	r14, r31
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	ff 2e       	mov	r15, r31
    17cc:	f0 2d       	mov	r31, r0
    17ce:	0e ea       	ldi	r16, 0xAE	; 174
    17d0:	1a e1       	ldi	r17, 0x1A	; 26
    17d2:	2f ef       	ldi	r18, 0xFF	; 255
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	42 e0       	ldi	r20, 0x02	; 2
    17d8:	6e e0       	ldi	r22, 0x0E	; 14
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	8f ec       	ldi	r24, 0xCF	; 207
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    17e4:	55 c0       	rjmp	.+170    	; 0x1890 <_Z13checkGameOverP6Player+0x23e>
	}else if(numberOfMoves == 9) {
    17e6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
    17ea:	89 30       	cpi	r24, 0x09	; 9
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <_Z13checkGameOverP6Player+0x19e>
    17ee:	50 c0       	rjmp	.+160    	; 0x1890 <_Z13checkGameOverP6Player+0x23e>
		//tie
		gameOver = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <gameOver>
		print_string(MAX_X - 9*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "TIE\0");
    17f6:	0f 2e       	mov	r0, r31
    17f8:	fa ed       	ldi	r31, 0xDA	; 218
    17fa:	ef 2e       	mov	r14, r31
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	ff 2e       	mov	r15, r31
    1800:	f0 2d       	mov	r31, r0
    1802:	0e ea       	ldi	r16, 0xAE	; 174
    1804:	1a e1       	ldi	r17, 0x1A	; 26
    1806:	2f ef       	ldi	r18, 0xFF	; 255
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	43 e0       	ldi	r20, 0x03	; 3
    180c:	6a e0       	ldi	r22, 0x0A	; 10
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	86 e9       	ldi	r24, 0x96	; 150
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
		
		uint8_t offset_x, offset_y;
		
		offset_x = (TRY_AGAIN_W - strlen("TRY AGAIN") * CHAR_W * 2) / 2;
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
    1818:	0f ef       	ldi	r16, 0xFF	; 255
    181a:	1f ef       	ldi	r17, 0xFF	; 255
    181c:	29 e6       	ldi	r18, 0x69	; 105
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4e e1       	ldi	r20, 0x1E	; 30
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	6a e0       	ldi	r22, 0x0A	; 10
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	88 ec       	ldi	r24, 0xC8	; 200
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z14draw_rectanglejjjjj>
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset0_x bude previse desno ne kuzim zasto ??
    1830:	0f 2e       	mov	r0, r31
    1832:	ff ec       	ldi	r31, 0xCF	; 207
    1834:	ef 2e       	mov	r14, r31
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	ff 2e       	mov	r15, r31
    183a:	f0 2d       	mov	r31, r0
    183c:	0e ea       	ldi	r16, 0xAE	; 174
    183e:	1a e1       	ldi	r17, 0x1A	; 26
    1840:	2f ef       	ldi	r18, 0xFF	; 255
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	42 e0       	ldi	r20, 0x02	; 2
    1846:	6e e0       	ldi	r22, 0x0E	; 14
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	8f ec       	ldi	r24, 0xCF	; 207
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
	}
	
}
    1852:	1e c0       	rjmp	.+60     	; 0x1890 <_Z13checkGameOverP6Player+0x23e>
			winner = board[0][i];
			break;
		}
	}

	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
    1854:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <board+0x4>
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <_Z13checkGameOverP6Player+0x20c>
    185c:	4b cf       	rjmp	.-362    	; 0x16f4 <_Z13checkGameOverP6Player+0xa2>
    185e:	30 cf       	rjmp	.-416    	; 0x16c0 <_Z13checkGameOverP6Player+0x6e>
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) {
		print_string(MAX_X - 10*BLANK_SPACE, BLANK_SPACE, 3, WHITE, CYAN, "WON:\0");
    1860:	0f 2e       	mov	r0, r31
    1862:	f9 ec       	ldi	r31, 0xC9	; 201
    1864:	ef 2e       	mov	r14, r31
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	ff 2e       	mov	r15, r31
    186a:	f0 2d       	mov	r31, r0
    186c:	0e ea       	ldi	r16, 0xAE	; 174
    186e:	1a e1       	ldi	r17, 0x1A	; 26
    1870:	2f ef       	ldi	r18, 0xFF	; 255
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	43 e0       	ldi	r20, 0x03	; 3
    1876:	6a e0       	ldi	r22, 0x0A	; 10
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	8c e8       	ldi	r24, 0x8C	; 140
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    1882:	6f cf       	rjmp	.-290    	; 0x1762 <_Z13checkGameOverP6Player+0x110>
	if (board[1][1] != EMPTY && ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0]))) {
		gameOver = 1; // 3 same in a diagonal
		winner = board[1][1];
	}
	
	if(gameOver) {
    1884:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <_Z13checkGameOverP6Player+0x23c>
    188c:	ac cf       	rjmp	.-168    	; 0x17e6 <_Z13checkGameOverP6Player+0x194>
    188e:	e8 cf       	rjmp	.-48     	; 0x1860 <_Z13checkGameOverP6Player+0x20e>
		offset_y = (TRY_AGAIN_H - 1 * CHAR_H * 2) / 2;
		draw_rectangle(TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W, WHITE);
		print_string(TRY_AGAIN_Y + offset_y, TRY_AGAIN_X + 4, 2, WHITE, CYAN, "TRY AGAIN\0"); //sa offset0_x bude previse desno ne kuzim zasto ??
	}
	
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	bf 90       	pop	r11
    18a0:	af 90       	pop	r10
    18a2:	08 95       	ret

000018a4 <main>:

int main() {
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	c0 56       	subi	r28, 0x60	; 96
    18ae:	d1 09       	sbc	r29, r1
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
	TFT_init();
    18ba:	0e 94 be 00 	call	0x17c	; 0x17c <_Z8TFT_initv>

	//initialize_menu();

	TFT_start();
    18be:	0e 94 49 00 	call	0x92	; 0x92 <_Z9TFT_startv>
	
	uint16_t TP_X;                  // received coordiates rom tuch part of screen
	uint16_t TP_Y;                  // received coordiates rom tuch part of screen
	set_background_color(CYAN); //kao neki clearscr
    18c2:	8e ea       	ldi	r24, 0xAE	; 174
    18c4:	9a e1       	ldi	r25, 0x1A	; 26
    18c6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_Z20set_background_colorj>
	//uint8_t i = 0;
	uint8_t currentPage = HOMESCREEN; //0 - homescreen //vratit na HOMESCREEN
    18ca:	1d 82       	std	Y+5, r1	; 0x05
	char str[22] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z'};
    18cc:	86 e1       	ldi	r24, 0x16	; 22
    18ce:	ef ed       	ldi	r30, 0xDF	; 223
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	de 01       	movw	r26, r28
    18d4:	16 96       	adiw	r26, 0x06	; 6
    18d6:	01 90       	ld	r0, Z+
    18d8:	0d 92       	st	X+, r0
    18da:	8a 95       	dec	r24
    18dc:	e1 f7       	brne	.-8      	; 0x18d6 <main+0x32>
	//print_keyboard(str);
	//Player players[4];
	uint8_t game_rerender = 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	8c 8f       	std	Y+28, r24	; 0x1c
						if(check_touch(TP_X, TP_Y, GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE, GRID_BLOCK_SIZE, GRID_BLOCK_SIZE)) {
							if(board[i][j] == EMPTY) { //ovo sa konstantama
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
								numberOfMoves++;
								currentPlayer = drawOnGrid(GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
								game_rerender = 1;
    18e2:	33 24       	eor	r3, r3
    18e4:	33 94       	inc	r3
	//players[2] = p3;
	//players[3] = p4;
	
	while (1) {
		// if screen is touched
		if(currentPage == HOMESCREEN) {
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	81 11       	cpse	r24, r1
    18ea:	67 c0       	rjmp	.+206    	; 0x19ba <main+0x116>
			//clrScr();
			if(hs_first_enter) { //bez ovoga ostanu stvari od proslog page-a nez zas iako sam gore u back buttonu stavio clrScr() ??
    18ec:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <hs_first_enter>
    18f0:	88 23       	and	r24, r24
    18f2:	31 f0       	breq	.+12     	; 0x1900 <main+0x5c>
				clrScr();
    18f4:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
				drawHomeScreen();
    18f8:	0e 94 e7 06 	call	0xdce	; 0xdce <_Z14drawHomeScreenv>
				hs_first_enter = 0;
    18fc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <hs_first_enter>
			}
			cp_rerender = 1;
    1900:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <cp_rerender>
			game_rerender = 1;
    1904:	3c 8e       	std	Y+28, r3	; 0x1c
			//drawHomeScreen();
			if(get_bit(PINB, T_IRQ) == 0) {
    1906:	b0 99       	sbic	0x16, 0	; 22
    1908:	ee cf       	rjmp	.-36     	; 0x18e6 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    190a:	be 01       	movw	r22, r28
    190c:	6d 5f       	subi	r22, 0xFD	; 253
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				if(check_touch(TP_X, TP_Y, HS_S_Y, HS_S_X, HS_H, HS_W)) { //NEW_PLAYER
    1918:	6b 81       	ldd	r22, Y+3	; 0x03
    191a:	7c 81       	ldd	r23, Y+4	; 0x04
    191c:	0f 2e       	mov	r0, r31
    191e:	f8 e1       	ldi	r31, 0x18	; 24
    1920:	ef 2e       	mov	r14, r31
    1922:	ff 24       	eor	r15, r15
    1924:	f3 94       	inc	r15
    1926:	f0 2d       	mov	r31, r0
    1928:	0c e3       	ldi	r16, 0x3C	; 60
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	24 e1       	ldi	r18, 0x14	; 20
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e0       	ldi	r20, 0x0A	; 10
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    193c:	88 23       	and	r24, r24
    193e:	39 f0       	breq	.+14     	; 0x194e <main+0xaa>
					clrScr();
    1940:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					hs_first_enter = 1;
    1944:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <hs_first_enter>
					np_rerender = 1;
    1948:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
					currentPage = NEW_PLAYER;
    194c:	3d 82       	std	Y+5, r3	; 0x05
				}
				if(check_touch(TP_X, TP_Y, CP_Y, CP_X, CP_H, CP_W)) { //CHOOSE_PLAYER
    194e:	6b 81       	ldd	r22, Y+3	; 0x03
    1950:	7c 81       	ldd	r23, Y+4	; 0x04
    1952:	0f 2e       	mov	r0, r31
    1954:	f8 e1       	ldi	r31, 0x18	; 24
    1956:	ef 2e       	mov	r14, r31
    1958:	ff 24       	eor	r15, r15
    195a:	f3 94       	inc	r15
    195c:	f0 2d       	mov	r31, r0
    195e:	0c e3       	ldi	r16, 0x3C	; 60
    1960:	10 e0       	ldi	r17, 0x00	; 0
    1962:	24 e1       	ldi	r18, 0x14	; 20
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e5       	ldi	r20, 0x50	; 80
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1972:	88 23       	and	r24, r24
    1974:	31 f0       	breq	.+12     	; 0x1982 <main+0xde>
					clrScr();
    1976:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					hs_first_enter = 1;
    197a:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <hs_first_enter>
					currentPage = CHOOSE_PLAYER;
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	8d 83       	std	Y+5, r24	; 0x05
				}
				if(check_touch(TP_X, TP_Y, LB_Y, LB_X, LB_H, LB_W)) { //LEADERBOARDS
    1982:	6b 81       	ldd	r22, Y+3	; 0x03
    1984:	7c 81       	ldd	r23, Y+4	; 0x04
    1986:	0f 2e       	mov	r0, r31
    1988:	f8 e1       	ldi	r31, 0x18	; 24
    198a:	ef 2e       	mov	r14, r31
    198c:	ff 24       	eor	r15, r15
    198e:	f3 94       	inc	r15
    1990:	f0 2d       	mov	r31, r0
    1992:	0c e3       	ldi	r16, 0x3C	; 60
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	24 e1       	ldi	r18, 0x14	; 20
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	46 e9       	ldi	r20, 0x96	; 150
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    19a6:	88 23       	and	r24, r24
    19a8:	09 f4       	brne	.+2      	; 0x19ac <main+0x108>
    19aa:	9d cf       	rjmp	.-198    	; 0x18e6 <main+0x42>
					clrScr(); //tu da se clear-a da se stalno ne re-cleara
    19ac:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					hs_first_enter = 1;
    19b0:	30 92 63 00 	sts	0x0063, r3	; 0x800063 <hs_first_enter>
					currentPage = LEADERBOARDS;
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	96 cf       	rjmp	.-212    	; 0x18e6 <main+0x42>
				}
			}
		}else if(currentPage == NEW_PLAYER) {
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <main+0x11c>
    19be:	46 c1       	rjmp	.+652    	; 0x1c4c <main+0x3a8>
			//drawBackButton();
			//print_keyboard(str); //stavi da se ponovo rendera tek kad dode do promjene
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    19c0:	8e 01       	movw	r16, r28
    19c2:	04 5e       	subi	r16, 0xE4	; 228
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	9e 01       	movw	r18, r28
    19c8:	23 5e       	subi	r18, 0xE3	; 227
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	ae 01       	movw	r20, r28
    19ce:	4b 5f       	subi	r20, 0xFB	; 251
    19d0:	5f 4f       	sbci	r21, 0xFF	; 255
    19d2:	be 01       	movw	r22, r28
    19d4:	6d 5f       	subi	r22, 0xFD	; 253
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//drawDeleteButton();
			//drawOKButton();
			if(np_rerender) {
    19e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <np_rerender>
    19e4:	88 23       	and	r24, r24
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <main+0x15c>
				drawBackButton();
    19e8:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
				print_keyboard(str); //stavi da se ponovo rendera tek kad dode do promjene
    19ec:	ce 01       	movw	r24, r28
    19ee:	06 96       	adiw	r24, 0x06	; 6
    19f0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_Z14print_keyboardPc>
				drawDeleteButton();
    19f4:	0e 94 b5 09 	call	0x136a	; 0x136a <_Z16drawDeleteButtonv>
				drawOKButton();
    19f8:	0e 94 8f 09 	call	0x131e	; 0x131e <_Z12drawOKButtonv>
				np_rerender = 0;
    19fc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <np_rerender>
			}
				
			if(get_bit(PINB, T_IRQ) == 0) {
    1a00:	b0 99       	sbic	0x16, 0	; 22
    1a02:	71 cf       	rjmp	.-286    	; 0x18e6 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    1a04:	be 01       	movw	r22, r28
    1a06:	6d 5f       	subi	r22, 0xFD	; 253
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
					if(check_touch(TP_X, TP_Y, KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    1a12:	ab 80       	ldd	r10, Y+3	; 0x03
    1a14:	bc 80       	ldd	r11, Y+4	; 0x04
    1a16:	c9 80       	ldd	r12, Y+1	; 0x01
    1a18:	da 80       	ldd	r13, Y+2	; 0x02
				np_rerender = 0;
			}
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1a1a:	91 2c       	mov	r9, r1
					if(check_touch(TP_X, TP_Y, KEY_Y + i/KEYS_IN_ONE_ROW * (KEY_H + BLANK_SPACE/2), KEY_X + i%KEYS_IN_ONE_ROW * (BLANK_SPACE/2 + KEY_W), KEY_H, KEY_W)) { //stisnut neki key od keyboarda
    1a1c:	0f 2e       	mov	r0, r31
    1a1e:	f9 e3       	ldi	r31, 0x39	; 57
    1a20:	7f 2e       	mov	r7, r31
    1a22:	f0 2d       	mov	r31, r0
    1a24:	0f 2e       	mov	r0, r31
    1a26:	f3 e2       	ldi	r31, 0x23	; 35
    1a28:	8f 2e       	mov	r8, r31
    1a2a:	f0 2d       	mov	r31, r0
    1a2c:	97 9c       	mul	r9, r7
    1a2e:	41 2d       	mov	r20, r1
    1a30:	11 24       	eor	r1, r1
    1a32:	46 95       	lsr	r20
    1a34:	84 2f       	mov	r24, r20
    1a36:	88 0f       	add	r24, r24
    1a38:	88 0f       	add	r24, r24
    1a3a:	88 0f       	add	r24, r24
    1a3c:	84 0f       	add	r24, r20
    1a3e:	29 2d       	mov	r18, r9
    1a40:	28 1b       	sub	r18, r24
    1a42:	82 9e       	mul	r8, r18
    1a44:	90 01       	movw	r18, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	26 5f       	subi	r18, 0xF6	; 246
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	84 9e       	mul	r8, r20
    1a4e:	a0 01       	movw	r20, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	4a 5b       	subi	r20, 0xBA	; 186
    1a54:	5f 4f       	sbci	r21, 0xFF	; 255
    1a56:	0f 2e       	mov	r0, r31
    1a58:	fe e1       	ldi	r31, 0x1E	; 30
    1a5a:	ef 2e       	mov	r14, r31
    1a5c:	f1 2c       	mov	r15, r1
    1a5e:	f0 2d       	mov	r31, r0
    1a60:	0e e1       	ldi	r16, 0x1E	; 30
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	b5 01       	movw	r22, r10
    1a66:	c6 01       	movw	r24, r12
    1a68:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1a6c:	88 23       	and	r24, r24
    1a6e:	71 f1       	breq	.+92     	; 0x1acc <main+0x228>
						if(newPlayerNameIndex == (MAX_NAME_LENGTH-1)) break; //jer ime ima max 7 char-a, ako je == 6 (zadnji index) naci da je vec sve upisao jer na zadnji mora doc nulterm
    1a70:	80 90 c8 01 	lds	r8, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1a74:	26 e0       	ldi	r18, 0x06	; 6
    1a76:	82 16       	cp	r8, r18
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <main+0x1d8>
    1a7a:	00 c3       	rjmp	.+1536   	; 0x207c <main+0x7d8>
						clrScr();
    1a7c:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						newPlayerName[newPlayerNameIndex] = str[i];
    1a80:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1a84:	e8 2f       	mov	r30, r24
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	ea 59       	subi	r30, 0x9A	; 154
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	a6 e0       	ldi	r26, 0x06	; 6
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ac 0f       	add	r26, r28
    1a92:	bd 1f       	adc	r27, r29
    1a94:	a9 0d       	add	r26, r9
    1a96:	b1 1d       	adc	r27, r1
    1a98:	9c 91       	ld	r25, X
    1a9a:	90 83       	st	Z, r25
						newPlayerName[newPlayerNameIndex+1] = '\0';
    1a9c:	11 82       	std	Z+1, r1	; 0x01
						newPlayerNameIndex++;
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <newPlayerNameIndex>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1aa4:	0f 2e       	mov	r0, r31
    1aa6:	f6 e6       	ldi	r31, 0x66	; 102
    1aa8:	ef 2e       	mov	r14, r31
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	ff 2e       	mov	r15, r31
    1aae:	f0 2d       	mov	r31, r0
    1ab0:	0e ea       	ldi	r16, 0xAE	; 174
    1ab2:	1a e1       	ldi	r17, 0x1A	; 26
    1ab4:	2f ef       	ldi	r18, 0xFF	; 255
    1ab6:	3f ef       	ldi	r19, 0xFF	; 255
    1ab8:	43 e0       	ldi	r20, 0x03	; 3
    1aba:	6a e0       	ldi	r22, 0x0A	; 10
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
						//_delay_ms(500); //da ne napravi previse ocitanja
						np_rerender = 1;
    1ac6:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
						//_delay_ms(100);
						break;
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <main+0x230>
				np_rerender = 0;
			}
				
			if(get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 22; i++){ //strlen(str) ali on nekad baca gresku nez zas
    1acc:	93 94       	inc	r9
    1ace:	46 e1       	ldi	r20, 0x16	; 22
    1ad0:	94 12       	cpse	r9, r20
    1ad2:	ac cf       	rjmp	.-168    	; 0x1a2c <main+0x188>
						np_rerender = 1;
						//_delay_ms(100);
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) { //delete button
    1ad4:	6b 81       	ldd	r22, Y+3	; 0x03
    1ad6:	7c 81       	ldd	r23, Y+4	; 0x04
    1ad8:	0f 2e       	mov	r0, r31
    1ada:	fc e3       	ldi	r31, 0x3C	; 60
    1adc:	ef 2e       	mov	r14, r31
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	f0 2d       	mov	r31, r0
    1ae2:	08 e2       	ldi	r16, 0x28	; 40
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	24 eb       	ldi	r18, 0xB4	; 180
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4e eb       	ldi	r20, 0xBE	; 190
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1af6:	88 23       	and	r24, r24
    1af8:	09 f4       	brne	.+2      	; 0x1afc <main+0x258>
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <main+0x2d6>
					if(newPlayerNameIndex > 1) { //znaci da ima jedno slovo, npr A\0
    1afc:	80 90 c8 01 	lds	r8, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	88 15       	cp	r24, r8
    1b04:	e0 f4       	brcc	.+56     	; 0x1b3e <main+0x29a>
						newPlayerNameIndex--;
    1b06:	8a 94       	dec	r8
    1b08:	80 92 c8 01 	sts	0x01C8, r8	; 0x8001c8 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = '\0';
    1b0c:	e8 2d       	mov	r30, r8
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	ea 59       	subi	r30, 0x9A	; 154
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	10 82       	st	Z, r1
						clrScr();
    1b16:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1b1a:	0f 2e       	mov	r0, r31
    1b1c:	f6 e6       	ldi	r31, 0x66	; 102
    1b1e:	ef 2e       	mov	r14, r31
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	ff 2e       	mov	r15, r31
    1b24:	f0 2d       	mov	r31, r0
    1b26:	0e ea       	ldi	r16, 0xAE	; 174
    1b28:	1a e1       	ldi	r17, 0x1A	; 26
    1b2a:	2f ef       	ldi	r18, 0xFF	; 255
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	43 e0       	ldi	r20, 0x03	; 3
    1b30:	6a e0       	ldi	r22, 0x0A	; 10
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
    1b3c:	1c c0       	rjmp	.+56     	; 0x1b76 <main+0x2d2>
					}else if(newPlayerNameIndex == 1){ //nema ni jedno slovo, stavim razmak jer inace ako je nulterm bude zbugano
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	89 12       	cpse	r8, r25
    1b42:	19 c0       	rjmp	.+50     	; 0x1b76 <main+0x2d2>
						newPlayerNameIndex--;
    1b44:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <newPlayerNameIndex>
						newPlayerName[newPlayerNameIndex] = ' ';
    1b48:	80 e2       	ldi	r24, 0x20	; 32
    1b4a:	e6 e6       	ldi	r30, 0x66	; 102
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 83       	st	Z, r24
						clrScr();
    1b50:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						print_string(INPUT_NAME_Y, INPUT_NAME_X, 3, WHITE, CYAN, newPlayerName);
    1b54:	0f 2e       	mov	r0, r31
    1b56:	f6 e6       	ldi	r31, 0x66	; 102
    1b58:	ef 2e       	mov	r14, r31
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	ff 2e       	mov	r15, r31
    1b5e:	f0 2d       	mov	r31, r0
    1b60:	0e ea       	ldi	r16, 0xAE	; 174
    1b62:	1a e1       	ldi	r17, 0x1A	; 26
    1b64:	2f ef       	ldi	r18, 0xFF	; 255
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	43 e0       	ldi	r20, 0x03	; 3
    1b6a:	6a e0       	ldi	r22, 0x0A	; 10
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	88 ec       	ldi	r24, 0xC8	; 200
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 b4 03 	call	0x768	; 0x768 <_Z12print_stringjjhjjPKc>
					}
					np_rerender = 1;
    1b76:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
				}
				
				if(check_touch(TP_X, TP_Y, OK_BTN_Y, OK_BTN_X, OK_BTN_H, OK_BTN_W)) { //OK button
    1b7a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b7c:	7c 81       	ldd	r23, Y+4	; 0x04
    1b7e:	0f 2e       	mov	r0, r31
    1b80:	fc e3       	ldi	r31, 0x3C	; 60
    1b82:	ef 2e       	mov	r14, r31
    1b84:	f1 2c       	mov	r15, r1
    1b86:	f0 2d       	mov	r31, r0
    1b88:	08 e2       	ldi	r16, 0x28	; 40
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
    1b8c:	2a ef       	ldi	r18, 0xFA	; 250
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4e eb       	ldi	r20, 0xBE	; 190
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1b9c:	88 23       	and	r24, r24
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <main+0x2fe>
    1ba0:	a2 ce       	rjmp	.-700    	; 0x18e6 <main+0x42>
					//create player i da se vrati na homescreen
					if(players_size == MAX_PLAYERS || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
    1ba2:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <players_size>
    1ba6:	34 30       	cpi	r19, 0x04	; 4
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <main+0x308>
    1baa:	9d ce       	rjmp	.-710    	; 0x18e6 <main+0x42>
    1bac:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <newPlayerNameIndex>
    1bb0:	44 23       	and	r20, r20
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <main+0x312>
    1bb4:	98 ce       	rjmp	.-720    	; 0x18e6 <main+0x42>
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1bb8:	e6 e6       	ldi	r30, 0x66	; 102
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	01 90       	ld	r0, Z+
    1bbe:	00 20       	and	r0, r0
    1bc0:	e9 f7       	brne	.-6      	; 0x1bbc <main+0x318>
    1bc2:	31 97       	sbiw	r30, 0x01	; 1
    1bc4:	e6 56       	subi	r30, 0x66	; 102
    1bc6:	f0 40       	sbci	r31, 0x00	; 0
    1bc8:	82 2f       	mov	r24, r18
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	8e 17       	cp	r24, r30
    1bce:	9f 07       	cpc	r25, r31
    1bd0:	68 f4       	brcc	.+26     	; 0x1bec <main+0x348>
						newPlayer.name[i] = newPlayerName[i];
    1bd2:	e9 e4       	ldi	r30, 0x49	; 73
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	ec 0f       	add	r30, r28
    1bd8:	fd 1f       	adc	r31, r29
    1bda:	e8 0f       	add	r30, r24
    1bdc:	f9 1f       	adc	r31, r25
    1bde:	dc 01       	movw	r26, r24
    1be0:	aa 59       	subi	r26, 0x9A	; 154
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	8c 91       	ld	r24, X
    1be6:	84 83       	std	Z+4, r24	; 0x04
					//create player i da se vrati na homescreen
					if(players_size == MAX_PLAYERS || !newPlayerNameIndex) continue; //ako je 4 igraca ili ako nista nije unio kao ime
					Player newPlayer;
					//newPlayer.name = newPlayerName;
					
					for(uint8_t i = 0; i < strlen(newPlayerName); i++) { //morat ces reset-at newPlayerName i to --jesam
    1be8:	2f 5f       	subi	r18, 0xFF	; 255
    1bea:	e6 cf       	rjmp	.-52     	; 0x1bb8 <main+0x314>
						newPlayer.name[i] = newPlayerName[i];
					}
					newPlayer.name[newPlayerNameIndex] = '\0';
    1bec:	e9 e4       	ldi	r30, 0x49	; 73
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	ec 0f       	add	r30, r28
    1bf2:	fd 1f       	adc	r31, r29
    1bf4:	e4 0f       	add	r30, r20
    1bf6:	f1 1d       	adc	r31, r1
    1bf8:	14 82       	std	Z+4, r1	; 0x04
					newPlayer.points = 0;
					newPlayer.clicked = 0;
					newPlayer.color = WHITE;
					players[players_size] = newPlayer;
    1bfa:	2a 96       	adiw	r28, 0x0a	; 10
    1bfc:	1f ae       	std	Y+63, r1	; 0x3f
    1bfe:	2a 97       	sbiw	r28, 0x0a	; 10
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	2c 96       	adiw	r28, 0x0c	; 12
    1c06:	9f af       	std	Y+63, r25	; 0x3f
    1c08:	8e af       	std	Y+62, r24	; 0x3e
    1c0a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c0c:	2d 96       	adiw	r28, 0x0d	; 13
    1c0e:	1f ae       	std	Y+63, r1	; 0x3f
    1c10:	2d 97       	sbiw	r28, 0x0d	; 13
    1c12:	a1 e0       	ldi	r26, 0x01	; 1
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ac 0f       	add	r26, r28
    1c18:	bd 1f       	adc	r27, r29
    1c1a:	fb e0       	ldi	r31, 0x0B	; 11
    1c1c:	3f 9f       	mul	r19, r31
    1c1e:	a0 0d       	add	r26, r0
    1c20:	b1 1d       	adc	r27, r1
    1c22:	11 24       	eor	r1, r1
    1c24:	5c 96       	adiw	r26, 0x1c	; 28
    1c26:	8b e0       	ldi	r24, 0x0B	; 11
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e7 5b       	subi	r30, 0xB7	; 183
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	01 90       	ld	r0, Z+
    1c30:	0d 92       	st	X+, r0
    1c32:	8a 95       	dec	r24
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <main+0x38a>
					players_size++;
    1c36:	3f 5f       	subi	r19, 0xFF	; 255
    1c38:	30 93 c7 01 	sts	0x01C7, r19	; 0x8001c7 <players_size>
					resetNewPlayerName();
    1c3c:	0e 94 72 07 	call	0xee4	; 0xee4 <_Z18resetNewPlayerNamev>
					clrScr();
    1c40:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
					np_rerender = 1;
    1c44:	30 92 61 00 	sts	0x0061, r3	; 0x800061 <np_rerender>
					currentPage = HOMESCREEN;
    1c48:	1d 82       	std	Y+5, r1	; 0x05
    1c4a:	4d ce       	rjmp	.-870    	; 0x18e6 <main+0x42>
				}
			}
			
		}else if(currentPage == CHOOSE_PLAYER) {
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <main+0x3ae>
    1c50:	03 c1       	rjmp	.+518    	; 0x1e58 <main+0x5b4>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1c52:	8e 01       	movw	r16, r28
    1c54:	04 5e       	subi	r16, 0xE4	; 228
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	9e 01       	movw	r18, r28
    1c5a:	23 5e       	subi	r18, 0xE3	; 227
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	ae 01       	movw	r20, r28
    1c60:	4b 5f       	subi	r20, 0xFB	; 251
    1c62:	5f 4f       	sbci	r21, 0xFF	; 255
    1c64:	be 01       	movw	r22, r28
    1c66:	6d 5f       	subi	r22, 0xFD	; 253
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			if(cp_rerender) { //tako da ne radi stalno rerender ako se nista nije promjenilo, puno je responzivnije na ovaj nacin
    1c72:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cp_rerender>
    1c76:	88 23       	and	r24, r24
    1c78:	61 f0       	breq	.+24     	; 0x1c92 <main+0x3ee>
				drawBackButton();
    1c7a:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
				showPlayers(players, players_size);
    1c7e:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <players_size>
    1c82:	ce 01       	movw	r24, r28
    1c84:	4d 96       	adiw	r24, 0x1d	; 29
    1c86:	0e 94 0d 09 	call	0x121a	; 0x121a <_Z11showPlayersP6Playerh>
				drawStartButton();
    1c8a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <_Z15drawStartButtonv>
				cp_rerender = 0;	
    1c8e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cp_rerender>
			}
			
			if (get_bit(PINB, T_IRQ) == 0) {
    1c92:	b0 99       	sbic	0x16, 0	; 22
    1c94:	28 ce       	rjmp	.-944    	; 0x18e6 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    1c96:	be 01       	movw	r22, r28
    1c98:	6d 5f       	subi	r22, 0xFD	; 253
    1c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1ca4:	80 90 c7 01 	lds	r8, 0x01C7	; 0x8001c7 <players_size>
    1ca8:	88 20       	and	r8, r8
    1caa:	09 f4       	brne	.+2      	; 0x1cae <main+0x40a>
    1cac:	b1 c0       	rjmp	.+354    	; 0x1e10 <main+0x56c>
					tmp = i > 1 ? 50 : 0;
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1cae:	ab 80       	ldd	r10, Y+3	; 0x03
    1cb0:	bc 80       	ldd	r11, Y+4	; 0x04
    1cb2:	c9 80       	ldd	r12, Y+1	; 0x01
    1cb4:	da 80       	ldd	r13, Y+2	; 0x02
    1cb6:	91 2c       	mov	r9, r1
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1cba:	0f 2e       	mov	r0, r31
    1cbc:	f2 e8       	ldi	r31, 0x82	; 130
    1cbe:	7f 2e       	mov	r7, r31
    1cc0:	f0 2d       	mov	r31, r0
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
					tmp = i > 1 ? 50 : 0;
    1cc2:	61 2c       	mov	r6, r1
    1cc4:	06 c0       	rjmp	.+12     	; 0x1cd2 <main+0x42e>
    1cc6:	21 e0       	ldi	r18, 0x01	; 1
    1cc8:	29 15       	cp	r18, r9
    1cca:	10 f0       	brcs	.+4      	; 0x1cd0 <main+0x42c>
    1ccc:	46 2d       	mov	r20, r6
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <main+0x42e>
    1cd0:	42 e3       	ldi	r20, 0x32	; 50
					if(check_touch(TP_X, TP_Y, SP_BTN_Y + tmp, SP_BTN_X + (i%2)*(SP_BTN_W + BLANK_SPACE), SP_BTN_H, SP_BTN_W)) { //skuzi zasto poboja cijeli stupac ako gornjeg stisnes, a nista ako donjeg --jer ti je tmp bio izvan petlje
    1cd2:	90 fa       	bst	r9, 0
    1cd4:	44 24       	eor	r4, r4
    1cd6:	40 f8       	bld	r4, 0
    1cd8:	51 2c       	mov	r5, r1
    1cda:	74 9c       	mul	r7, r4
    1cdc:	90 01       	movw	r18, r0
    1cde:	75 9c       	mul	r7, r5
    1ce0:	30 0d       	add	r19, r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	2c 5e       	subi	r18, 0xEC	; 236
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	4a 5b       	subi	r20, 0xBA	; 186
    1cec:	5f 4f       	sbci	r21, 0xFF	; 255
    1cee:	0f 2e       	mov	r0, r31
    1cf0:	f8 e7       	ldi	r31, 0x78	; 120
    1cf2:	ef 2e       	mov	r14, r31
    1cf4:	f1 2c       	mov	r15, r1
    1cf6:	f0 2d       	mov	r31, r0
    1cf8:	08 e2       	ldi	r16, 0x28	; 40
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	b5 01       	movw	r22, r10
    1cfe:	c6 01       	movw	r24, r12
    1d00:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1d04:	88 23       	and	r24, r24
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <main+0x466>
    1d08:	80 c0       	rjmp	.+256    	; 0x1e0a <main+0x566>
						if(players[i].color == WHITE && cross_chosen == NONE) {
    1d0a:	29 2d       	mov	r18, r9
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	e1 e0       	ldi	r30, 0x01	; 1
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	ec 0f       	add	r30, r28
    1d14:	fd 1f       	adc	r31, r29
    1d16:	4b e0       	ldi	r20, 0x0B	; 11
    1d18:	94 9e       	mul	r9, r20
    1d1a:	e0 0d       	add	r30, r0
    1d1c:	f1 1d       	adc	r31, r1
    1d1e:	11 24       	eor	r1, r1
    1d20:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d22:	96 8d       	ldd	r25, Z+30	; 0x1e
    1d24:	8f 3f       	cpi	r24, 0xFF	; 255
    1d26:	ef ef       	ldi	r30, 0xFF	; 255
    1d28:	9e 07       	cpc	r25, r30
    1d2a:	99 f5       	brne	.+102    	; 0x1d92 <main+0x4ee>
    1d2c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1d30:	85 30       	cpi	r24, 0x05	; 5
    1d32:	a9 f4       	brne	.+42     	; 0x1d5e <main+0x4ba>
							players[i].color = RED;
    1d34:	8b e0       	ldi	r24, 0x0B	; 11
    1d36:	82 9f       	mul	r24, r18
    1d38:	f0 01       	movw	r30, r0
    1d3a:	83 9f       	mul	r24, r19
    1d3c:	f0 0d       	add	r31, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	8c 0f       	add	r24, r28
    1d46:	9d 1f       	adc	r25, r29
    1d48:	e8 0f       	add	r30, r24
    1d4a:	f9 1f       	adc	r31, r25
    1d4c:	89 e6       	ldi	r24, 0x69	; 105
    1d4e:	93 ed       	ldi	r25, 0xD3	; 211
    1d50:	96 8f       	std	Z+30, r25	; 0x1e
    1d52:	85 8f       	std	Z+29, r24	; 0x1d
							players[i].clicked = 1;
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	97 8f       	std	Z+31, r25	; 0x1f
							cross_chosen = i;
    1d58:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <cross_chosen>
    1d5c:	4a c0       	rjmp	.+148    	; 0x1df2 <main+0x54e>
						}else if(players[i].color == WHITE && cross_chosen != 5 && nought_chosen == NONE) {
    1d5e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1d62:	85 30       	cpi	r24, 0x05	; 5
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <main+0x4c4>
    1d66:	45 c0       	rjmp	.+138    	; 0x1df2 <main+0x54e>
							players[i].color = GREEN;
    1d68:	8b e0       	ldi	r24, 0x0B	; 11
    1d6a:	82 9f       	mul	r24, r18
    1d6c:	f0 01       	movw	r30, r0
    1d6e:	83 9f       	mul	r24, r19
    1d70:	f0 0d       	add	r31, r0
    1d72:	11 24       	eor	r1, r1
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	8c 0f       	add	r24, r28
    1d7a:	9d 1f       	adc	r25, r29
    1d7c:	e8 0f       	add	r30, r24
    1d7e:	f9 1f       	adc	r31, r25
    1d80:	8b e2       	ldi	r24, 0x2B	; 43
    1d82:	97 ec       	ldi	r25, 0xC7	; 199
    1d84:	96 8f       	std	Z+30, r25	; 0x1e
    1d86:	85 8f       	std	Z+29, r24	; 0x1d
							players[i].clicked = 1;
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	97 8f       	std	Z+31, r25	; 0x1f
							nought_chosen = i;
    1d8c:	90 92 64 00 	sts	0x0064, r9	; 0x800064 <nought_chosen>
    1d90:	30 c0       	rjmp	.+96     	; 0x1df2 <main+0x54e>
						}else if(players[i].color == RED) {
    1d92:	89 36       	cpi	r24, 0x69	; 105
    1d94:	e3 ed       	ldi	r30, 0xD3	; 211
    1d96:	9e 07       	cpc	r25, r30
    1d98:	a9 f4       	brne	.+42     	; 0x1dc4 <main+0x520>
							players[i].color = WHITE;
    1d9a:	8b e0       	ldi	r24, 0x0B	; 11
    1d9c:	82 9f       	mul	r24, r18
    1d9e:	f0 01       	movw	r30, r0
    1da0:	83 9f       	mul	r24, r19
    1da2:	f0 0d       	add	r31, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	8c 0f       	add	r24, r28
    1dac:	9d 1f       	adc	r25, r29
    1dae:	e8 0f       	add	r30, r24
    1db0:	f9 1f       	adc	r31, r25
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	96 8f       	std	Z+30, r25	; 0x1e
    1db8:	85 8f       	std	Z+29, r24	; 0x1d
							cross_chosen = NONE;
    1dba:	85 e0       	ldi	r24, 0x05	; 5
    1dbc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <cross_chosen>
							players[i].clicked = 0;
    1dc0:	17 8e       	std	Z+31, r1	; 0x1f
    1dc2:	17 c0       	rjmp	.+46     	; 0x1df2 <main+0x54e>
						}else if(players[i].color == GREEN) {
    1dc4:	8b 32       	cpi	r24, 0x2B	; 43
    1dc6:	97 4c       	sbci	r25, 0xC7	; 199
    1dc8:	a1 f4       	brne	.+40     	; 0x1df2 <main+0x54e>
							players[i].color = WHITE;
    1dca:	8b e0       	ldi	r24, 0x0B	; 11
    1dcc:	82 9f       	mul	r24, r18
    1dce:	f0 01       	movw	r30, r0
    1dd0:	83 9f       	mul	r24, r19
    1dd2:	f0 0d       	add	r31, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	8c 0f       	add	r24, r28
    1ddc:	9d 1f       	adc	r25, r29
    1dde:	e8 0f       	add	r30, r24
    1de0:	f9 1f       	adc	r31, r25
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	9f ef       	ldi	r25, 0xFF	; 255
    1de6:	96 8f       	std	Z+30, r25	; 0x1e
    1de8:	85 8f       	std	Z+29, r24	; 0x1d
							nought_chosen = NONE;
    1dea:	85 e0       	ldi	r24, 0x05	; 5
    1dec:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <nought_chosen>
							players[i].clicked = 0;
    1df0:	17 8e       	std	Z+31, r1	; 0x1f
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1df2:	9f ef       	ldi	r25, 0xFF	; 255
    1df4:	ef e3       	ldi	r30, 0x3F	; 63
    1df6:	f2 e0       	ldi	r31, 0x02	; 2
    1df8:	91 50       	subi	r25, 0x01	; 1
    1dfa:	e0 40       	sbci	r30, 0x00	; 0
    1dfc:	f0 40       	sbci	r31, 0x00	; 0
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <main+0x554>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <main+0x55e>
    1e02:	00 00       	nop
						}
						_delay_ms(100); //da ne napravi 2 ocitanja
						cp_rerender = 1;
    1e04:	30 92 62 00 	sts	0x0062, r3	; 0x800062 <cp_rerender>
						break;
    1e08:	03 c0       	rjmp	.+6      	; 0x1e10 <main+0x56c>
			}
			
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				uint8_t tmp;
				for(uint8_t i = 0; i < players_size; i++) {
    1e0a:	93 94       	inc	r9
    1e0c:	98 10       	cpse	r9, r8
    1e0e:	5b cf       	rjmp	.-330    	; 0x1cc6 <main+0x422>
						cp_rerender = 1;
						break;
					}
				}
				
				if(check_touch(TP_X, TP_Y, START_BTN_Y, START_BTN_X, START_BTN_H, START_BTN_W)) {
    1e10:	6b 81       	ldd	r22, Y+3	; 0x03
    1e12:	7c 81       	ldd	r23, Y+4	; 0x04
    1e14:	0f 2e       	mov	r0, r31
    1e16:	fa e5       	ldi	r31, 0x5A	; 90
    1e18:	ef 2e       	mov	r14, r31
    1e1a:	f1 2c       	mov	r15, r1
    1e1c:	f0 2d       	mov	r31, r0
    1e1e:	08 e2       	ldi	r16, 0x28	; 40
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    1e22:	2c ed       	ldi	r18, 0xDC	; 220
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4e eb       	ldi	r20, 0xBE	; 190
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1e32:	88 23       	and	r24, r24
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <main+0x594>
    1e36:	57 cd       	rjmp	.-1362   	; 0x18e6 <main+0x42>
					if(cross_chosen != NONE && nought_chosen != NONE){ //ne moze uc u game ako nije odabrao dvojicu
    1e38:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <cross_chosen>
    1e3c:	85 30       	cpi	r24, 0x05	; 5
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <main+0x59e>
    1e40:	52 cd       	rjmp	.-1372   	; 0x18e6 <main+0x42>
    1e42:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nought_chosen>
    1e46:	85 30       	cpi	r24, 0x05	; 5
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <main+0x5a8>
    1e4a:	4d cd       	rjmp	.-1382   	; 0x18e6 <main+0x42>
						clrScr();
    1e4c:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
						currentPage = GAME;
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	8d 83       	std	Y+5, r24	; 0x05
						game_rerender = 1; //dok ovo nisam napravio, prvi put nakon sta si stisnuo back i usao u GAME ovo bi bilo 0 iako se unutar checkBackButton to stavi na 1 ?????
    1e54:	3c 8e       	std	Y+28, r3	; 0x1c
    1e56:	47 cd       	rjmp	.-1394   	; 0x18e6 <main+0x42>
					}
				}
			}
		}else if(currentPage == LEADERBOARDS) {
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	c9 f4       	brne	.+50     	; 0x1e8e <main+0x5ea>
			drawBackButton();
    1e5c:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1e60:	8e 01       	movw	r16, r28
    1e62:	04 5e       	subi	r16, 0xE4	; 228
    1e64:	1f 4f       	sbci	r17, 0xFF	; 255
    1e66:	9e 01       	movw	r18, r28
    1e68:	23 5e       	subi	r18, 0xE3	; 227
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	ae 01       	movw	r20, r28
    1e6e:	4b 5f       	subi	r20, 0xFB	; 251
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	be 01       	movw	r22, r28
    1e74:	6d 5f       	subi	r22, 0xFD	; 253
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	ce 01       	movw	r24, r28
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//printLeaderboards(players, sizeof(players) / sizeof(players[0])); //moras prije nego saljes u funkciju jer se u funkciju salje samo pointer, ali ovo ce ti poslat za koliko njih je alocirano mjesta, a ne koliko ih je stvarno unutra
			printLeaderboards(players, players_size);
    1e80:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <players_size>
    1e84:	ce 01       	movw	r24, r28
    1e86:	4d 96       	adiw	r24, 0x1d	; 29
    1e88:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_Z17printLeaderboardsP6Playerh>
    1e8c:	2c cd       	rjmp	.-1448   	; 0x18e6 <main+0x42>
		}else if(currentPage == GAME) {
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <main+0x5f0>
    1e92:	29 cd       	rjmp	.-1454   	; 0x18e6 <main+0x42>
			//drawBackButton();
			checkBackButtonPressed(&TP_X, &TP_Y, &currentPage, players, &game_rerender);
    1e94:	8e 01       	movw	r16, r28
    1e96:	04 5e       	subi	r16, 0xE4	; 228
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	9e 01       	movw	r18, r28
    1e9c:	23 5e       	subi	r18, 0xE3	; 227
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	ae 01       	movw	r20, r28
    1ea2:	4b 5f       	subi	r20, 0xFB	; 251
    1ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea6:	be 01       	movw	r22, r28
    1ea8:	6d 5f       	subi	r22, 0xFD	; 253
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z22checkBackButtonPressedPjS_PhP6PlayerS0_>
			//drawNames(players);
			//drawGrid();
			//char tmp[2];
			//sprintf(tmp, "%d\0", game_rerender);
			//print_string(200, 10, 2, WHITE, CYAN, tmp);
			if(gameOver && check_touch(TP_X, TP_Y, TRY_AGAIN_Y, TRY_AGAIN_X, TRY_AGAIN_H, TRY_AGAIN_W)) { //TRY AGAIN
    1eb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1eb8:	88 23       	and	r24, r24
    1eba:	f1 f0       	breq	.+60     	; 0x1ef8 <main+0x654>
    1ebc:	6b 81       	ldd	r22, Y+3	; 0x03
    1ebe:	7c 81       	ldd	r23, Y+4	; 0x04
    1ec0:	0f 2e       	mov	r0, r31
    1ec2:	f9 e6       	ldi	r31, 0x69	; 105
    1ec4:	ef 2e       	mov	r14, r31
    1ec6:	f1 2c       	mov	r15, r1
    1ec8:	f0 2d       	mov	r31, r0
    1eca:	0e e1       	ldi	r16, 0x1E	; 30
    1ecc:	10 e0       	ldi	r17, 0x00	; 0
    1ece:	2a e0       	ldi	r18, 0x0A	; 10
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	48 ec       	ldi	r20, 0xC8	; 200
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1ede:	88 23       	and	r24, r24
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <main+0x640>
    1ee2:	01 cd       	rjmp	.-1534   	; 0x18e6 <main+0x42>
				resetGame();
    1ee4:	0e 94 a1 07 	call	0xf42	; 0xf42 <_Z9resetGamev>
				clrScr();
    1ee8:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z6clrScrv>
				game_rerender = 1;
    1eec:	3c 8e       	std	Y+28, r3	; 0x1c
			}
			
			if(gameOver) continue;
    1eee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <gameOver>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	f8 cc       	rjmp	.-1552   	; 0x18e6 <main+0x42>
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <main+0x65a>
			
			if(game_rerender) { //da se rerendera tek kad se desi promjena, ne znam zasto se ne rendera kad prvi put udes unutra nakon sta si BACK button stisnuo, ako ne uspijes rjesit onda pusti bez ovog if-a pa ce bit malo manje responzivno --uspio
    1ef8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1efa:	88 23       	and	r24, r24
    1efc:	89 f0       	breq	.+34     	; 0x1f20 <main+0x67c>
				drawBackButton();
    1efe:	0e 94 47 07 	call	0xe8e	; 0xe8e <_Z14drawBackButtonv>
				drawNames(players); //zbog nekog razloga kad ude tu ponovo vrijednost od game_rerender je 0 ??? --uspio ali svejedno ne kuzim zasto se to desava ??
    1f02:	ce 01       	movw	r24, r28
    1f04:	4d 96       	adiw	r24, 0x1d	; 29
    1f06:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z9drawNamesP6Player>
				drawGrid();
    1f0a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_Z8drawGridv>
				checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
    1f0e:	ce 01       	movw	r24, r28
    1f10:	4d 96       	adiw	r24, 0x1d	; 29
    1f12:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z13checkGameOverP6Player>
				drawTurn(players);
    1f16:	ce 01       	movw	r24, r28
    1f18:	4d 96       	adiw	r24, 0x1d	; 29
    1f1a:	0e 94 8f 0a 	call	0x151e	; 0x151e <_Z8drawTurnP6Player>
				game_rerender = 0;
    1f1e:	1c 8e       	std	Y+28, r1	; 0x1c
			}
			
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
    1f20:	b0 99       	sbic	0x16, 0	; 22
    1f22:	e1 cc       	rjmp	.-1598   	; 0x18e6 <main+0x42>
				read_touch_coords(&TP_X, &TP_Y);
    1f24:	be 01       	movw	r22, r28
    1f26:	6d 5f       	subi	r22, 0xFD	; 253
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	0e 94 89 02 	call	0x512	; 0x512 <_Z17read_touch_coordsPjS_>
    1f32:	8e eb       	ldi	r24, 0xBE	; 190
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	6a 96       	adiw	r28, 0x1a	; 26
    1f38:	9f af       	std	Y+63, r25	; 0x3f
    1f3a:	8e af       	std	Y+62, r24	; 0x3e
    1f3c:	6a 97       	sbiw	r28, 0x1a	; 26
    1f3e:	0e e6       	ldi	r16, 0x6E	; 110
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	61 2c       	mov	r6, r1
    1f44:	71 2c       	mov	r7, r1
    1f46:	a1 96       	adiw	r28, 0x21	; 33
    1f48:	5f ae       	std	Y+63, r5	; 0x3f
    1f4a:	4e ae       	std	Y+62, r4	; 0x3e
    1f4c:	a1 97       	sbiw	r28, 0x21	; 33
    1f4e:	6f 96       	adiw	r28, 0x1f	; 31
    1f50:	3f ae       	std	Y+63, r3	; 0x3f
    1f52:	6f 97       	sbiw	r28, 0x1f	; 31
    1f54:	18 01       	movw	r2, r16
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
						if(check_touch(TP_X, TP_Y, GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE, GRID_BLOCK_SIZE, GRID_BLOCK_SIZE)) {
    1f56:	6e 96       	adiw	r28, 0x1e	; 30
    1f58:	7f ae       	std	Y+63, r7	; 0x3f
    1f5a:	6e ae       	std	Y+62, r6	; 0x3e
    1f5c:	6e 97       	sbiw	r28, 0x1e	; 30
    1f5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f60:	fc 81       	ldd	r31, Y+4	; 0x04
    1f62:	66 96       	adiw	r28, 0x16	; 22
    1f64:	ff af       	std	Y+63, r31	; 0x3f
    1f66:	ee af       	std	Y+62, r30	; 0x3e
    1f68:	66 97       	sbiw	r28, 0x16	; 22
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	68 96       	adiw	r28, 0x18	; 24
    1f70:	9f af       	std	Y+63, r25	; 0x3f
    1f72:	8e af       	std	Y+62, r24	; 0x3e
    1f74:	68 97       	sbiw	r28, 0x18	; 24
    1f76:	6a 96       	adiw	r28, 0x1a	; 26
    1f78:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f7a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f7c:	6a 97       	sbiw	r28, 0x1a	; 26
    1f7e:	0f 2e       	mov	r0, r31
    1f80:	fd e2       	ldi	r31, 0x2D	; 45
    1f82:	af 2e       	mov	r10, r31
    1f84:	b1 2c       	mov	r11, r1
    1f86:	f0 2d       	mov	r31, r0
    1f88:	c1 2c       	mov	r12, r1
    1f8a:	d1 2c       	mov	r13, r1
    1f8c:	6c 96       	adiw	r28, 0x1c	; 28
    1f8e:	7f ae       	std	Y+63, r7	; 0x3f
    1f90:	6e ae       	std	Y+62, r6	; 0x3e
    1f92:	6c 97       	sbiw	r28, 0x1c	; 28
    1f94:	26 01       	movw	r4, r12
    1f96:	0f 2e       	mov	r0, r31
    1f98:	fe e3       	ldi	r31, 0x3E	; 62
    1f9a:	ef 2e       	mov	r14, r31
    1f9c:	f1 2c       	mov	r15, r1
    1f9e:	f0 2d       	mov	r31, r0
    1fa0:	0e e3       	ldi	r16, 0x3E	; 62
    1fa2:	10 e0       	ldi	r17, 0x00	; 0
    1fa4:	91 01       	movw	r18, r2
    1fa6:	a5 01       	movw	r20, r10
    1fa8:	66 96       	adiw	r28, 0x16	; 22
    1faa:	6e ad       	ldd	r22, Y+62	; 0x3e
    1fac:	7f ad       	ldd	r23, Y+63	; 0x3f
    1fae:	66 97       	sbiw	r28, 0x16	; 22
    1fb0:	68 96       	adiw	r28, 0x18	; 24
    1fb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fb6:	68 97       	sbiw	r28, 0x18	; 24
    1fb8:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    1fbc:	88 23       	and	r24, r24
    1fbe:	81 f1       	breq	.+96     	; 0x2020 <main+0x77c>
							if(board[i][j] == EMPTY) { //ovo sa konstantama
    1fc0:	f4 01       	movw	r30, r8
    1fc2:	80 81       	ld	r24, Z
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	2c c0       	rjmp	.+88     	; 0x2020 <main+0x77c>
    1fc8:	82 01       	movw	r16, r4
    1fca:	6c 96       	adiw	r28, 0x1c	; 28
    1fcc:	6e ac       	ldd	r6, Y+62	; 0x3e
    1fce:	7f ac       	ldd	r7, Y+63	; 0x3f
    1fd0:	6c 97       	sbiw	r28, 0x1c	; 28
								board[i][j] = currentPlayer; //ovo mozes da je 1 ili 2 s obzirom dal je X iil O
    1fd2:	6e 96       	adiw	r28, 0x1e	; 30
    1fd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1fd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fd8:	6e 97       	sbiw	r28, 0x1e	; 30
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	6e 96       	adiw	r28, 0x1e	; 30
    1fe0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fe2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fe4:	6e 97       	sbiw	r28, 0x1e	; 30
    1fe6:	e8 0f       	add	r30, r24
    1fe8:	f9 1f       	adc	r31, r25
    1fea:	e2 54       	subi	r30, 0x42	; 66
    1fec:	fe 4f       	sbci	r31, 0xFE	; 254
    1fee:	e0 0f       	add	r30, r16
    1ff0:	f1 1f       	adc	r31, r17
    1ff2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1ff6:	80 83       	st	Z, r24
								numberOfMoves++;
    1ff8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
								currentPlayer = drawOnGrid(GRID_STARTING_Y + j*GRID_BLOCK_SIZE, GRID_STARTING_X + i*GRID_BLOCK_SIZE); //y i x koordinate gornjeg lijevog kuta kvadrata na koji je stisnuo
    2002:	9e e3       	ldi	r25, 0x3E	; 62
    2004:	c9 9e       	mul	r12, r25
    2006:	80 2d       	mov	r24, r0
    2008:	11 24       	eor	r1, r1
    200a:	62 2d       	mov	r22, r2
    200c:	83 5d       	subi	r24, 0xD3	; 211
    200e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_Z10drawOnGridhh>
    2012:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
								game_rerender = 1;
    2016:	6f 96       	adiw	r28, 0x1f	; 31
    2018:	ef ad       	ldd	r30, Y+63	; 0x3f
    201a:	6f 97       	sbiw	r28, 0x1f	; 31
    201c:	ec 8f       	std	Y+28, r30	; 0x1c
								break;
    201e:	12 c0       	rjmp	.+36     	; 0x2044 <main+0x7a0>
    2020:	ff ef       	ldi	r31, 0xFF	; 255
    2022:	cf 1a       	sub	r12, r31
    2024:	df 0a       	sbc	r13, r31
    2026:	2e e3       	ldi	r18, 0x3E	; 62
    2028:	a2 0e       	add	r10, r18
    202a:	b1 1c       	adc	r11, r1
    202c:	4f ef       	ldi	r20, 0xFF	; 255
    202e:	84 1a       	sub	r8, r20
    2030:	94 0a       	sbc	r9, r20
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
					for(uint8_t j = 0; j < 3; j++) {
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	c8 16       	cp	r12, r24
    2036:	d1 04       	cpc	r13, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <main+0x798>
    203a:	ac cf       	rjmp	.-168    	; 0x1f94 <main+0x6f0>
    203c:	6c 96       	adiw	r28, 0x1c	; 28
    203e:	6e ac       	ldd	r6, Y+62	; 0x3e
    2040:	7f ac       	ldd	r7, Y+63	; 0x3f
    2042:	6c 97       	sbiw	r28, 0x1c	; 28
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	69 1a       	sub	r6, r25
    2048:	79 0a       	sbc	r7, r25
    204a:	6a 96       	adiw	r28, 0x1a	; 26
    204c:	ee ad       	ldd	r30, Y+62	; 0x3e
    204e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2050:	6a 97       	sbiw	r28, 0x1a	; 26
    2052:	33 96       	adiw	r30, 0x03	; 3
    2054:	6a 96       	adiw	r28, 0x1a	; 26
    2056:	ff af       	std	Y+63, r31	; 0x3f
    2058:	ee af       	std	Y+62, r30	; 0x3e
    205a:	6a 97       	sbiw	r28, 0x1a	; 26
    205c:	fe e3       	ldi	r31, 0x3E	; 62
    205e:	2f 0e       	add	r2, r31
    2060:	31 1c       	adc	r3, r1
			
			//checkGameOver(players); //ide ispod ovog if-a tako da se ne vrti bezveze ako je gotovo
			//drawTurn(players);		
			if (get_bit(PINB, T_IRQ) == 0) {
				read_touch_coords(&TP_X, &TP_Y);
				for(uint8_t i = 0; i < 3; i++) {
    2062:	23 e0       	ldi	r18, 0x03	; 3
    2064:	62 16       	cp	r6, r18
    2066:	71 04       	cpc	r7, r1
    2068:	09 f0       	breq	.+2      	; 0x206c <main+0x7c8>
    206a:	75 cf       	rjmp	.-278    	; 0x1f56 <main+0x6b2>
    206c:	a1 96       	adiw	r28, 0x21	; 33
    206e:	4e ac       	ldd	r4, Y+62	; 0x3e
    2070:	5f ac       	ldd	r5, Y+63	; 0x3f
    2072:	a1 97       	sbiw	r28, 0x21	; 33
    2074:	6f 96       	adiw	r28, 0x1f	; 31
    2076:	3f ac       	ldd	r3, Y+63	; 0x3f
    2078:	6f 97       	sbiw	r28, 0x1f	; 31
    207a:	35 cc       	rjmp	.-1942   	; 0x18e6 <main+0x42>
						np_rerender = 1;
						//_delay_ms(100);
						break;
					}
				}
				if(check_touch(TP_X, TP_Y, DEL_BTN_Y, DEL_BTN_X, DEL_BTN_H, DEL_BTN_W)) { //delete button
    207c:	0f 2e       	mov	r0, r31
    207e:	fc e3       	ldi	r31, 0x3C	; 60
    2080:	ef 2e       	mov	r14, r31
    2082:	f1 2c       	mov	r15, r1
    2084:	f0 2d       	mov	r31, r0
    2086:	08 e2       	ldi	r16, 0x28	; 40
    2088:	10 e0       	ldi	r17, 0x00	; 0
    208a:	24 eb       	ldi	r18, 0xB4	; 180
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4e eb       	ldi	r20, 0xBE	; 190
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	b5 01       	movw	r22, r10
    2094:	c6 01       	movw	r24, r12
    2096:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z11check_touchjjjjjj>
    209a:	88 23       	and	r24, r24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <main+0x7fc>
    209e:	6d cd       	rjmp	.-1318   	; 0x1b7a <main+0x2d6>
    20a0:	32 cd       	rjmp	.-1436   	; 0x1b06 <main+0x262>

000020a2 <__umulhisi3>:
    20a2:	a2 9f       	mul	r26, r18
    20a4:	b0 01       	movw	r22, r0
    20a6:	b3 9f       	mul	r27, r19
    20a8:	c0 01       	movw	r24, r0
    20aa:	a3 9f       	mul	r26, r19
    20ac:	70 0d       	add	r23, r0
    20ae:	81 1d       	adc	r24, r1
    20b0:	11 24       	eor	r1, r1
    20b2:	91 1d       	adc	r25, r1
    20b4:	b2 9f       	mul	r27, r18
    20b6:	70 0d       	add	r23, r0
    20b8:	81 1d       	adc	r24, r1
    20ba:	11 24       	eor	r1, r1
    20bc:	91 1d       	adc	r25, r1
    20be:	08 95       	ret

000020c0 <sprintf>:
    20c0:	ae e0       	ldi	r26, 0x0E	; 14
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e6       	ldi	r30, 0x66	; 102
    20c6:	f0 e1       	ldi	r31, 0x10	; 16
    20c8:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__prologue_saves__+0x1c>
    20cc:	0d 89       	ldd	r16, Y+21	; 0x15
    20ce:	1e 89       	ldd	r17, Y+22	; 0x16
    20d0:	86 e0       	ldi	r24, 0x06	; 6
    20d2:	8c 83       	std	Y+4, r24	; 0x04
    20d4:	1a 83       	std	Y+2, r17	; 0x02
    20d6:	09 83       	std	Y+1, r16	; 0x01
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f e7       	ldi	r25, 0x7F	; 127
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	ae 01       	movw	r20, r28
    20e2:	47 5e       	subi	r20, 0xE7	; 231
    20e4:	5f 4f       	sbci	r21, 0xFF	; 255
    20e6:	6f 89       	ldd	r22, Y+23	; 0x17
    20e8:	78 8d       	ldd	r23, Y+24	; 0x18
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	0e 94 82 10 	call	0x2104	; 0x2104 <vfprintf>
    20f2:	ef 81       	ldd	r30, Y+7	; 0x07
    20f4:	f8 85       	ldd	r31, Y+8	; 0x08
    20f6:	e0 0f       	add	r30, r16
    20f8:	f1 1f       	adc	r31, r17
    20fa:	10 82       	st	Z, r1
    20fc:	2e 96       	adiw	r28, 0x0e	; 14
    20fe:	e4 e0       	ldi	r30, 0x04	; 4
    2100:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__epilogue_restores__+0x1c>

00002104 <vfprintf>:
    2104:	ab e0       	ldi	r26, 0x0B	; 11
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e8 e8       	ldi	r30, 0x88	; 136
    210a:	f0 e1       	ldi	r31, 0x10	; 16
    210c:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__>
    2110:	6c 01       	movw	r12, r24
    2112:	7b 01       	movw	r14, r22
    2114:	8a 01       	movw	r16, r20
    2116:	fc 01       	movw	r30, r24
    2118:	17 82       	std	Z+7, r1	; 0x07
    211a:	16 82       	std	Z+6, r1	; 0x06
    211c:	83 81       	ldd	r24, Z+3	; 0x03
    211e:	81 ff       	sbrs	r24, 1
    2120:	cc c1       	rjmp	.+920    	; 0x24ba <vfprintf+0x3b6>
    2122:	ce 01       	movw	r24, r28
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	3c 01       	movw	r6, r24
    2128:	f6 01       	movw	r30, r12
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	f7 01       	movw	r30, r14
    212e:	93 fd       	sbrc	r25, 3
    2130:	85 91       	lpm	r24, Z+
    2132:	93 ff       	sbrs	r25, 3
    2134:	81 91       	ld	r24, Z+
    2136:	7f 01       	movw	r14, r30
    2138:	88 23       	and	r24, r24
    213a:	09 f4       	brne	.+2      	; 0x213e <vfprintf+0x3a>
    213c:	ba c1       	rjmp	.+884    	; 0x24b2 <vfprintf+0x3ae>
    213e:	85 32       	cpi	r24, 0x25	; 37
    2140:	39 f4       	brne	.+14     	; 0x2150 <vfprintf+0x4c>
    2142:	93 fd       	sbrc	r25, 3
    2144:	85 91       	lpm	r24, Z+
    2146:	93 ff       	sbrs	r25, 3
    2148:	81 91       	ld	r24, Z+
    214a:	7f 01       	movw	r14, r30
    214c:	85 32       	cpi	r24, 0x25	; 37
    214e:	29 f4       	brne	.+10     	; 0x215a <vfprintf+0x56>
    2150:	b6 01       	movw	r22, r12
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    2158:	e7 cf       	rjmp	.-50     	; 0x2128 <vfprintf+0x24>
    215a:	91 2c       	mov	r9, r1
    215c:	21 2c       	mov	r2, r1
    215e:	31 2c       	mov	r3, r1
    2160:	ff e1       	ldi	r31, 0x1F	; 31
    2162:	f3 15       	cp	r31, r3
    2164:	d8 f0       	brcs	.+54     	; 0x219c <vfprintf+0x98>
    2166:	8b 32       	cpi	r24, 0x2B	; 43
    2168:	79 f0       	breq	.+30     	; 0x2188 <vfprintf+0x84>
    216a:	38 f4       	brcc	.+14     	; 0x217a <vfprintf+0x76>
    216c:	80 32       	cpi	r24, 0x20	; 32
    216e:	79 f0       	breq	.+30     	; 0x218e <vfprintf+0x8a>
    2170:	83 32       	cpi	r24, 0x23	; 35
    2172:	a1 f4       	brne	.+40     	; 0x219c <vfprintf+0x98>
    2174:	23 2d       	mov	r18, r3
    2176:	20 61       	ori	r18, 0x10	; 16
    2178:	1d c0       	rjmp	.+58     	; 0x21b4 <vfprintf+0xb0>
    217a:	8d 32       	cpi	r24, 0x2D	; 45
    217c:	61 f0       	breq	.+24     	; 0x2196 <vfprintf+0x92>
    217e:	80 33       	cpi	r24, 0x30	; 48
    2180:	69 f4       	brne	.+26     	; 0x219c <vfprintf+0x98>
    2182:	23 2d       	mov	r18, r3
    2184:	21 60       	ori	r18, 0x01	; 1
    2186:	16 c0       	rjmp	.+44     	; 0x21b4 <vfprintf+0xb0>
    2188:	83 2d       	mov	r24, r3
    218a:	82 60       	ori	r24, 0x02	; 2
    218c:	38 2e       	mov	r3, r24
    218e:	e3 2d       	mov	r30, r3
    2190:	e4 60       	ori	r30, 0x04	; 4
    2192:	3e 2e       	mov	r3, r30
    2194:	2a c0       	rjmp	.+84     	; 0x21ea <vfprintf+0xe6>
    2196:	f3 2d       	mov	r31, r3
    2198:	f8 60       	ori	r31, 0x08	; 8
    219a:	1d c0       	rjmp	.+58     	; 0x21d6 <vfprintf+0xd2>
    219c:	37 fc       	sbrc	r3, 7
    219e:	2d c0       	rjmp	.+90     	; 0x21fa <vfprintf+0xf6>
    21a0:	20 ed       	ldi	r18, 0xD0	; 208
    21a2:	28 0f       	add	r18, r24
    21a4:	2a 30       	cpi	r18, 0x0A	; 10
    21a6:	40 f0       	brcs	.+16     	; 0x21b8 <vfprintf+0xb4>
    21a8:	8e 32       	cpi	r24, 0x2E	; 46
    21aa:	b9 f4       	brne	.+46     	; 0x21da <vfprintf+0xd6>
    21ac:	36 fc       	sbrc	r3, 6
    21ae:	81 c1       	rjmp	.+770    	; 0x24b2 <vfprintf+0x3ae>
    21b0:	23 2d       	mov	r18, r3
    21b2:	20 64       	ori	r18, 0x40	; 64
    21b4:	32 2e       	mov	r3, r18
    21b6:	19 c0       	rjmp	.+50     	; 0x21ea <vfprintf+0xe6>
    21b8:	36 fe       	sbrs	r3, 6
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <vfprintf+0xc4>
    21bc:	8a e0       	ldi	r24, 0x0A	; 10
    21be:	98 9e       	mul	r9, r24
    21c0:	20 0d       	add	r18, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	92 2e       	mov	r9, r18
    21c6:	11 c0       	rjmp	.+34     	; 0x21ea <vfprintf+0xe6>
    21c8:	ea e0       	ldi	r30, 0x0A	; 10
    21ca:	2e 9e       	mul	r2, r30
    21cc:	20 0d       	add	r18, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	22 2e       	mov	r2, r18
    21d2:	f3 2d       	mov	r31, r3
    21d4:	f0 62       	ori	r31, 0x20	; 32
    21d6:	3f 2e       	mov	r3, r31
    21d8:	08 c0       	rjmp	.+16     	; 0x21ea <vfprintf+0xe6>
    21da:	8c 36       	cpi	r24, 0x6C	; 108
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <vfprintf+0xe2>
    21de:	83 2d       	mov	r24, r3
    21e0:	80 68       	ori	r24, 0x80	; 128
    21e2:	38 2e       	mov	r3, r24
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <vfprintf+0xe6>
    21e6:	88 36       	cpi	r24, 0x68	; 104
    21e8:	41 f4       	brne	.+16     	; 0x21fa <vfprintf+0xf6>
    21ea:	f7 01       	movw	r30, r14
    21ec:	93 fd       	sbrc	r25, 3
    21ee:	85 91       	lpm	r24, Z+
    21f0:	93 ff       	sbrs	r25, 3
    21f2:	81 91       	ld	r24, Z+
    21f4:	7f 01       	movw	r14, r30
    21f6:	81 11       	cpse	r24, r1
    21f8:	b3 cf       	rjmp	.-154    	; 0x2160 <vfprintf+0x5c>
    21fa:	98 2f       	mov	r25, r24
    21fc:	9f 7d       	andi	r25, 0xDF	; 223
    21fe:	95 54       	subi	r25, 0x45	; 69
    2200:	93 30       	cpi	r25, 0x03	; 3
    2202:	28 f4       	brcc	.+10     	; 0x220e <vfprintf+0x10a>
    2204:	0c 5f       	subi	r16, 0xFC	; 252
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	9f e3       	ldi	r25, 0x3F	; 63
    220a:	99 83       	std	Y+1, r25	; 0x01
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <vfprintf+0x124>
    220e:	83 36       	cpi	r24, 0x63	; 99
    2210:	31 f0       	breq	.+12     	; 0x221e <vfprintf+0x11a>
    2212:	83 37       	cpi	r24, 0x73	; 115
    2214:	71 f0       	breq	.+28     	; 0x2232 <vfprintf+0x12e>
    2216:	83 35       	cpi	r24, 0x53	; 83
    2218:	09 f0       	breq	.+2      	; 0x221c <vfprintf+0x118>
    221a:	59 c0       	rjmp	.+178    	; 0x22ce <vfprintf+0x1ca>
    221c:	21 c0       	rjmp	.+66     	; 0x2260 <vfprintf+0x15c>
    221e:	f8 01       	movw	r30, r16
    2220:	80 81       	ld	r24, Z
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	0e 5f       	subi	r16, 0xFE	; 254
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	88 24       	eor	r8, r8
    222a:	83 94       	inc	r8
    222c:	91 2c       	mov	r9, r1
    222e:	53 01       	movw	r10, r6
    2230:	13 c0       	rjmp	.+38     	; 0x2258 <vfprintf+0x154>
    2232:	28 01       	movw	r4, r16
    2234:	f2 e0       	ldi	r31, 0x02	; 2
    2236:	4f 0e       	add	r4, r31
    2238:	51 1c       	adc	r5, r1
    223a:	f8 01       	movw	r30, r16
    223c:	a0 80       	ld	r10, Z
    223e:	b1 80       	ldd	r11, Z+1	; 0x01
    2240:	36 fe       	sbrs	r3, 6
    2242:	03 c0       	rjmp	.+6      	; 0x224a <vfprintf+0x146>
    2244:	69 2d       	mov	r22, r9
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	02 c0       	rjmp	.+4      	; 0x224e <vfprintf+0x14a>
    224a:	6f ef       	ldi	r22, 0xFF	; 255
    224c:	7f ef       	ldi	r23, 0xFF	; 255
    224e:	c5 01       	movw	r24, r10
    2250:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strnlen>
    2254:	4c 01       	movw	r8, r24
    2256:	82 01       	movw	r16, r4
    2258:	f3 2d       	mov	r31, r3
    225a:	ff 77       	andi	r31, 0x7F	; 127
    225c:	3f 2e       	mov	r3, r31
    225e:	16 c0       	rjmp	.+44     	; 0x228c <vfprintf+0x188>
    2260:	28 01       	movw	r4, r16
    2262:	22 e0       	ldi	r18, 0x02	; 2
    2264:	42 0e       	add	r4, r18
    2266:	51 1c       	adc	r5, r1
    2268:	f8 01       	movw	r30, r16
    226a:	a0 80       	ld	r10, Z
    226c:	b1 80       	ldd	r11, Z+1	; 0x01
    226e:	36 fe       	sbrs	r3, 6
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <vfprintf+0x174>
    2272:	69 2d       	mov	r22, r9
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	02 c0       	rjmp	.+4      	; 0x227c <vfprintf+0x178>
    2278:	6f ef       	ldi	r22, 0xFF	; 255
    227a:	7f ef       	ldi	r23, 0xFF	; 255
    227c:	c5 01       	movw	r24, r10
    227e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <strnlen_P>
    2282:	4c 01       	movw	r8, r24
    2284:	f3 2d       	mov	r31, r3
    2286:	f0 68       	ori	r31, 0x80	; 128
    2288:	3f 2e       	mov	r3, r31
    228a:	82 01       	movw	r16, r4
    228c:	33 fc       	sbrc	r3, 3
    228e:	1b c0       	rjmp	.+54     	; 0x22c6 <vfprintf+0x1c2>
    2290:	82 2d       	mov	r24, r2
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 16       	cp	r8, r24
    2296:	99 06       	cpc	r9, r25
    2298:	b0 f4       	brcc	.+44     	; 0x22c6 <vfprintf+0x1c2>
    229a:	b6 01       	movw	r22, r12
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    22a4:	2a 94       	dec	r2
    22a6:	f4 cf       	rjmp	.-24     	; 0x2290 <vfprintf+0x18c>
    22a8:	f5 01       	movw	r30, r10
    22aa:	37 fc       	sbrc	r3, 7
    22ac:	85 91       	lpm	r24, Z+
    22ae:	37 fe       	sbrs	r3, 7
    22b0:	81 91       	ld	r24, Z+
    22b2:	5f 01       	movw	r10, r30
    22b4:	b6 01       	movw	r22, r12
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    22bc:	21 10       	cpse	r2, r1
    22be:	2a 94       	dec	r2
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	82 1a       	sub	r8, r18
    22c4:	91 08       	sbc	r9, r1
    22c6:	81 14       	cp	r8, r1
    22c8:	91 04       	cpc	r9, r1
    22ca:	71 f7       	brne	.-36     	; 0x22a8 <vfprintf+0x1a4>
    22cc:	e8 c0       	rjmp	.+464    	; 0x249e <vfprintf+0x39a>
    22ce:	84 36       	cpi	r24, 0x64	; 100
    22d0:	11 f0       	breq	.+4      	; 0x22d6 <vfprintf+0x1d2>
    22d2:	89 36       	cpi	r24, 0x69	; 105
    22d4:	41 f5       	brne	.+80     	; 0x2326 <vfprintf+0x222>
    22d6:	f8 01       	movw	r30, r16
    22d8:	37 fe       	sbrs	r3, 7
    22da:	07 c0       	rjmp	.+14     	; 0x22ea <vfprintf+0x1e6>
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	0c 5f       	subi	r16, 0xFC	; 252
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	08 c0       	rjmp	.+16     	; 0x22fa <vfprintf+0x1f6>
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	07 2e       	mov	r0, r23
    22f0:	00 0c       	add	r0, r0
    22f2:	88 0b       	sbc	r24, r24
    22f4:	99 0b       	sbc	r25, r25
    22f6:	0e 5f       	subi	r16, 0xFE	; 254
    22f8:	1f 4f       	sbci	r17, 0xFF	; 255
    22fa:	f3 2d       	mov	r31, r3
    22fc:	ff 76       	andi	r31, 0x6F	; 111
    22fe:	3f 2e       	mov	r3, r31
    2300:	97 ff       	sbrs	r25, 7
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <vfprintf+0x212>
    2304:	90 95       	com	r25
    2306:	80 95       	com	r24
    2308:	70 95       	com	r23
    230a:	61 95       	neg	r22
    230c:	7f 4f       	sbci	r23, 0xFF	; 255
    230e:	8f 4f       	sbci	r24, 0xFF	; 255
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	f0 68       	ori	r31, 0x80	; 128
    2314:	3f 2e       	mov	r3, r31
    2316:	2a e0       	ldi	r18, 0x0A	; 10
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	a3 01       	movw	r20, r6
    231c:	0e 94 b5 12 	call	0x256a	; 0x256a <__ultoa_invert>
    2320:	88 2e       	mov	r8, r24
    2322:	86 18       	sub	r8, r6
    2324:	45 c0       	rjmp	.+138    	; 0x23b0 <vfprintf+0x2ac>
    2326:	85 37       	cpi	r24, 0x75	; 117
    2328:	31 f4       	brne	.+12     	; 0x2336 <vfprintf+0x232>
    232a:	23 2d       	mov	r18, r3
    232c:	2f 7e       	andi	r18, 0xEF	; 239
    232e:	b2 2e       	mov	r11, r18
    2330:	2a e0       	ldi	r18, 0x0A	; 10
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	25 c0       	rjmp	.+74     	; 0x2380 <vfprintf+0x27c>
    2336:	93 2d       	mov	r25, r3
    2338:	99 7f       	andi	r25, 0xF9	; 249
    233a:	b9 2e       	mov	r11, r25
    233c:	8f 36       	cpi	r24, 0x6F	; 111
    233e:	c1 f0       	breq	.+48     	; 0x2370 <vfprintf+0x26c>
    2340:	18 f4       	brcc	.+6      	; 0x2348 <vfprintf+0x244>
    2342:	88 35       	cpi	r24, 0x58	; 88
    2344:	79 f0       	breq	.+30     	; 0x2364 <vfprintf+0x260>
    2346:	b5 c0       	rjmp	.+362    	; 0x24b2 <vfprintf+0x3ae>
    2348:	80 37       	cpi	r24, 0x70	; 112
    234a:	19 f0       	breq	.+6      	; 0x2352 <vfprintf+0x24e>
    234c:	88 37       	cpi	r24, 0x78	; 120
    234e:	21 f0       	breq	.+8      	; 0x2358 <vfprintf+0x254>
    2350:	b0 c0       	rjmp	.+352    	; 0x24b2 <vfprintf+0x3ae>
    2352:	e9 2f       	mov	r30, r25
    2354:	e0 61       	ori	r30, 0x10	; 16
    2356:	be 2e       	mov	r11, r30
    2358:	b4 fe       	sbrs	r11, 4
    235a:	0d c0       	rjmp	.+26     	; 0x2376 <vfprintf+0x272>
    235c:	fb 2d       	mov	r31, r11
    235e:	f4 60       	ori	r31, 0x04	; 4
    2360:	bf 2e       	mov	r11, r31
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <vfprintf+0x272>
    2364:	34 fe       	sbrs	r3, 4
    2366:	0a c0       	rjmp	.+20     	; 0x237c <vfprintf+0x278>
    2368:	29 2f       	mov	r18, r25
    236a:	26 60       	ori	r18, 0x06	; 6
    236c:	b2 2e       	mov	r11, r18
    236e:	06 c0       	rjmp	.+12     	; 0x237c <vfprintf+0x278>
    2370:	28 e0       	ldi	r18, 0x08	; 8
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <vfprintf+0x27c>
    2376:	20 e1       	ldi	r18, 0x10	; 16
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <vfprintf+0x27c>
    237c:	20 e1       	ldi	r18, 0x10	; 16
    237e:	32 e0       	ldi	r19, 0x02	; 2
    2380:	f8 01       	movw	r30, r16
    2382:	b7 fe       	sbrs	r11, 7
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <vfprintf+0x290>
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	0c 5f       	subi	r16, 0xFC	; 252
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	06 c0       	rjmp	.+12     	; 0x23a0 <vfprintf+0x29c>
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 5f       	subi	r16, 0xFE	; 254
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	a3 01       	movw	r20, r6
    23a2:	0e 94 b5 12 	call	0x256a	; 0x256a <__ultoa_invert>
    23a6:	88 2e       	mov	r8, r24
    23a8:	86 18       	sub	r8, r6
    23aa:	fb 2d       	mov	r31, r11
    23ac:	ff 77       	andi	r31, 0x7F	; 127
    23ae:	3f 2e       	mov	r3, r31
    23b0:	36 fe       	sbrs	r3, 6
    23b2:	0d c0       	rjmp	.+26     	; 0x23ce <vfprintf+0x2ca>
    23b4:	23 2d       	mov	r18, r3
    23b6:	2e 7f       	andi	r18, 0xFE	; 254
    23b8:	a2 2e       	mov	r10, r18
    23ba:	89 14       	cp	r8, r9
    23bc:	58 f4       	brcc	.+22     	; 0x23d4 <vfprintf+0x2d0>
    23be:	34 fe       	sbrs	r3, 4
    23c0:	0b c0       	rjmp	.+22     	; 0x23d8 <vfprintf+0x2d4>
    23c2:	32 fc       	sbrc	r3, 2
    23c4:	09 c0       	rjmp	.+18     	; 0x23d8 <vfprintf+0x2d4>
    23c6:	83 2d       	mov	r24, r3
    23c8:	8e 7e       	andi	r24, 0xEE	; 238
    23ca:	a8 2e       	mov	r10, r24
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <vfprintf+0x2d4>
    23ce:	b8 2c       	mov	r11, r8
    23d0:	a3 2c       	mov	r10, r3
    23d2:	03 c0       	rjmp	.+6      	; 0x23da <vfprintf+0x2d6>
    23d4:	b8 2c       	mov	r11, r8
    23d6:	01 c0       	rjmp	.+2      	; 0x23da <vfprintf+0x2d6>
    23d8:	b9 2c       	mov	r11, r9
    23da:	a4 fe       	sbrs	r10, 4
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <vfprintf+0x2f8>
    23de:	fe 01       	movw	r30, r28
    23e0:	e8 0d       	add	r30, r8
    23e2:	f1 1d       	adc	r31, r1
    23e4:	80 81       	ld	r24, Z
    23e6:	80 33       	cpi	r24, 0x30	; 48
    23e8:	21 f4       	brne	.+8      	; 0x23f2 <vfprintf+0x2ee>
    23ea:	9a 2d       	mov	r25, r10
    23ec:	99 7e       	andi	r25, 0xE9	; 233
    23ee:	a9 2e       	mov	r10, r25
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <vfprintf+0x300>
    23f2:	a2 fe       	sbrs	r10, 2
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <vfprintf+0x2fe>
    23f6:	b3 94       	inc	r11
    23f8:	b3 94       	inc	r11
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <vfprintf+0x300>
    23fc:	8a 2d       	mov	r24, r10
    23fe:	86 78       	andi	r24, 0x86	; 134
    2400:	09 f0       	breq	.+2      	; 0x2404 <vfprintf+0x300>
    2402:	b3 94       	inc	r11
    2404:	a3 fc       	sbrc	r10, 3
    2406:	11 c0       	rjmp	.+34     	; 0x242a <vfprintf+0x326>
    2408:	a0 fe       	sbrs	r10, 0
    240a:	06 c0       	rjmp	.+12     	; 0x2418 <vfprintf+0x314>
    240c:	b2 14       	cp	r11, r2
    240e:	88 f4       	brcc	.+34     	; 0x2432 <vfprintf+0x32e>
    2410:	28 0c       	add	r2, r8
    2412:	92 2c       	mov	r9, r2
    2414:	9b 18       	sub	r9, r11
    2416:	0e c0       	rjmp	.+28     	; 0x2434 <vfprintf+0x330>
    2418:	b2 14       	cp	r11, r2
    241a:	60 f4       	brcc	.+24     	; 0x2434 <vfprintf+0x330>
    241c:	b6 01       	movw	r22, r12
    241e:	80 e2       	ldi	r24, 0x20	; 32
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    2426:	b3 94       	inc	r11
    2428:	f7 cf       	rjmp	.-18     	; 0x2418 <vfprintf+0x314>
    242a:	b2 14       	cp	r11, r2
    242c:	18 f4       	brcc	.+6      	; 0x2434 <vfprintf+0x330>
    242e:	2b 18       	sub	r2, r11
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <vfprintf+0x332>
    2432:	98 2c       	mov	r9, r8
    2434:	21 2c       	mov	r2, r1
    2436:	a4 fe       	sbrs	r10, 4
    2438:	10 c0       	rjmp	.+32     	; 0x245a <vfprintf+0x356>
    243a:	b6 01       	movw	r22, r12
    243c:	80 e3       	ldi	r24, 0x30	; 48
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    2444:	a2 fe       	sbrs	r10, 2
    2446:	17 c0       	rjmp	.+46     	; 0x2476 <vfprintf+0x372>
    2448:	a1 fc       	sbrc	r10, 1
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <vfprintf+0x34e>
    244c:	88 e7       	ldi	r24, 0x78	; 120
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <vfprintf+0x352>
    2452:	88 e5       	ldi	r24, 0x58	; 88
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	b6 01       	movw	r22, r12
    2458:	0c c0       	rjmp	.+24     	; 0x2472 <vfprintf+0x36e>
    245a:	8a 2d       	mov	r24, r10
    245c:	86 78       	andi	r24, 0x86	; 134
    245e:	59 f0       	breq	.+22     	; 0x2476 <vfprintf+0x372>
    2460:	a1 fe       	sbrs	r10, 1
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <vfprintf+0x364>
    2464:	8b e2       	ldi	r24, 0x2B	; 43
    2466:	01 c0       	rjmp	.+2      	; 0x246a <vfprintf+0x366>
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	a7 fc       	sbrc	r10, 7
    246c:	8d e2       	ldi	r24, 0x2D	; 45
    246e:	b6 01       	movw	r22, r12
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    2476:	89 14       	cp	r8, r9
    2478:	38 f4       	brcc	.+14     	; 0x2488 <vfprintf+0x384>
    247a:	b6 01       	movw	r22, r12
    247c:	80 e3       	ldi	r24, 0x30	; 48
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    2484:	9a 94       	dec	r9
    2486:	f7 cf       	rjmp	.-18     	; 0x2476 <vfprintf+0x372>
    2488:	8a 94       	dec	r8
    248a:	f3 01       	movw	r30, r6
    248c:	e8 0d       	add	r30, r8
    248e:	f1 1d       	adc	r31, r1
    2490:	80 81       	ld	r24, Z
    2492:	b6 01       	movw	r22, r12
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    249a:	81 10       	cpse	r8, r1
    249c:	f5 cf       	rjmp	.-22     	; 0x2488 <vfprintf+0x384>
    249e:	22 20       	and	r2, r2
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <vfprintf+0x3a0>
    24a2:	42 ce       	rjmp	.-892    	; 0x2128 <vfprintf+0x24>
    24a4:	b6 01       	movw	r22, r12
    24a6:	80 e2       	ldi	r24, 0x20	; 32
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 79 12 	call	0x24f2	; 0x24f2 <fputc>
    24ae:	2a 94       	dec	r2
    24b0:	f6 cf       	rjmp	.-20     	; 0x249e <vfprintf+0x39a>
    24b2:	f6 01       	movw	r30, r12
    24b4:	86 81       	ldd	r24, Z+6	; 0x06
    24b6:	97 81       	ldd	r25, Z+7	; 0x07
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <vfprintf+0x3ba>
    24ba:	8f ef       	ldi	r24, 0xFF	; 255
    24bc:	9f ef       	ldi	r25, 0xFF	; 255
    24be:	2b 96       	adiw	r28, 0x0b	; 11
    24c0:	e2 e1       	ldi	r30, 0x12	; 18
    24c2:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__>

000024c6 <strnlen_P>:
    24c6:	fc 01       	movw	r30, r24
    24c8:	05 90       	lpm	r0, Z+
    24ca:	61 50       	subi	r22, 0x01	; 1
    24cc:	70 40       	sbci	r23, 0x00	; 0
    24ce:	01 10       	cpse	r0, r1
    24d0:	d8 f7       	brcc	.-10     	; 0x24c8 <strnlen_P+0x2>
    24d2:	80 95       	com	r24
    24d4:	90 95       	com	r25
    24d6:	8e 0f       	add	r24, r30
    24d8:	9f 1f       	adc	r25, r31
    24da:	08 95       	ret

000024dc <strnlen>:
    24dc:	fc 01       	movw	r30, r24
    24de:	61 50       	subi	r22, 0x01	; 1
    24e0:	70 40       	sbci	r23, 0x00	; 0
    24e2:	01 90       	ld	r0, Z+
    24e4:	01 10       	cpse	r0, r1
    24e6:	d8 f7       	brcc	.-10     	; 0x24de <strnlen+0x2>
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	8e 0f       	add	r24, r30
    24ee:	9f 1f       	adc	r25, r31
    24f0:	08 95       	ret

000024f2 <fputc>:
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	fb 01       	movw	r30, r22
    24fc:	23 81       	ldd	r18, Z+3	; 0x03
    24fe:	21 fd       	sbrc	r18, 1
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <fputc+0x16>
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	9f ef       	ldi	r25, 0xFF	; 255
    2506:	2c c0       	rjmp	.+88     	; 0x2560 <fputc+0x6e>
    2508:	22 ff       	sbrs	r18, 2
    250a:	16 c0       	rjmp	.+44     	; 0x2538 <fputc+0x46>
    250c:	46 81       	ldd	r20, Z+6	; 0x06
    250e:	57 81       	ldd	r21, Z+7	; 0x07
    2510:	24 81       	ldd	r18, Z+4	; 0x04
    2512:	35 81       	ldd	r19, Z+5	; 0x05
    2514:	42 17       	cp	r20, r18
    2516:	53 07       	cpc	r21, r19
    2518:	44 f4       	brge	.+16     	; 0x252a <fputc+0x38>
    251a:	a0 81       	ld	r26, Z
    251c:	b1 81       	ldd	r27, Z+1	; 0x01
    251e:	9d 01       	movw	r18, r26
    2520:	2f 5f       	subi	r18, 0xFF	; 255
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	31 83       	std	Z+1, r19	; 0x01
    2526:	20 83       	st	Z, r18
    2528:	8c 93       	st	X, r24
    252a:	26 81       	ldd	r18, Z+6	; 0x06
    252c:	37 81       	ldd	r19, Z+7	; 0x07
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	37 83       	std	Z+7, r19	; 0x07
    2534:	26 83       	std	Z+6, r18	; 0x06
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <fputc+0x6e>
    2538:	8b 01       	movw	r16, r22
    253a:	ec 01       	movw	r28, r24
    253c:	fb 01       	movw	r30, r22
    253e:	00 84       	ldd	r0, Z+8	; 0x08
    2540:	f1 85       	ldd	r31, Z+9	; 0x09
    2542:	e0 2d       	mov	r30, r0
    2544:	09 95       	icall
    2546:	89 2b       	or	r24, r25
    2548:	e1 f6       	brne	.-72     	; 0x2502 <fputc+0x10>
    254a:	d8 01       	movw	r26, r16
    254c:	16 96       	adiw	r26, 0x06	; 6
    254e:	8d 91       	ld	r24, X+
    2550:	9c 91       	ld	r25, X
    2552:	17 97       	sbiw	r26, 0x07	; 7
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	17 96       	adiw	r26, 0x07	; 7
    2558:	9c 93       	st	X, r25
    255a:	8e 93       	st	-X, r24
    255c:	16 97       	sbiw	r26, 0x06	; 6
    255e:	ce 01       	movw	r24, r28
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <__ultoa_invert>:
    256a:	fa 01       	movw	r30, r20
    256c:	aa 27       	eor	r26, r26
    256e:	28 30       	cpi	r18, 0x08	; 8
    2570:	51 f1       	breq	.+84     	; 0x25c6 <__ultoa_invert+0x5c>
    2572:	20 31       	cpi	r18, 0x10	; 16
    2574:	81 f1       	breq	.+96     	; 0x25d6 <__ultoa_invert+0x6c>
    2576:	e8 94       	clt
    2578:	6f 93       	push	r22
    257a:	6e 7f       	andi	r22, 0xFE	; 254
    257c:	6e 5f       	subi	r22, 0xFE	; 254
    257e:	7f 4f       	sbci	r23, 0xFF	; 255
    2580:	8f 4f       	sbci	r24, 0xFF	; 255
    2582:	9f 4f       	sbci	r25, 0xFF	; 255
    2584:	af 4f       	sbci	r26, 0xFF	; 255
    2586:	b1 e0       	ldi	r27, 0x01	; 1
    2588:	3e d0       	rcall	.+124    	; 0x2606 <__ultoa_invert+0x9c>
    258a:	b4 e0       	ldi	r27, 0x04	; 4
    258c:	3c d0       	rcall	.+120    	; 0x2606 <__ultoa_invert+0x9c>
    258e:	67 0f       	add	r22, r23
    2590:	78 1f       	adc	r23, r24
    2592:	89 1f       	adc	r24, r25
    2594:	9a 1f       	adc	r25, r26
    2596:	a1 1d       	adc	r26, r1
    2598:	68 0f       	add	r22, r24
    259a:	79 1f       	adc	r23, r25
    259c:	8a 1f       	adc	r24, r26
    259e:	91 1d       	adc	r25, r1
    25a0:	a1 1d       	adc	r26, r1
    25a2:	6a 0f       	add	r22, r26
    25a4:	71 1d       	adc	r23, r1
    25a6:	81 1d       	adc	r24, r1
    25a8:	91 1d       	adc	r25, r1
    25aa:	a1 1d       	adc	r26, r1
    25ac:	20 d0       	rcall	.+64     	; 0x25ee <__ultoa_invert+0x84>
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <__ultoa_invert+0x48>
    25b0:	68 94       	set
    25b2:	3f 91       	pop	r19
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	26 9f       	mul	r18, r22
    25b8:	11 24       	eor	r1, r1
    25ba:	30 19       	sub	r19, r0
    25bc:	30 5d       	subi	r19, 0xD0	; 208
    25be:	31 93       	st	Z+, r19
    25c0:	de f6       	brtc	.-74     	; 0x2578 <__ultoa_invert+0xe>
    25c2:	cf 01       	movw	r24, r30
    25c4:	08 95       	ret
    25c6:	46 2f       	mov	r20, r22
    25c8:	47 70       	andi	r20, 0x07	; 7
    25ca:	40 5d       	subi	r20, 0xD0	; 208
    25cc:	41 93       	st	Z+, r20
    25ce:	b3 e0       	ldi	r27, 0x03	; 3
    25d0:	0f d0       	rcall	.+30     	; 0x25f0 <__ultoa_invert+0x86>
    25d2:	c9 f7       	brne	.-14     	; 0x25c6 <__ultoa_invert+0x5c>
    25d4:	f6 cf       	rjmp	.-20     	; 0x25c2 <__ultoa_invert+0x58>
    25d6:	46 2f       	mov	r20, r22
    25d8:	4f 70       	andi	r20, 0x0F	; 15
    25da:	40 5d       	subi	r20, 0xD0	; 208
    25dc:	4a 33       	cpi	r20, 0x3A	; 58
    25de:	18 f0       	brcs	.+6      	; 0x25e6 <__ultoa_invert+0x7c>
    25e0:	49 5d       	subi	r20, 0xD9	; 217
    25e2:	31 fd       	sbrc	r19, 1
    25e4:	40 52       	subi	r20, 0x20	; 32
    25e6:	41 93       	st	Z+, r20
    25e8:	02 d0       	rcall	.+4      	; 0x25ee <__ultoa_invert+0x84>
    25ea:	a9 f7       	brne	.-22     	; 0x25d6 <__ultoa_invert+0x6c>
    25ec:	ea cf       	rjmp	.-44     	; 0x25c2 <__ultoa_invert+0x58>
    25ee:	b4 e0       	ldi	r27, 0x04	; 4
    25f0:	a6 95       	lsr	r26
    25f2:	97 95       	ror	r25
    25f4:	87 95       	ror	r24
    25f6:	77 95       	ror	r23
    25f8:	67 95       	ror	r22
    25fa:	ba 95       	dec	r27
    25fc:	c9 f7       	brne	.-14     	; 0x25f0 <__ultoa_invert+0x86>
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	61 05       	cpc	r22, r1
    2602:	71 05       	cpc	r23, r1
    2604:	08 95       	ret
    2606:	9b 01       	movw	r18, r22
    2608:	ac 01       	movw	r20, r24
    260a:	0a 2e       	mov	r0, r26
    260c:	06 94       	lsr	r0
    260e:	57 95       	ror	r21
    2610:	47 95       	ror	r20
    2612:	37 95       	ror	r19
    2614:	27 95       	ror	r18
    2616:	ba 95       	dec	r27
    2618:	c9 f7       	brne	.-14     	; 0x260c <__ultoa_invert+0xa2>
    261a:	62 0f       	add	r22, r18
    261c:	73 1f       	adc	r23, r19
    261e:	84 1f       	adc	r24, r20
    2620:	95 1f       	adc	r25, r21
    2622:	a0 1d       	adc	r26, r0
    2624:	08 95       	ret

00002626 <__prologue_saves__>:
    2626:	2f 92       	push	r2
    2628:	3f 92       	push	r3
    262a:	4f 92       	push	r4
    262c:	5f 92       	push	r5
    262e:	6f 92       	push	r6
    2630:	7f 92       	push	r7
    2632:	8f 92       	push	r8
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	ca 1b       	sub	r28, r26
    2650:	db 0b       	sbc	r29, r27
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	09 94       	ijmp

0000265e <__epilogue_restores__>:
    265e:	2a 88       	ldd	r2, Y+18	; 0x12
    2660:	39 88       	ldd	r3, Y+17	; 0x11
    2662:	48 88       	ldd	r4, Y+16	; 0x10
    2664:	5f 84       	ldd	r5, Y+15	; 0x0f
    2666:	6e 84       	ldd	r6, Y+14	; 0x0e
    2668:	7d 84       	ldd	r7, Y+13	; 0x0d
    266a:	8c 84       	ldd	r8, Y+12	; 0x0c
    266c:	9b 84       	ldd	r9, Y+11	; 0x0b
    266e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2670:	b9 84       	ldd	r11, Y+9	; 0x09
    2672:	c8 84       	ldd	r12, Y+8	; 0x08
    2674:	df 80       	ldd	r13, Y+7	; 0x07
    2676:	ee 80       	ldd	r14, Y+6	; 0x06
    2678:	fd 80       	ldd	r15, Y+5	; 0x05
    267a:	0c 81       	ldd	r16, Y+4	; 0x04
    267c:	1b 81       	ldd	r17, Y+3	; 0x03
    267e:	aa 81       	ldd	r26, Y+2	; 0x02
    2680:	b9 81       	ldd	r27, Y+1	; 0x01
    2682:	ce 0f       	add	r28, r30
    2684:	d1 1d       	adc	r29, r1
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	ed 01       	movw	r28, r26
    2692:	08 95       	ret

00002694 <_exit>:
    2694:	f8 94       	cli

00002696 <__stop_program>:
    2696:	ff cf       	rjmp	.-2      	; 0x2696 <__stop_program>
